"""
auto-generate the C++ tests that go in SHEEP/tests
"""

import os
import re
import random

OUTPUT_DIR = os.environ["HOME"]+"/SHEEP/tests/testtests"

def c_style_modulo(n,m):
    res = n % m
    if (n < 0):
        res -= m
    return res

    
def min_max(input_type):
    if input_type == "bool":
        return 0,1
    else:
        bitwidth = re.search("[\d]+",input_type).group()
        if input_type.startswith("u"):
            return 0,pow(2,int(bitwidth))-1
        else:
            return -1*pow(2,int(bitwidth)-1), pow(2,int(bitwidth)-1)-1  

def calculate_outputs(inputs0,inputs1,selects,gate,input_type):
    """
    calculate what we would expect from the given inputs
    """
    outputs = []
    min_val,max_val = min_max(input_type)
    for i in range(len(inputs0)):
        if gate == "Add":
            result = c_style_modulo(inputs0[i] + inputs1[i], max_val+1)
            outputs.append(result)
        elif gate == "Subtract":
            result = c_style_modulo(inputs0[i] - inputs1[i], max_val+1)
            outputs.append(result)
        elif gate == "Multiply":
            result = c_style_modulo(inputs0[i] * inputs1[i], max_val+1)
            outputs.append(result)
        elif gate == "Compare":
            result = int(inputs0[i] > inputs1[i])
            outputs.append(result)
        elif gate == "Negate":
            if (input_type == "bool"):
                results.append((1+inputs[0]) % 2)
                outputs.append(result)
            elif (input_type.startswith("u")):
                results.append(max_val+1 - inputs[0])
                outputs.append(result)
            else:
                if inputs[0] == min_val:
                    outputs.append(min_val)
                else:
                    outputs.append(-1*inputs0[0])
        elif gate == "Select":
            if selects[i] == 1:
                outputs.append(inputs0[i])
            else:
                outputs.append(inputs1[i])                
        
    return outputs

        
def generate_test_code(context, gate, input_type):
    """
    create a test file with an appropriate circuit/type and random inputs.
    Use 16 slots per input - all combinations of minval, maxval, 0 and random
    """

    ### assume this func is called with a context name like e.g. HElib_F2.
    ###  we need to adapt this for the output filename, and for the namespace
    context_name_for_filename = re.sub("_","-",context.lower())
    context_name_for_namespace = context.split("_")[0]

    
    outfile = open(os.path.join(OUTPUT_DIR,"test-"+context.lower()+"-"+input_type+"-"+gate.lower()+".cpp"),"w")
    outfile.write(' /*  Code auto-generated by scripts/generate_test_code.py  */ \n \n')
    outfile.write('#include <memory>\n#include "circuit-repo.hpp"\n#include <memory>\n#include <cstdint>\n#include <cassert>\n#include <algorithm>\n#include "circuit-test-util.hpp"\n')
    outfile.write('#include context-'+context_name_for_filename+'.hpp \n')
    outfile.write("using namespace Sheep::"+context_name_for_namespace+"; \n \n")
    outfile.write('typedef Context'+context+'<'+input_type+'>::Plaintext Plaintext;\n')
    outfile.write('typedef std::vector< Plaintext > PlaintextVec; \n')
    outfile.write('typedef Context'+context+'<'+input_type+'>::Ciphertext Ciphertext; \n')
    outfile.write('typedef std::vector<'+input_type+'> input; \n')      
    outfile.write("typedef std::chrono::duration<double, std::micro> DurationT; \n \n")
    outfile.write("int main() { \n \n")
    outfile.write(" // create circuit \n \n")
    outfile.write("    CircuitRepo cr;\n    Circuit circ = cr.create_circuit(Gate::"+gate+", 1); \n    std::cout << circ;\n \n")
    outfile.write(" // create context \n \n")
    outfile.write("    Context"+context+"<"+input_type+"> ctx; \n \n")
    outfile.write(" // generate inputs \n \n")
    minval, maxval = min_max(input_type)
    inputs = [[],[]]
    selects = []
    vals = [minval, maxval, 0, random.randint(minval,maxval)]
    for i in range(4):
        for j in range(4):
            inputs[0].append(vals[i])
            inputs[1].append(vals[j])
            if i < 2:
                selects.append(0)
            else:
                selects.append(1)    
    outputs = calculate_outputs(inputs[0],inputs[1],selects,gate,input_type)
    for i in range(len(inputs)):
        input_string = "    PlaintextVec input"+str(i)+" = { "
        for ii in inputs[i]:
            input_string += str(ii)+","
    ## remove the trailing comma
        input_string = input_string[:-1]
        input_string += "} ; \n"
        outfile.write(input_string)
    outfile.write("    std::vector<PlaintextVec> inputs = { input0, input1 };")
    outfile.write("    /// run the test \n \n")
    outfile.write("    std::vector<PlaintextVec> results = ctx.eval_with_plaintexts(circ,inputs,durations); \n")
    outfile.write("    //// check the results \n \n")
    for i in range(len(outputs)):
        outfile.write("    assert(results[0]["+str(i)+"] == "+str(outputs[i])+"); \n")
        pass
    outfile.write("}")
    

    
    
    outfile.close()
    return inputs[0],inputs[1],selects,outputs


if __name__ == "__main__":
    i0,i1,s,o = generate_test_code("Clear","Add","int8_t")
