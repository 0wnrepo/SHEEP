Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 10.34      0.06     0.06                             NTL::FromModularRep(NTL::zz_p*, NTL::fftRep const&, long, long, NTL::zz_pInfoT*)
  8.62      0.11     0.05                             NTL::PlainRem(NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pX const&)
  5.17      0.14     0.03                             NTL::new_ifft_short1_flipped(unsigned long*, long, NTL::new_mod_t const&)
  3.45      0.16     0.02   418113     0.05     0.05  NTL::Vec<NTL::zz_p>::Init(long, NTL::zz_p const*)
  3.45      0.18     0.02    26100     0.77     0.77  BluesteinFFT(NTL::zz_pX&, long, NTL::zz_p const&, NTL::zz_pX const&, NTL::Vec<unsigned long> const&, NTL::fftRep const&)
  3.45      0.20     0.02                             NTL::RandomStream_impl::get_bytes(unsigned char*, long, long)
  3.45      0.22     0.02                             NTL::XGCD(long&, long&, long&, long, long)
  3.45      0.24     0.02                             NTL::new_fft(long*, long const*, long, NTL::FFTPrimeInfo const&, long, long)
  3.45      0.26     0.02                             NTL::PlainMul(NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pX const&)
  3.45      0.28     0.02                             NTL::PlainSqr(NTL::zz_pX&, NTL::zz_pX const&)
  3.45      0.30     0.02                             NTL::new_ifft(long*, long const*, long, NTL::FFTPrimeInfo const&, long)
  3.45      0.32     0.02                             NTL::new_ifft_short1_notab(unsigned long*, long, long, NTL::new_mod_t const&, long, unsigned long, long, unsigned long)
  3.45      0.34     0.02                             void std::allocator_traits<std::allocator<std::pair<long const, NTL::Vec<long> > > >::destroy<std::pair<long const, NTL::Vec<long> > >(std::allocator<std::pair<long const, NTL::Vec<long> > >&, std::pair<long const, NTL::Vec<long> >*)
  1.72      0.35     0.01    23500     0.43     0.43  std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<long const, NTL::Vec<long> >, false>*)
  1.72      0.36     0.01    10800     0.93     0.93  auto_timer::stop()
  1.72      0.37     0.01     6200     1.61     1.88  DoubleCRT::do_mul(DoubleCRT const&, bool)
  1.72      0.38     0.01     1500     6.67     7.79  DoubleCRT::toPoly(NTL::ZZX&, IndexSet const&, bool) const
  1.72      0.39     0.01      400    25.00    25.00  EncryptedArrayDerived<PA_zz_p>::getPAlgebra() const
  1.72      0.40     0.01                             _ntl_gsmod(_ntl_gbigint_body*, long)
  1.72      0.41     0.01                             _ntl_gmul(_ntl_gbigint_body*, _ntl_gbigint_body*, _ntl_gbigint_body**)
  1.72      0.42     0.01                             cloned_ptr<IndexMapInit<NTL::Vec<long> >, deep_clone<IndexMapInit<NTL::Vec<long> > > >::~cloned_ptr()
  1.72      0.43     0.01                             void NTL::default_BlockConstructFromVec<long>(long*, long, long const*)
  1.72      0.44     0.01                             NTL::Vec<long>::AllocateTo(long)
  1.72      0.45     0.01                             NTL::conv(NTL::Vec<NTL::zz_p>&, NTL::Vec<NTL::ZZ> const&)
  1.72      0.46     0.01                             NTL::negate(NTL::zz_pX&, NTL::zz_pX const&)
  1.72      0.47     0.01                             NTL::PlainDiv(NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pX const&)
  1.72      0.48     0.01                             NTL::PowerMod(long, long, long)
  1.72      0.49     0.01                             NTL::new_fft_short(unsigned long*, long, long, long, NTL::new_mod_t const&)
  1.72      0.50     0.01                             NTL::sha256_transform(NTL::SHA256_CTX&, unsigned char*)
  1.72      0.51     0.01                             NTL::basic_inv(NTL::zz_p&, NTL::Mat<NTL::zz_p>&, NTL::Mat<NTL::zz_p> const&, bool)
  1.72      0.52     0.01                             bool __gnu_cxx::operator!=<CtxtPart const*, std::vector<CtxtPart, std::allocator<CtxtPart> > >(__gnu_cxx::__normal_iterator<CtxtPart const*, std::vector<CtxtPart, std::allocator<CtxtPart> > > const&, __gnu_cxx::__normal_iterator<CtxtPart const*, std::vector<CtxtPart, std::allocator<CtxtPart> > > const&)
  1.72      0.53     0.01                             NTL::Vec<long>::length() const
  1.72      0.54     0.01                             std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_begin() const
  1.72      0.55     0.01                             std::_Bit_iterator std::__copy_move<false, false, std::random_access_iterator_tag>::__copy_m<std::_Bit_const_iterator, std::_Bit_iterator>(std::_Bit_const_iterator, std::_Bit_const_iterator, std::_Bit_iterator)
  1.72      0.56     0.01                             std::_Bit_const_iterator::operator++()
  1.72      0.57     0.01                             std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::~_Alloc_hider()
  1.72      0.58     0.01                             std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<long const, NTL::Vec<long> >, false> > >::_M_deallocate_node(std::__detail::_Hash_node<std::pair<long const, NTL::Vec<long> >, false>*)
  0.00      0.58     0.00  1083230     0.00     0.00  NTL::Vec<NTL::zz_p>::AllocateTo(long)
  0.00      0.58     0.00   578006     0.00     0.03  NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&)
  0.00      0.58     0.00   475624     0.00     0.00  NTL::Vec<NTL::zz_p>::DoSetLength(long)
  0.00      0.58     0.00   362400     0.00     0.00  IndexSet::next(long) const
  0.00      0.58     0.00   360800     0.00     0.00  void std::vector<Cmodulus, std::allocator<Cmodulus> >::emplace_back<Cmodulus>(Cmodulus&&)
  0.00      0.58     0.00   307900     0.00     0.00  std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned long, bool)
  0.00      0.58     0.00   270400     0.00     0.00  IndexSet::contains(long) const
  0.00      0.58     0.00   267400     0.00     0.04  std::__detail::_Map_base<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](long const&)
  0.00      0.58     0.00   250400     0.00     0.00  GetTimerClock()
  0.00      0.58     0.00    72400     0.00     0.00  DoubleCRTHelper::~DoubleCRTHelper()
  0.00      0.58     0.00    49500     0.00     0.00  NTL::Vec<NTL::zz_p>::FixLength(long)
  0.00      0.58     0.00    38210     0.00     0.00  NTL::Vec<long>::DoSetLength(long)
  0.00      0.58     0.00    33600     0.00     0.00  DoubleCRTHelper::clone() const
  0.00      0.58     0.00    31500     0.00     0.00  IndexSet::contains(IndexSet const&) const
  0.00      0.58     0.00    28600     0.00     0.00  NTL::Vec<NTL::zz_p>::~Vec()
  0.00      0.58     0.00    25900     0.00     0.00  NTL::Vec<long>::FixLength(long)
  0.00      0.58     0.00    25586     0.00     0.00  NTL::Vec<NTL::Vec<NTL::zz_p> >::swap(NTL::Vec<NTL::Vec<NTL::zz_p> >&)
  0.00      0.58     0.00    25200     0.00     0.00  Cmodulus::getScratch_fftRep(long)
  0.00      0.58     0.00    24500     0.00     0.00  IndexSet::insert(long)
  0.00      0.58     0.00    24000     0.00     0.77  Cmodulus::FFT(NTL::Vec<long>&, NTL::ZZX const&) const
  0.00      0.58     0.00    24000     0.00     0.77  Cmodulus::FFT_aux(NTL::Vec<long>&, NTL::zz_pX&) const
  0.00      0.58     0.00    19300     0.00     0.00  IndexSet::remove(long)
  0.00      0.58     0.00    18800     0.00     0.01  DoubleCRT::DoubleCRT(FHEcontext const&, IndexSet const&)
  0.00      0.58     0.00    17300     0.00     0.00  operator<=(IndexSet const&, IndexSet const&)
  0.00      0.58     0.00    14200     0.00     0.00  operator>=(IndexSet const&, IndexSet const&)
  0.00      0.58     0.00    13600     0.00     0.00  NTL::Vec<NTL::ZZ>::AllocateTo(long)
  0.00      0.58     0.00    10900     0.00     0.00  std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&)
  0.00      0.58     0.00    10800     0.00     0.00  std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()
  0.00      0.58     0.00    10400     0.00     0.00  NTL::Vec<NTL::ZZ>::DoSetLength(long)
  0.00      0.58     0.00     9800     0.00     0.00  NTL::Vec<NTL::Vec<NTL::zz_p> >::AllocateTo(long)
  0.00      0.58     0.00     9600     0.00     0.00  NTL::Mat<NTL::zz_p>::SetDims(long, long)
  0.00      0.58     0.00     9600     0.00     0.00  void NTL::Vec<NTL::Vec<NTL::zz_p> >::DoSetLengthAndApply<NTL::Mat<NTL::zz_p>::Fixer>(long, NTL::Mat<NTL::zz_p>::Fixer&)
  0.00      0.58     0.00     9300     0.00     0.17  DoubleCRT& DoubleCRT::Op<DoubleCRT::MulFun>(NTL::ZZ const&, DoubleCRT::MulFun)
  0.00      0.58     0.00     8304     0.00     0.00  NTL::Vec<unsigned long>::AllocateTo(long)
  0.00      0.58     0.00     8100     0.00     0.00  MakeIndexVector(IndexSet const&, NTL::Vec<long>&)
  0.00      0.58     0.00     7500     0.00     0.00  IndexSet::remove(IndexSet const&)
  0.00      0.58     0.00     6800     0.00     0.00  FHEcontext::productOfPrimes(NTL::ZZ&, IndexSet const&) const
  0.00      0.58     0.00     6600     0.00     0.28  DoubleCRT& DoubleCRT::Op<DoubleCRT::AddFun>(DoubleCRT const&, DoubleCRT::AddFun, bool)
  0.00      0.58     0.00     6600     0.00     2.92  DoubleCRT::FFT(NTL::ZZX const&, IndexSet const&)
  0.00      0.58     0.00     5400     0.00     0.00  NTL::Vec<NTL::ZZ>::SetMaxLength(long)
  0.00      0.58     0.00     5100     0.00     0.00  NTL::Vec<NTL::zz_p>::SetLength(long)
  0.00      0.58     0.00     5100     0.00     0.00  IndexSet::retain(IndexSet const&)
  0.00      0.58     0.00     5100     0.00     0.00  operator&(IndexSet const&, IndexSet const&)
  0.00      0.58     0.00     5100     0.00     0.00  operator/(IndexSet const&, IndexSet const&)
  0.00      0.58     0.00     4700     0.00     2.92  DoubleCRT::operator=(NTL::ZZX const&)
  0.00      0.58     0.00     4600     0.00     0.00  NTL::Vec<NTL::zz_pE>::AllocateTo(long)
  0.00      0.58     0.00     4500     0.00     0.30  DoubleCRT& DoubleCRT::Op<DoubleCRT::SubFun>(DoubleCRT const&, DoubleCRT::SubFun, bool)
  0.00      0.58     0.00     4400     0.00     0.00  IndexSet::operator==(IndexSet const&) const
  0.00      0.58     0.00     4200     0.00     0.00  IndexSet::prev(long) const
  0.00      0.58     0.00     4100     0.00     0.00  sampleGaussian(NTL::ZZX&, long, double)
  0.00      0.58     0.00     3900     0.00     0.00  std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >::~vector()
  0.00      0.58     0.00     3700     0.00     0.00  IndexSet::intervalConstructor(long, long)
  0.00      0.58     0.00     3300     0.00     0.00  NTL::Vec<char>::~Vec()
  0.00      0.58     0.00     3100     0.00     0.00  NTL::Vec<unsigned char>::~Vec()
  0.00      0.58     0.00     3100     0.00     1.11  DoubleCRT::randomize(NTL::ZZ const*)
  0.00      0.58     0.00     3100     0.00     0.37  DoubleCRT::DoubleCRT(FHEcontext const&)
  0.00      0.58     0.00     3000     0.00     0.00  card(IndexSet const&)
  0.00      0.58     0.00     3000     0.00     5.28  RLWE1(DoubleCRT&, DoubleCRT const&, DoubleCRT const&, long)
  0.00      0.58     0.00     3000     0.00     0.00  NTL::PartitionInfo::PartitionInfo(long, long)
  0.00      0.58     0.00     3000     0.00     0.00  NTL::Vec<NTL::Vec<NTL::zz_p> >::Init(long)
  0.00      0.58     0.00     3000     0.00     0.00  std::vector<DoubleCRT, std::allocator<DoubleCRT> >::_M_fill_insert(__gnu_cxx::__normal_iterator<DoubleCRT*, std::vector<DoubleCRT, std::allocator<DoubleCRT> > >, unsigned long, DoubleCRT const&)
  0.00      0.58     0.00     3000     0.00     0.00  std::vector<DoubleCRT, std::allocator<DoubleCRT> >::resize(unsigned long, DoubleCRT const&)
  0.00      0.58     0.00     2900     0.00     0.00  NTL::Vec<NTL::zz_pE>::DoSetLength(long)
  0.00      0.58     0.00     2700     0.00     0.12  DoubleCRT::automorph(long)
  0.00      0.58     0.00     2401     0.00     0.00  NTL::Vec<NTL::zz_pX>::AllocateTo(long)
  0.00      0.58     0.00     2400     0.00     0.00  NTL::Vec<NTL::zz_p>::FixAtCurrentLength()
  0.00      0.58     0.00     2400     0.00     0.00  NTL::Vec<NTL::zz_pE>::FixLength(long)
  0.00      0.58     0.00     2400     0.00     0.00  NTL::Vec<unsigned long>::operator=(NTL::Vec<unsigned long> const&)
  0.00      0.58     0.00     2400     0.00     0.00  std::vector<CtxtPart, std::allocator<CtxtPart> >::_M_fill_insert(__gnu_cxx::__normal_iterator<CtxtPart*, std::vector<CtxtPart, std::allocator<CtxtPart> > >, unsigned long, CtxtPart const&)
  0.00      0.58     0.00     2300     0.00     0.00  NTL::zz_pX* std::__uninitialized_copy<false>::__uninit_copy<NTL::zz_pX*, NTL::zz_pX*>(NTL::zz_pX*, NTL::zz_pX*, NTL::zz_pX*)
  0.00      0.58     0.00     2300     0.00     0.00  std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >::_M_default_append(unsigned long)
  0.00      0.58     0.00     2100     0.00     0.00  rem(NTL::zz_pX&, NTL::zz_pX const&, zz_pXModulus1 const&)
  0.00      0.58     0.00     2100     0.00     0.77  Cmodulus::iFFT(NTL::zz_pX&, NTL::Vec<long> const&) const
  0.00      0.58     0.00     1900     0.00     3.00  DoubleCRT::DoubleCRT(NTL::ZZX const&, FHEcontext const&, IndexSet const&)
  0.00      0.58     0.00     1700     0.00     0.00  NTL::Vec<NTL::ZZ>::operator=(NTL::Vec<NTL::ZZ> const&)
  0.00      0.58     0.00     1700     0.00     0.09  DoubleCRT::operator=(DoubleCRT const&)
  0.00      0.58     0.00     1700     0.00     2.67  PAlgebraModDerived<PA_zz_p>::embedInSlots(NTL::zz_pX&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&, MappingData<PA_zz_p> const&) const
  0.00      0.58     0.00     1700     0.00     1.09  PAlgebraModDerived<PA_zz_p>::CRT_reconstruct(NTL::zz_pX&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&) const
  0.00      0.58     0.00     1600     0.00     0.00  DoubleCRT& DoubleCRT::Op<DoubleCRT::MulFun>(NTL::ZZX const&, DoubleCRT::MulFun)
  0.00      0.58     0.00     1600     0.00     0.00  void std::vector<long, std::allocator<long> >::_M_emplace_back_aux<long const&>(long const&)
  0.00      0.58     0.00     1500     0.00     0.00  NTL::Vec<NTL::zz_pX>::Init(long)
  0.00      0.58     0.00     1500     0.00    15.64  FHESecKey::GenKeySWmatrix(long, long, long, long, long)
  0.00      0.58     0.00     1500     0.00     0.00  KeySwitch::dummy()
  0.00      0.58     0.00     1500     0.00     0.00  Ctxt::verifyPrimeSet() const
  0.00      0.58     0.00     1500     0.00     0.00  FHEPubKey::getKeySWmatrix(SKHandle const&, long) const
  0.00      0.58     0.00     1500     0.00     0.00  std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >::resize(unsigned long)
  0.00      0.58     0.00     1400     0.00     0.00  NTL::Vec<NTL::ZZ>::Init(long, NTL::ZZ const*)
  0.00      0.58     0.00     1400     0.00     0.00  NTL::Vec<NTL::zz_pX>::DoSetLength(long)
  0.00      0.58     0.00     1400     0.00     0.00  Ctxt::Ctxt(FHEPubKey const&, long)
  0.00      0.58     0.00     1400     0.00    11.21  DoubleCRT::scaleDownToSet(IndexSet const&, long)
  0.00      0.58     0.00     1400     0.00     3.30  DoubleCRT& DoubleCRT::Op<DoubleCRT::SubFun>(NTL::ZZX const&, DoubleCRT::SubFun)
  0.00      0.58     0.00     1300     0.00     0.00  PAlgebra::genToPow(long, long) const
  0.00      0.58     0.00     1200     0.00     0.00  convert(NTL::Vec<long>&, NTL::zz_pX const&)
  0.00      0.58     0.00     1200     0.00     0.00  NTL::Vec<NTL::ZZ>::FixLength(long)
  0.00      0.58     0.00     1200     0.00     0.57  NTL::Vec<NTL::zz_pE>::Init(long, NTL::zz_pE const*)
  0.00      0.58     0.00     1200     0.00     0.00  NTL::Lazy<NTL::Vec<NTL::zz_p>, NTL::DefaultDeleterPolicy>* NTL::MakeRaw<NTL::Lazy<NTL::Vec<NTL::zz_p>, NTL::DefaultDeleterPolicy>, NTL::Lazy<NTL::Vec<NTL::zz_p>, NTL::DefaultDeleterPolicy>&>(NTL::Lazy<NTL::Vec<NTL::zz_p>, NTL::DefaultDeleterPolicy>&)
  0.00      0.58     0.00     1200     0.00     0.00  Cmodulus::operator=(Cmodulus const&)
  0.00      0.58     0.00     1200     0.00     0.23  PAlgebraModDerived<PA_zz_p>::evalTree(NTL::zz_pX&, std::shared_ptr<TNode<NTL::zz_pX> >, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&, long, long) const
  0.00      0.58     0.00     1200     0.00     2.67  EncryptedArrayDerived<PA_zz_p>::encode(NTL::Vec<long>&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) const
  0.00      0.58     0.00     1200     0.00     0.00  Ctxt::modSwitchAddedNoiseVar() const
  0.00      0.58     0.00     1200     0.00     0.00  IndexSet::disjointFrom(IndexSet const&) const
  0.00      0.58     0.00     1100     0.00     0.00  mcMod(long, long)
  0.00      0.58     0.00     1100     0.00     0.00  PAlgebra::frobenuisPow(long) const
  0.00      0.58     0.00     1000     0.00     0.00  BluesteinInit(long, NTL::zz_p const&, NTL::zz_pX&, NTL::Vec<unsigned long>&, NTL::fftRep&)
  0.00      0.58     0.00     1000     0.00     0.00  CtxtPart* std::__uninitialized_copy<false>::__uninit_copy<CtxtPart*, CtxtPart*>(CtxtPart*, CtxtPart*, CtxtPart*)
  0.00      0.58     0.00     1000     0.00     0.00  void std::vector<CtxtPart, std::allocator<CtxtPart> >::_M_emplace_back_aux<CtxtPart>(CtxtPart&&)
  0.00      0.58     0.00      900     0.00     0.00  Ctxt::privateAssign(Ctxt const&)
  0.00      0.58     0.00      900     0.00     0.15  DoubleCRT::addPrimesAndScale(IndexSet const&)
  0.00      0.58     0.00      900     0.00     0.00  std::vector<CtxtPart, std::allocator<CtxtPart> >::operator=(std::vector<CtxtPart, std::allocator<CtxtPart> > const&)
  0.00      0.58     0.00      800     0.00     0.00  mobius(long)
  0.00      0.58     0.00      800     0.00     0.02  PAlgebraModDerived<PA_zz_p>::mapToFt(NTL::zz_pX&, NTL::zz_pX const&, unsigned long, NTL::zz_pX const*) const
  0.00      0.58     0.00      800     0.00     0.00  std::vector<unsigned long, std::allocator<unsigned long> >::_M_default_append(unsigned long)
  0.00      0.58     0.00      700     0.00     0.05  std::shared_ptr<TNode<NTL::zz_pX> > buildTNode<NTL::zz_pX>(std::shared_ptr<TNode<NTL::zz_pX> >, std::shared_ptr<TNode<NTL::zz_pX> >, NTL::zz_pX const&)
  0.00      0.58     0.00      700     0.00     0.00  NTL::zz_pXModulus::~zz_pXModulus()
  0.00      0.58     0.00      700     0.00     0.05  NTL::Vec<NTL::zz_p>::Vec(NTL::Vec<NTL::zz_p> const&)
  0.00      0.58     0.00      700     0.00     0.00  std::_Sp_counted_ptr<TNode<NTL::zz_pX>*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
  0.00      0.58     0.00      700     0.00     0.00  std::_Sp_counted_ptr<TNode<NTL::zz_pX>*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
  0.00      0.58     0.00      700     0.00     0.00  void std::vector<std::pair<long, long>, std::allocator<std::pair<long, long> > >::_M_emplace_back_aux<std::pair<long, long> >(std::pair<long, long>&&)
  0.00      0.58     0.00      600     0.00     0.00  MulMod(NTL::ZZX&, NTL::ZZX const&, long, long, bool)
  0.00      0.58     0.00      600     0.00     0.00  NTL::Vec<NTL::zz_pE>::~Vec()
  0.00      0.58     0.00      600     0.00     0.00  NTL::to_zz_p(long)
  0.00      0.58     0.00      600     0.00    27.09  Ctxt::modDownToSet(IndexSet const&)
  0.00      0.58     0.00      600     0.00    27.09  Ctxt::modDownToLevel(long)
  0.00      0.58     0.00      600     0.00     0.00  Ctxt::findBaseSet(IndexSet&) const
  0.00      0.58     0.00      600     0.00     0.00  Ctxt::findBaseLevel() const
  0.00      0.58     0.00      500     0.00     0.00  sampleSmall(NTL::ZZX&, long)
  0.00      0.58     0.00      500     0.00     0.00  BuildContext(long, long)
  0.00      0.58     0.00      500     0.00     0.00  void FindPrimRootT<NTL::zz_p, long>(NTL::zz_p&, unsigned long)
  0.00      0.58     0.00      500     0.00     0.00  FindPrimitiveRoot(NTL::zz_p&, unsigned long)
  0.00      0.58     0.00      500     0.00     0.00  void convert<NTL::zz_pX, long>(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, std::vector<long, std::allocator<long> > const&)
  0.00      0.58     0.00      500     0.00     0.00  void factorT<long>(std::vector<long, std::allocator<long> >&, long const&)
  0.00      0.58     0.00      500     0.00     0.05  FHEcontext::AddPrime(long, long, bool)
  0.00      0.58     0.00      500     0.00     0.05  zz_pXModulus1::zz_pXModulus1(long, NTL::zz_pX const&)
  0.00      0.58     0.00      500     0.00     0.00  NTL::Vec<NTL::Vec<NTL::zz_p> >::~Vec()
  0.00      0.58     0.00      500     0.00     0.05  Cmodulus::Cmodulus(PAlgebra const&, long, long)
  0.00      0.58     0.00      500     0.00     3.28  DoubleCRT& DoubleCRT::Op<DoubleCRT::AddFun>(NTL::ZZX const&, DoubleCRT::AddFun)
  0.00      0.58     0.00      500     0.00     0.10  DoubleCRT::Exp(long)
  0.00      0.58     0.00      500     0.00     2.67  EncryptedArrayDerived<PA_zz_p>::encode(NTL::ZZX&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) const
  0.00      0.58     0.00      500     0.00    19.41  EncryptedArrayDerived<PA_zz_p>::encrypt(Ctxt&, FHEPubKey const&, std::vector<long, std::allocator<long> > const&) const
  0.00      0.58     0.00      500     0.00    16.74  FHEPubKey::Encrypt(Ctxt&, NTL::ZZX const&, long, bool) const
  0.00      0.58     0.00      500     0.00     0.00  void std::vector<KeySwitch, std::allocator<KeySwitch> >::_M_emplace_back_aux<KeySwitch const&>(KeySwitch const&)
  0.00      0.58     0.00      400     0.00     0.10  NTL::Vec<NTL::zz_pE>::operator=(NTL::Vec<NTL::zz_pE> const&)
  0.00      0.58     0.00      400     0.00     1.97  Ctxt::addCtxt(Ctxt const&, bool)
  0.00      0.58     0.00      400     0.00     0.00  IndexSet::insert(IndexSet const&)
  0.00      0.58     0.00      400     0.00     0.00  std::_Deque_base<long, std::allocator<long> >::_M_initialize_map(unsigned long)
  0.00      0.58     0.00      400     0.00     0.00  std::_Deque_base<long, std::allocator<long> >::~_Deque_base()
  0.00      0.58     0.00      400     0.00     0.00  void std::vector<Cmodulus, std::allocator<Cmodulus> >::_M_emplace_back_aux<Cmodulus>(Cmodulus&&)
  0.00      0.58     0.00      400     0.00     0.00  std::vector<long, std::allocator<long> >::_M_fill_assign(unsigned long, long const&)
  0.00      0.58     0.00      300     0.00     0.00  bool poly_comp<NTL::zz_pX>(NTL::zz_pX const&, NTL::zz_pX const&)
  0.00      0.58     0.00      300     0.00    67.77  add1Dmats4dim(FHESecKey&, long, long)
  0.00      0.58     0.00      300     0.00     0.00  NTL::Vec<NTL::Vec<NTL::zz_pE> >::AllocateTo(long)
  0.00      0.58     0.00      300     0.00     0.00  NTL::Vec<NTL::Vec<NTL::zz_pE> >::~Vec()
  0.00      0.58     0.00      300     0.00     0.00  NTL::Vec<NTL::zz_pX>::~Vec()
  0.00      0.58     0.00      300     0.00     0.00  long NTL::operator==<NTL::zz_p>(NTL::Vec<NTL::zz_p> const&, NTL::Vec<NTL::zz_p> const&)
  0.00      0.58     0.00      300     0.00     0.45  Ctxt::modUpToSet(IndexSet const&)
  0.00      0.58     0.00      300     0.00    12.14  Ctxt::tensorProduct(Ctxt const&, Ctxt const&)
  0.00      0.58     0.00      300     0.00    67.24  Ctxt::operator*=(Ctxt const&)
  0.00      0.58     0.00      300     0.00     0.00  IndexSet::emptySet()
  0.00      0.58     0.00      300     0.00     0.00  void std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_assign<std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::operator=(std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&)::{lambda(std::__detail::_Hash_node<std::pair<long const, NTL::Vec<long> >, false> const*)#2}>(std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&, std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::operator=(std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&)::{lambda(std::__detail::_Hash_node<std::pair<long const, NTL::Vec<long> >, false> const*)#2} const&)
  0.00      0.58     0.00      300     0.00     0.00  std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::operator=(std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&)
  0.00      0.58     0.00      202     0.00     0.00  NTL::Vec<double>::AllocateTo(long)
  0.00      0.58     0.00      201     0.00     0.00  NTL::Vec<NTL::Vec<long> >::AllocateTo(long)
  0.00      0.58     0.00      201     0.00     0.32  PAlgebraModDerived<PA_zz_p>::mapToSlots(MappingData<PA_zz_p>&, NTL::zz_pX const&) const
  0.00      0.58     0.00      200     0.00     0.10  AddManyPrimes(FHEcontext&, double, bool, bool)
  0.00      0.58     0.00      200     0.00     0.32  buildEncryptedArray(FHEcontext const&, NTL::ZZX const&, PAlgebraMod const&)
  0.00      0.58     0.00      200     0.00     0.32  EncryptedArrayDerived<PA_zz_p>::EncryptedArrayDerived(FHEcontext const&, NTL::zz_pX const&, PAlgebraMod const&)
  0.00      0.58     0.00      200     0.00     0.00  EncryptedArrayDerived<PA_zz_p>::~EncryptedArrayDerived()
  0.00      0.58     0.00      200     0.00     0.00  NTL::MakeSmartAux<NTL::zz_pEInfoT>::~MakeSmartAux()
  0.00      0.58     0.00      200     0.00     0.57  NTL::Mat<NTL::zz_p>::Mat(NTL::Mat<NTL::zz_p> const&)
  0.00      0.58     0.00      200     0.00     0.00  NTL::Mat<NTL::zz_pE>::SetDims(long, long)
  0.00      0.58     0.00      200     0.00     0.00  NTL::Mat<long>::SetDims(long, long)
  0.00      0.58     0.00      200     0.00     0.57  NTL::Vec<NTL::Vec<NTL::zz_p> >::Init(long, NTL::Vec<NTL::zz_p> const*)
  0.00      0.58     0.00      200     0.00     0.00  void NTL::Vec<NTL::Vec<NTL::zz_pE> >::DoSetLengthAndApply<NTL::Mat<NTL::zz_pE>::Fixer>(long, NTL::Mat<NTL::zz_pE>::Fixer&)
  0.00      0.58     0.00      200     0.00     0.00  void NTL::Vec<NTL::Vec<long> >::DoSetLengthAndApply<NTL::Mat<long>::Fixer>(long, NTL::Mat<long>::Fixer&)
  0.00      0.58     0.00      200     0.00     0.00  NTL::Vec<NTL::Vec<long> >::~Vec()
  0.00      0.58     0.00      200     0.00     0.00  NTL::Vec<NTL::ZZ>::SetLength(long)
  0.00      0.58     0.00      200     0.00     0.00  NTL::Vec<int>::AllocateTo(long)
  0.00      0.58     0.00      200     0.00     0.00  NTL::Vec<int>::DoSetLength(long, int const&)
  0.00      0.58     0.00      200     0.00     0.00  void NTL::conv<NTL::Vec<long>, NTL::Vec<NTL::zz_p> >(NTL::Vec<NTL::Vec<long> >&, NTL::Vec<NTL::Vec<NTL::zz_p> > const&)
  0.00      0.58     0.00      200     0.00     0.00  void NTL::conv<long, NTL::zz_p>(NTL::Mat<long>&, NTL::Mat<NTL::zz_p> const&)
  0.00      0.58     0.00      200     0.00     0.00  FHEPubKey::setKeySwitchMap(long)
  0.00      0.58     0.00      200     0.00     0.00  PAlgebraModDerived<PA_zz_p>::restoreContext() const
  0.00      0.58     0.00      200     0.00     0.00  PAlgebraModDerived<PA_zz_p>::getR() const
  0.00      0.58     0.00      200     0.00     0.00  PAlgebraModDerived<PA_zz_p>::getTag() const
  0.00      0.58     0.00      200     0.00     0.00  PAlgebraModDerived<PA_zz_p>::getPPowR() const
  0.00      0.58     0.00      200     0.00     0.00  PAlgebraModDerived<PA_zz_p>::getZMStar() const
  0.00      0.58     0.00      200     0.00     0.00  PAlgebra::operator==(PAlgebra const&) const
  0.00      0.58     0.00      200     0.00     0.00  std::unique_lock<std::mutex>::lock()
  0.00      0.58     0.00      200     0.00     0.00  std::vector<NTL::Mat<NTL::zz_p>, std::allocator<NTL::Mat<NTL::zz_p> > >::_M_default_append(unsigned long)
  0.00      0.58     0.00      200     0.00     0.00  std::vector<long, std::allocator<long> >::_M_default_append(unsigned long)
  0.00      0.58     0.00      200     0.00     0.00  std::vector<long, std::allocator<long> >::operator=(std::vector<long, std::allocator<long> > const&)
  0.00      0.58     0.00      100     0.00     0.00  Cyclotomic(long)
  0.00      0.58     0.00      100     0.00     0.24  buildModChain(FHEcontext&, long, long, long)
  0.00      0.58     0.00      100     0.00     0.72  buildPAlgebraMod(PAlgebra const&, long)
  0.00      0.58     0.00      100     0.00   135.54  addSome1DMatrices(FHESecKey&, long, long)
  0.00      0.58     0.00      100     0.00    67.77  addSomeFrbMatrices(FHESecKey&, long, long)
  0.00      0.58     0.00      100     0.00     4.29  buildLinPolyMatrix(NTL::Mat<NTL::zz_pE>&, long)
  0.00      0.58     0.00      100     0.00   124.28  buildUnpackSlotEncoding(std::vector<NTL::Vec<long>, std::allocator<NTL::Vec<long> > >&, EncryptedArray const&)
  0.00      0.58     0.00      100     0.00     0.00  EDF(NTL::Vec<NTL::zz_pX>&, NTL::zz_pX const&, long)
  0.00      0.58     0.00      100     0.00     6.39  RLWE(DoubleCRT&, DoubleCRT&, DoubleCRT const&, long, NTL::ZZ*)
  0.00      0.58     0.00      100     0.00     0.00  PolyRed(NTL::ZZX&, NTL::ZZX const&, long, bool)
  0.00      0.58     0.00      100     0.00     0.00  void convert<long, NTL::zz_pX>(std::vector<long, std::allocator<long> >&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&)
  0.00      0.58     0.00      100     0.00     0.00  multOrd(long, long)
  0.00      0.58     0.00      100     0.00     0.00  ppInvert(NTL::Mat<NTL::zz_p>&, NTL::Mat<NTL::zz_p> const&, long, long)
  0.00      0.58     0.00      100     0.00     0.00  ppInvert(NTL::Mat<NTL::zz_pE>&, NTL::Mat<NTL::zz_pE> const&, long, long)
  0.00      0.58     0.00      100     0.00     0.00  sampleHWt(NTL::ZZX&, long, long)
  0.00      0.58     0.00      100     0.00     1.04  FHEcontext::FHEcontext(unsigned long, unsigned long, unsigned long, std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)
  0.00      0.58     0.00      100     0.00     0.00  FHEcontext::~FHEcontext()
  0.00      0.58     0.00      100     0.00     0.00  RecryptData::~RecryptData()
  0.00      0.58     0.00      100     0.00     0.46  PAlgebraModDerived<PA_zz_p>::genCrtTable()
  0.00      0.58     0.00      100     0.00     0.07  PAlgebraModDerived<PA_zz_p>::genMaskTable()
  0.00      0.58     0.00      100     0.00     0.72  PAlgebraModDerived<PA_zz_p>::PAlgebraModDerived(PAlgebra const&, long)
  0.00      0.58     0.00      100     0.00     0.00  PAlgebraModDerived<PA_zz_p>::~PAlgebraModDerived()
  0.00      0.58     0.00      100     0.00     0.00  NTL::Mat<NTL::ZZ>::SetDims(long, long)
  0.00      0.58     0.00      100     0.00     6.89  NTL::Mat<NTL::zz_pE>::Mat(NTL::Mat<NTL::zz_pE> const&)
  0.00      0.58     0.00      100     0.00     0.00  NTL::Vec<NTL::Vec<NTL::ZZ> >::AllocateTo(long)
  0.00      0.58     0.00      100     0.00     0.00  void NTL::Vec<NTL::Vec<NTL::ZZ> >::DoSetLengthAndApply<NTL::Mat<NTL::ZZ>::Fixer>(long, NTL::Mat<NTL::ZZ>::Fixer&)
  0.00      0.58     0.00      100     0.00     0.00  NTL::Vec<NTL::Vec<NTL::zz_pX> >::AllocateTo(long)
  0.00      0.58     0.00      100     0.00     0.19  NTL::Vec<NTL::zz_pX>::operator=(NTL::Vec<NTL::zz_pX> const&)
  0.00      0.58     0.00      100     0.00     0.00  NTL::Vec<bool>::AllocateTo(long)
  0.00      0.58     0.00      100     0.00     0.00  void NTL::conv<NTL::Vec<NTL::zz_p>, NTL::Vec<NTL::ZZ> >(NTL::Vec<NTL::Vec<NTL::zz_p> >&, NTL::Vec<NTL::Vec<NTL::ZZ> > const&)
  0.00      0.58     0.00      100     0.00     0.00  void NTL::conv<NTL::zz_p, NTL::ZZ>(NTL::Mat<NTL::zz_p>&, NTL::Mat<NTL::ZZ> const&)
  0.00      0.58     0.00      100     0.00     6.89  NTL::Mat<NTL::zz_pE>* NTL::MakeRaw<NTL::Mat<NTL::zz_pE>, NTL::Mat<NTL::zz_pE>&>(NTL::Mat<NTL::zz_pE>&)
  0.00      0.58     0.00      100     0.00     0.00  PAlgebra::PAlgebra(unsigned long, unsigned long, std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&)
  0.00      0.58     0.00      100     0.00    37.68  FHESecKey::ImportSecKey(DoubleCRT const&, long, long, long)
  0.00      0.58     0.00      100     0.00     0.00  FHEcontext::operator==(FHEcontext const&) const
  0.00      0.58     0.00      100     0.00     0.00  RecryptData::operator==(RecryptData const&) const
  0.00      0.58     0.00      100     0.00     0.00  PAlgebraModDerived<PA_zz_p>::CRT_decompose(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, NTL::zz_pX const&) const
  0.00      0.58     0.00      100     0.00     0.19  PAlgebraModDerived<PA_zz_p>::decodePlaintext(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, NTL::zz_pX const&, MappingData<PA_zz_p> const&) const
  0.00      0.58     0.00      100     0.00     0.00  PAlgebraModDerived<PA_zz_p>::getFactorsOverZZ() const
  0.00      0.58     0.00      100     0.00     0.33  PAlgebraModDerived<PA_zz_p>::buildTree(std::shared_ptr<TNode<NTL::zz_pX> >&, long, long) const
  0.00      0.58     0.00      100     0.00    38.42  EncryptedArrayDerived<PA_zz_p>::buildLinPolyCoeffs(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) const
  0.00      0.58     0.00      100     0.00    26.57  EncryptedArrayDerived<PA_zz_p>::initNormalBasisMatrix() const
  0.00      0.58     0.00      100     0.00     1.12  EncryptedArrayDerived<PA_zz_p>::decode(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, NTL::ZZX const&) const
  0.00      0.58     0.00      100     0.00     0.00  EncryptedArrayDerived<PA_zz_p>::getTag() const
  0.00      0.58     0.00      100     0.00    18.16  EncryptedArrayDerived<PA_zz_p>::decrypt(Ctxt const&, FHESecKey const&, std::vector<long, std::allocator<long> >&) const
  0.00      0.58     0.00      100     0.00     0.00  DoubleCRT::toPoly(NTL::ZZX&, bool) const
  0.00      0.58     0.00      100     0.00    17.04  FHESecKey::Decrypt(NTL::ZZX&, Ctxt const&) const
  0.00      0.58     0.00      100     0.00    17.04  FHESecKey::Decrypt(NTL::ZZX&, Ctxt const&, NTL::ZZX&) const
  0.00      0.58     0.00      100     0.00     0.00  std::vector<NTL::zz_pEX, std::allocator<NTL::zz_pEX> >::_M_check_len(unsigned long, char const*) const
  0.00      0.58     0.00      100     0.00     0.00  std::unique_lock<std::mutex>::unlock()
  0.00      0.58     0.00      100     0.00     0.00  std::vector<CtxtPart, std::allocator<CtxtPart> >::_M_fill_assign(unsigned long, CtxtPart const&)
  0.00      0.58     0.00      100     0.00     0.00  std::vector<IndexSet, std::allocator<IndexSet> >::_M_default_append(unsigned long)
  0.00      0.58     0.00      100     0.00     0.00  void std::vector<DoubleCRT, std::allocator<DoubleCRT> >::_M_emplace_back_aux<DoubleCRT const&>(DoubleCRT const&)
  0.00      0.58     0.00      100     0.00     0.00  std::vector<NTL::Vec<long>, std::allocator<NTL::Vec<long> > >::_M_default_append(unsigned long)
  0.00      0.58     0.00      100     0.00     0.00  std::vector<NTL::ZZX, std::allocator<NTL::ZZX> >::_M_default_append(unsigned long)
  0.00      0.58     0.00      100     0.00     0.19  std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >::operator=(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&)
  0.00      0.58     0.00      100     0.00     0.00  std::vector<NTL::zz_pEX, std::allocator<NTL::zz_pEX> >::_M_default_append(unsigned long)
  0.00      0.58     0.00      100     0.00     0.00  std::vector<std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >, std::allocator<std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > > >::_M_default_append(unsigned long)
  0.00      0.58     0.00      100     0.00     0.00  std::vector<std::vector<long, std::allocator<long> >, std::allocator<std::vector<long, std::allocator<long> > > >::_M_default_append(unsigned long)
  0.00      0.58     0.00       27     0.00     0.00  registerTimer(FHEtimer*)
  0.00      0.58     0.00        6     0.00     0.00  void std::vector<FHEtimer*, std::allocator<FHEtimer*> >::_M_emplace_back_aux<FHEtimer* const&>(FHEtimer* const&)
  0.00      0.58     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z12BuildContextll
  0.00      0.58     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z13BluesteinInitlRKN3NTL4zz_pERNS_5zz_pXERNS_3VecImEERNS_6fftRepE
  0.00      0.58     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z13GetTimerClockv
  0.00      0.58     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z13extractDigitsRSt6vectorI4CtxtSaIS0_EERKS0_l
  0.00      0.58     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z15KSGiantStepSizel
  0.00      0.58     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z19buildEncryptedArrayRK10FHEcontextRKN3NTL3ZZXERK11PAlgebraMod
  0.00      0.58     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z23buildUnpackSlotEncodingRSt6vectorIN3NTL3VecIlEESaIS2_EERK14EncryptedArray
  0.00      0.58     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z4RLWER9DoubleCRTS0_RKS_lPN3NTL2ZZE
  0.00      0.58     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z5FindMlllllllb
  0.00      0.58     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN10FHEglobals13automorphValsE
  0.00      0.58     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN10FHEglobals6dryRunE
  0.00      0.58     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN11RecryptDataD2Ev
  0.00      0.58     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN17DynamicCtxtPowers8getPowerEl
  0.00      0.58     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN26PowerfulTranslationIndexesC2ERKN3NTL3VecIlEE
  0.00      0.58     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN3NTLltENS_3GF2ES0_
  0.00      0.58     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN7EvalMapC2ERK14EncryptedArraybRKN3NTL3VecIlEEbbb
  0.00      0.58     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN8IndexSet8emptySetEv
  0.00      0.58     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN9DoubleCRT3FFTERKN3NTL3ZZXERK8IndexSet
  0.00      0.58     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZNK13CubeSignature15breakIndexByDimEll
  0.00      0.58     0.00        1     0.00     0.00  _GLOBAL__sub_I_fhe_test_force_bsgs

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.72% of 0.58 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     10.3    0.06    0.00                 NTL::FromModularRep(NTL::zz_p*, NTL::fftRep const&, long, long, NTL::zz_pInfoT*) [1]
-----------------------------------------------
                                                 <spontaneous>
[2]     10.2    0.05    0.01                 NTL::PlainRem(NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pX const&) [2]
                0.00    0.01  275129/578006      NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
                0.00    0.00   20400/475624      NTL::Vec<NTL::zz_p>::DoSetLength(long) [159]
-----------------------------------------------
                                                 <spontaneous>
[3]      5.2    0.03    0.00                 NTL::new_ifft_short1_flipped(unsigned long*, long, NTL::new_mod_t const&) [3]
-----------------------------------------------
                                                 <spontaneous>
[4]      4.5    0.00    0.03                 SHEEP::ContextHElib<bool, Ctxt>::configure() [4]
                0.00    0.01     100/100         addSome1DMatrices(FHESecKey&, long, long) [28]
                0.00    0.01     100/100         buildUnpackSlotEncoding(std::vector<NTL::Vec<long>, std::allocator<NTL::Vec<long> > >&, EncryptedArray const&) [29]
                0.00    0.00     100/100         FHEcontext::FHEcontext(unsigned long, unsigned long, unsigned long, std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&) [108]
                0.00    0.00     100/100         buildModChain(FHEcontext&, long, long, long) [131]
                0.00    0.00     100/200         FHEPubKey::setKeySwitchMap(long) [287]
-----------------------------------------------
                0.00    0.00     200/1500        FHESecKey::ImportSecKey(DoubleCRT const&, long, long, long) [65]
                0.00    0.02    1300/1500        add1Dmats4dim(FHESecKey&, long, long) [7]
[5]      4.0    0.00    0.02    1500         FHESecKey::GenKeySWmatrix(long, long, long, long, long) [5]
                0.00    0.02    3000/3000        RLWE1(DoubleCRT&, DoubleCRT const&, DoubleCRT const&, long) [25]
                0.00    0.00    3000/3100        DoubleCRT::randomize(NTL::ZZ const*) [67]
                0.00    0.00    1500/10800       auto_timer::stop() [35]
                0.00    0.00    3000/3100        DoubleCRT::DoubleCRT(FHEcontext const&) [84]
                0.00    0.00    3000/6600        DoubleCRT& DoubleCRT::Op<DoubleCRT::AddFun>(DoubleCRT const&, DoubleCRT::AddFun, bool) [73]
                0.00    0.00    4500/9300        DoubleCRT& DoubleCRT::Op<DoubleCRT::MulFun>(NTL::ZZ const&, DoubleCRT::MulFun) [81]
                0.00    0.00    1300/2700        DoubleCRT::automorph(long) [96]
                0.00    0.00     200/500         DoubleCRT::Exp(long) [122]
                0.00    0.00    6000/72400       DoubleCRTHelper::~DoubleCRTHelper() [165]
                0.00    0.00    4500/6800        FHEcontext::productOfPrimes(NTL::ZZ&, IndexSet const&) const [188]
                0.00    0.00    3000/3000        std::vector<DoubleCRT, std::allocator<DoubleCRT> >::resize(unsigned long, DoubleCRT const&) [206]
                0.00    0.00    1500/250400      GetTimerClock() [164]
                0.00    0.00    1500/1500        KeySwitch::dummy() [220]
                0.00    0.00    1500/1500        FHEPubKey::getKeySWmatrix(SKHandle const&, long) const [222]
                0.00    0.00     500/500         void std::vector<KeySwitch, std::allocator<KeySwitch> >::_M_emplace_back_aux<KeySwitch const&>(KeySwitch const&) [259]
                0.00    0.00       1/27          registerTimer(FHEtimer*) [333]
-----------------------------------------------
                                                 <spontaneous>
[6]      3.6    0.02    0.00                 NTL::PlainMul(NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pX const&) [6]
                0.00    0.00   24300/578006      NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
                0.00    0.00   65300/475624      NTL::Vec<NTL::zz_p>::DoSetLength(long) [159]
-----------------------------------------------
                0.00    0.01     100/300         addSomeFrbMatrices(FHESecKey&, long, long) [58]
                0.00    0.01     200/300         addSome1DMatrices(FHESecKey&, long, long) [28]
[7]      3.5    0.00    0.02     300         add1Dmats4dim(FHESecKey&, long, long) [7]
                0.00    0.02    1300/1500        FHESecKey::GenKeySWmatrix(long, long, long, long, long) [5]
                0.00    0.00    1300/1300        PAlgebra::genToPow(long, long) const [227]
                0.00    0.00    1100/1100        PAlgebra::frobenuisPow(long) const [235]
                0.00    0.00     200/200         NTL::Vec<int>::DoSetLength(long, int const&) [284]
-----------------------------------------------
                0.00    0.02     300/300         SHEEP::ContextHElib_Fp<bool>::Multiply(Ctxt, Ctxt) [9]
[8]      3.5    0.00    0.02     300         Ctxt::operator*=(Ctxt const&) [8]
                0.00    0.02     600/600         Ctxt::modDownToLevel(long) [24]
                0.00    0.00     300/300         Ctxt::tensorProduct(Ctxt const&, Ctxt const&) [66]
                0.00    0.00     300/10800       auto_timer::stop() [35]
                0.00    0.00     600/600         Ctxt::findBaseLevel() const [251]
                0.00    0.00     300/250400      GetTimerClock() [164]
                0.00    0.00     300/1400        Ctxt::Ctxt(FHEPubKey const&, long) [226]
                0.00    0.00     300/4400        IndexSet::operator==(IndexSet const&) const [195]
                0.00    0.00     300/900         Ctxt::privateAssign(Ctxt const&) [239]
                0.00    0.00       1/27          registerTimer(FHEtimer*) [333]
-----------------------------------------------
                                                 <spontaneous>
[9]      3.5    0.00    0.02                 SHEEP::ContextHElib_Fp<bool>::Multiply(Ctxt, Ctxt) [9]
                0.00    0.02     300/300         Ctxt::operator*=(Ctxt const&) [8]
-----------------------------------------------
                0.00    0.00     100/418113      NTL::FindRoots(NTL::Vec<NTL::zz_p>&, NTL::zz_pX const&) [148]
                0.00    0.00     200/418113      NTL::EDF(NTL::Vec<NTL::zz_pX>&, NTL::zz_pX const&, NTL::zz_pX const&, long, long) [146]
                0.00    0.00     400/418113      std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >::operator=(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) [140]
                0.00    0.00     400/418113      NTL::Vec<NTL::zz_pX>::operator=(NTL::Vec<NTL::zz_pX> const&) [138]
                0.00    0.00     400/418113      NTL::Vec<NTL::zz_pX>::append(NTL::zz_pX const&) [129]
                0.00    0.00     500/418113      zz_pXModulus1::zz_pXModulus1(long, NTL::zz_pX const&) [133]
                0.00    0.00     700/418113      NTL::Vec<NTL::zz_p>::Vec(NTL::Vec<NTL::zz_p> const&) [127]
                0.00    0.00     800/418113      NTL::Vec<NTL::zz_pE>::operator=(NTL::Vec<NTL::zz_pE> const&) [125]
                0.00    0.00    2400/418113      NTL::Vec<NTL::Vec<NTL::zz_p> >::Init(long, NTL::Vec<NTL::zz_p> const*) [106]
                0.00    0.00    4800/418113      buildUnpackSlotEncoding(std::vector<NTL::Vec<long>, std::allocator<NTL::Vec<long> > >&, EncryptedArray const&) [29]
                0.00    0.00   14400/418113      NTL::Vec<NTL::zz_pE>::Init(long, NTL::zz_pE const*) [87]
                0.02    0.00  393013/418113      NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
[10]     3.4    0.02    0.00  418113         NTL::Vec<NTL::zz_p>::Init(long, NTL::zz_p const*) [10]
-----------------------------------------------
                0.00    0.00    2100/26100       Cmodulus::iFFT(NTL::zz_pX&, NTL::Vec<long> const&) const [80]
                0.02    0.00   24000/26100       Cmodulus::FFT_aux(NTL::Vec<long>&, NTL::zz_pX&) const [22]
[11]     3.4    0.02    0.00   26100         BluesteinFFT(NTL::zz_pX&, long, NTL::zz_p const&, NTL::zz_pX const&, NTL::Vec<unsigned long> const&, NTL::fftRep const&) [11]
                0.00    0.00   52200/250400      GetTimerClock() [164]
                0.00    0.00   25200/25200       Cmodulus::getScratch_fftRep(long) [173]
                0.00    0.00       1/27          registerTimer(FHEtimer*) [333]
-----------------------------------------------
                                                 <spontaneous>
[12]     3.4    0.02    0.00                 NTL::RandomStream_impl::get_bytes(unsigned char*, long, long) [12]
-----------------------------------------------
                                                 <spontaneous>
[13]     3.4    0.02    0.00                 NTL::XGCD(long&, long&, long&, long, long) [13]
-----------------------------------------------
                                                 <spontaneous>
[14]     3.4    0.02    0.00                 NTL::new_fft(long*, long const*, long, NTL::FFTPrimeInfo const&, long, long) [14]
-----------------------------------------------
                                                 <spontaneous>
[15]     3.4    0.02    0.00                 NTL::PlainSqr(NTL::zz_pX&, NTL::zz_pX const&) [15]
                0.00    0.00  244276/475624      NTL::Vec<NTL::zz_p>::DoSetLength(long) [159]
-----------------------------------------------
                                                 <spontaneous>
[16]     3.4    0.02    0.00                 NTL::new_ifft(long*, long const*, long, NTL::FFTPrimeInfo const&, long) [16]
-----------------------------------------------
                                                 <spontaneous>
[17]     3.4    0.02    0.00                 NTL::new_ifft_short1_notab(unsigned long*, long, long, NTL::new_mod_t const&, long, unsigned long, long, unsigned long) [17]
-----------------------------------------------
                                                 <spontaneous>
[18]     3.4    0.02    0.00                 void std::allocator_traits<std::allocator<std::pair<long const, NTL::Vec<long> > > >::destroy<std::pair<long const, NTL::Vec<long> > >(std::allocator<std::pair<long const, NTL::Vec<long> > >&, std::pair<long const, NTL::Vec<long> >*) [18]
-----------------------------------------------
                0.00    0.01    1900/6600        DoubleCRT::DoubleCRT(NTL::ZZX const&, FHEcontext const&, IndexSet const&) [60]
                0.00    0.01    4700/6600        DoubleCRT::operator=(NTL::ZZX const&) [27]
[19]     3.3    0.00    0.02    6600         DoubleCRT::FFT(NTL::ZZX const&, IndexSet const&) [19]
                0.00    0.02   24000/24000       Cmodulus::FFT(NTL::Vec<long>&, NTL::ZZX const&) const [21]
                0.00    0.00   24000/267400      std::__detail::_Map_base<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](long const&) [33]
                0.00    0.00   24000/360800      void std::vector<Cmodulus, std::allocator<Cmodulus> >::emplace_back<Cmodulus>(Cmodulus&&) [161]
                0.00    0.00   24000/270400      IndexSet::contains(long) const [163]
                0.00    0.00   13200/250400      GetTimerClock() [164]
                0.00    0.00    6600/8100        MakeIndexVector(IndexSet const&, NTL::Vec<long>&) [186]
                0.00    0.00       1/27          registerTimer(FHEtimer*) [333]
-----------------------------------------------
                0.00    0.00     100/578006      NTL::MinPolyMod(NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pXModulus const&, long) [149]
                0.00    0.00     200/578006      PAlgebraModDerived<PA_zz_p>::genMaskTable() [147]
                0.00    0.00     200/578006      PAlgebraModDerived<PA_zz_p>::mapToSlots(MappingData<PA_zz_p>&, NTL::zz_pX const&) const [115]
                0.00    0.00     300/578006      NTL::PlainDiv(NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pX const&) [32]
                0.00    0.00     300/578006      NTL::BuildFromRoots(NTL::zz_pX&, NTL::Vec<NTL::zz_p> const&) [144]
                0.00    0.00     300/578006      NTL::TraceMap(NTL::zz_pX&, NTL::zz_pX const&, long, NTL::zz_pXModulus const&, NTL::zz_pX const&) [145]
                0.00    0.00     400/578006      PAlgebraModDerived<PA_zz_p>::genCrtTable() [123]
                0.00    0.00     400/578006      NTL::SetCoeff(NTL::zz_pEX&, long, NTL::zz_pE const&) [143]
                0.00    0.00     400/578006      NTL::ProjectPowers(NTL::Vec<NTL::zz_p>&, NTL::Vec<NTL::zz_p> const&, long, NTL::zz_pXNewArgument const&, NTL::zz_pXModulus const&) [142]
                0.00    0.00     400/578006      NTL::Vec<NTL::zz_pX>::append(NTL::zz_pX const&) [129]
                0.00    0.00     486/578006      NTL::PowerXPlusAMod(NTL::zz_pX&, NTL::zz_p, NTL::ZZ const&, NTL::zz_pXModulus const&) [141]
                0.00    0.00     600/578006      PAlgebraModDerived<PA_zz_p>::mapToFt(NTL::zz_pX&, NTL::zz_pX const&, unsigned long, NTL::zz_pX const*) const [135]
                0.00    0.00     600/578006      NTL::Comp2Mod(NTL::zz_pX&, NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pX const&, NTL::zz_pX const&, NTL::zz_pXModulus const&) [136]
                0.00    0.00    1200/578006      EncryptedArrayDerived<PA_zz_p>::buildLinPolyCoeffs(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) const [63]
                0.00    0.00    1300/578006      EncryptedArrayDerived<PA_zz_p>::initNormalBasisMatrix() const [70]
                0.00    0.00    1400/578006      NTL::PowerXMod(NTL::zz_pX&, NTL::ZZ const&, NTL::zz_pXModulus const&) [124]
                0.00    0.00    1572/578006      NTL::GCD(NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pX const&) [121]
                0.00    0.00    1600/578006      NTL::InvMod(NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pX const&) [120]
                0.00    0.00    1800/578006      NTL::PlainUpdateMap(NTL::Vec<NTL::zz_p>&, NTL::Vec<NTL::zz_p> const&, NTL::zz_pX const&, NTL::zz_pX const&) [118]
                0.00    0.00    1800/578006      NTL::UpdateMap(NTL::Vec<NTL::zz_p>&, NTL::Vec<NTL::zz_p> const&, NTL::zz_pXMultiplier const&, NTL::zz_pXModulus const&) [119]
                0.00    0.00    2100/578006      NTL::rem(NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pXModulus const&) [114]
                0.00    0.00    2172/578006      NTL::PlainGCD(NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pX const&) [113]
                0.00    0.00    2400/578006      NTL::CompMod(NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pXNewArgument const&, NTL::zz_pXModulus const&) [110]
                0.00    0.00    2700/578006      NTL::build(NTL::zz_pXModulus&, NTL::zz_pX const&) [109]
                0.00    0.00    4300/578006      NTL::BerlekampMassey(NTL::zz_pX&, NTL::Vec<NTL::zz_p> const&, long) [102]
                0.00    0.00    8300/578006      NTL::XGCD(NTL::zz_pX&, NTL::zz_pX&, NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pX const&) [99]
                0.00    0.00    8400/578006      PAlgebraModDerived<PA_zz_p>::evalTree(NTL::zz_pX&, std::shared_ptr<TNode<NTL::zz_pX> >, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&, long, long) const [98]
                0.00    0.00   13200/578006      buildLinPolyMatrix(NTL::Mat<NTL::zz_pE>&, long) [95]
                0.00    0.00   13300/578006      NTL::PowerMod(NTL::zz_pX&, NTL::zz_pX const&, NTL::ZZ const&, NTL::zz_pXModulus const&) [94]
                0.00    0.00   14500/578006      NTL::conv(NTL::zz_pX&, NTL::Vec<NTL::zz_p> const&) [93]
                0.00    0.00   15600/578006      NTL::inv(NTL::zz_pE&, NTL::Mat<NTL::zz_pE>&, NTL::Mat<NTL::zz_pE> const&) [92]
                0.00    0.00   18600/578006      NTL::build(NTL::zz_pXMultiplier&, NTL::zz_pX const&, NTL::zz_pXModulus const&) [91]
                0.00    0.00   24300/578006      NTL::PlainMul(NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pX const&) [6]
                0.00    0.00   72400/578006      NTL::IterHalfGCD(NTL::zz_pXMatrix&, NTL::zz_pX&, NTL::zz_pX&, long) [72]
                0.00    0.00   85247/578006      NTL::rem21(NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pXModulus const&) [69]
                0.00    0.01  275129/578006      NTL::PlainRem(NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pX const&) [2]
[20]     3.2    0.00    0.02  578006         NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
                0.02    0.00  393013/418113      NTL::Vec<NTL::zz_p>::Init(long, NTL::zz_p const*) [10]
                0.00    0.00  577706/1083230     NTL::Vec<NTL::zz_p>::AllocateTo(long) [158]
-----------------------------------------------
                0.00    0.02   24000/24000       DoubleCRT::FFT(NTL::ZZX const&, IndexSet const&) [19]
[21]     3.2    0.00    0.02   24000         Cmodulus::FFT(NTL::Vec<long>&, NTL::ZZX const&) const [21]
                0.00    0.02   24000/24000       Cmodulus::FFT_aux(NTL::Vec<long>&, NTL::zz_pX&) const [22]
                0.00    0.00       1/201         PAlgebraModDerived<PA_zz_p>::mapToSlots(MappingData<PA_zz_p>&, NTL::zz_pX const&) const [115]
                0.00    0.00   96000/250400      GetTimerClock() [164]
                0.00    0.00       2/27          registerTimer(FHEtimer*) [333]
-----------------------------------------------
                0.00    0.02   24000/24000       Cmodulus::FFT(NTL::Vec<long>&, NTL::ZZX const&) const [21]
[22]     3.2    0.00    0.02   24000         Cmodulus::FFT_aux(NTL::Vec<long>&, NTL::zz_pX&) const [22]
                0.02    0.00   24000/26100       BluesteinFFT(NTL::zz_pX&, long, NTL::zz_p const&, NTL::zz_pX const&, NTL::Vec<unsigned long> const&, NTL::fftRep const&) [11]
-----------------------------------------------
                0.00    0.02     600/600         Ctxt::modDownToLevel(long) [24]
[23]     2.8    0.00    0.02     600         Ctxt::modDownToSet(IndexSet const&) [23]
                0.00    0.02    1400/1400        DoubleCRT::scaleDownToSet(IndexSet const&, long) [26]
                0.00    0.00     600/10800       auto_timer::stop() [35]
                0.00    0.00     800/362400      IndexSet::next(long) const [160]
                0.00    0.00     600/5100        operator&(IndexSet const&, IndexSet const&) [192]
                0.00    0.00     600/4400        IndexSet::operator==(IndexSet const&) const [195]
                0.00    0.00     600/250400      GetTimerClock() [164]
                0.00    0.00     600/1200        Ctxt::modSwitchAddedNoiseVar() const [232]
                0.00    0.00     600/5100        operator/(IndexSet const&, IndexSet const&) [193]
                0.00    0.00     600/1500        Ctxt::verifyPrimeSet() const [221]
                0.00    0.00     600/7500        IndexSet::remove(IndexSet const&) [187]
                0.00    0.00       1/27          registerTimer(FHEtimer*) [333]
-----------------------------------------------
                0.00    0.02     600/600         Ctxt::operator*=(Ctxt const&) [8]
[24]     2.8    0.00    0.02     600         Ctxt::modDownToLevel(long) [24]
                0.00    0.02     600/600         Ctxt::modDownToSet(IndexSet const&) [23]
                0.00    0.00    1200/3000        card(IndexSet const&) [202]
                0.00    0.00    1200/270400      IndexSet::contains(long) const [163]
                0.00    0.00     600/5100        operator&(IndexSet const&, IndexSet const&) [192]
                0.00    0.00     600/362400      IndexSet::next(long) const [160]
                0.00    0.00     600/360800      void std::vector<Cmodulus, std::allocator<Cmodulus> >::emplace_back<Cmodulus>(Cmodulus&&) [161]
                0.00    0.00     600/1200        IndexSet::disjointFrom(IndexSet const&) const [233]
                0.00    0.00     600/3700        IndexSet::intervalConstructor(long, long) [199]
-----------------------------------------------
                0.00    0.02    3000/3000        FHESecKey::GenKeySWmatrix(long, long, long, long, long) [5]
[25]     2.7    0.00    0.02    3000         RLWE1(DoubleCRT&, DoubleCRT const&, DoubleCRT const&, long) [25]
                0.00    0.01    3000/4700        DoubleCRT::operator=(NTL::ZZX const&) [27]
                0.00    0.00    3000/6200        DoubleCRT::do_mul(DoubleCRT const&, bool) [31]
                0.00    0.00    3000/4500        DoubleCRT& DoubleCRT::Op<DoubleCRT::SubFun>(DoubleCRT const&, DoubleCRT::SubFun, bool) [82]
                0.00    0.00    3000/9300        DoubleCRT& DoubleCRT::Op<DoubleCRT::MulFun>(NTL::ZZ const&, DoubleCRT::MulFun) [81]
                0.00    0.00    3000/4100        sampleGaussian(NTL::ZZX&, long, double) [197]
                0.00    0.00    3000/72400       DoubleCRTHelper::~DoubleCRTHelper() [165]
-----------------------------------------------
                0.00    0.02    1400/1400        Ctxt::modDownToSet(IndexSet const&) [23]
[26]     2.7    0.00    0.02    1400         DoubleCRT::scaleDownToSet(IndexSet const&, long) [26]
                0.01    0.00    1400/1500        DoubleCRT::toPoly(NTL::ZZX&, IndexSet const&, bool) const [30]
                0.00    0.00    1400/1400        DoubleCRT& DoubleCRT::Op<DoubleCRT::SubFun>(NTL::ZZX const&, DoubleCRT::SubFun) [61]
                0.00    0.00    1400/2700        DoubleCRT::automorph(long) [96]
                0.00    0.00    2000/362400      IndexSet::next(long) const [160]
                0.00    0.00    2000/307900      std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned long, bool) [162]
                0.00    0.00    1400/5100        operator/(IndexSet const&, IndexSet const&) [193]
                0.00    0.00    1400/4400        IndexSet::operator==(IndexSet const&) const [195]
                0.00    0.00    1400/7500        IndexSet::remove(IndexSet const&) [187]
                0.00    0.00    1400/6800        FHEcontext::productOfPrimes(NTL::ZZ&, IndexSet const&) const [188]
-----------------------------------------------
                0.00    0.00     100/4700        DoubleCRT::sampleHWt(long) [97]
                0.00    0.00     100/4700        RLWE(DoubleCRT&, DoubleCRT&, DoubleCRT const&, long, NTL::ZZ*) [90]
                0.00    0.00    1500/4700        FHEPubKey::Encrypt(Ctxt&, NTL::ZZX const&, long, bool) const [57]
                0.00    0.01    3000/4700        RLWE1(DoubleCRT&, DoubleCRT const&, DoubleCRT const&, long) [25]
[27]     2.4    0.00    0.01    4700         DoubleCRT::operator=(NTL::ZZX const&) [27]
                0.00    0.01    4700/6600        DoubleCRT::FFT(NTL::ZZX const&, IndexSet const&) [19]
-----------------------------------------------
                0.00    0.01     100/100         SHEEP::ContextHElib<bool, Ctxt>::configure() [4]
[28]     2.3    0.00    0.01     100         addSome1DMatrices(FHESecKey&, long, long) [28]
                0.00    0.01     200/300         add1Dmats4dim(FHESecKey&, long, long) [7]
-----------------------------------------------
                0.00    0.01     100/100         SHEEP::ContextHElib<bool, Ctxt>::configure() [4]
[29]     2.1    0.00    0.01     100         buildUnpackSlotEncoding(std::vector<NTL::Vec<long>, std::allocator<NTL::Vec<long> > >&, EncryptedArray const&) [29]
                0.00    0.00     100/100         EncryptedArrayDerived<PA_zz_p>::buildLinPolyCoeffs(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) const [63]
                0.00    0.00    1200/1200        EncryptedArrayDerived<PA_zz_p>::encode(NTL::Vec<long>&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) const [68]
                0.00    0.00     100/100         EncryptedArrayDerived<PA_zz_p>::initNormalBasisMatrix() const [70]
                0.00    0.00     100/400         EncryptedArrayDerived<PA_zz_p>::getPAlgebra() const [36]
                0.00    0.00    4800/418113      NTL::Vec<NTL::zz_p>::Init(long, NTL::zz_p const*) [10]
                0.00    0.00    4800/1083230     NTL::Vec<NTL::zz_p>::AllocateTo(long) [158]
                0.00    0.00     200/250400      GetTimerClock() [164]
                0.00    0.00     100/100         EncryptedArrayDerived<PA_zz_p>::getTag() const [321]
                0.00    0.00     100/100         std::vector<NTL::Vec<long>, std::allocator<NTL::Vec<long> > >::_M_default_append(unsigned long) [328]
                0.00    0.00       1/27          registerTimer(FHEtimer*) [333]
-----------------------------------------------
                0.00    0.00     100/1500        FHESecKey::Decrypt(NTL::ZZX&, Ctxt const&, NTL::ZZX&) const [78]
                0.01    0.00    1400/1500        DoubleCRT::scaleDownToSet(IndexSet const&, long) [26]
[30]     2.0    0.01    0.00    1500         DoubleCRT::toPoly(NTL::ZZX&, IndexSet const&, bool) const [30]
                0.00    0.00    2100/2100        Cmodulus::iFFT(NTL::zz_pX&, NTL::Vec<long> const&) const [80]
                0.00    0.00    2100/267400      std::__detail::_Map_base<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](long const&) [33]
                0.00    0.00    9000/250400      GetTimerClock() [164]
                0.00    0.00    3000/3000        NTL::PartitionInfo::PartitionInfo(long, long) [203]
                0.00    0.00    2100/360800      void std::vector<Cmodulus, std::allocator<Cmodulus> >::emplace_back<Cmodulus>(Cmodulus&&) [161]
                0.00    0.00    2100/270400      IndexSet::contains(long) const [163]
                0.00    0.00    1500/5100        operator&(IndexSet const&, IndexSet const&) [192]
                0.00    0.00    1500/8100        MakeIndexVector(IndexSet const&, NTL::Vec<long>&) [186]
                0.00    0.00    1500/13600       NTL::Vec<NTL::ZZ>::AllocateTo(long) [178]
                0.00    0.00     100/38210       NTL::Vec<long>::DoSetLength(long) [167]
                0.00    0.00       3/27          registerTimer(FHEtimer*) [333]
                0.00    0.00       2/8304        NTL::Vec<unsigned long>::AllocateTo(long) [185]
                0.00    0.00       2/202         NTL::Vec<double>::AllocateTo(long) [273]
                0.00    0.00       1/475624      NTL::Vec<NTL::zz_p>::DoSetLength(long) [159]
                0.00    0.00       1/201         NTL::Vec<NTL::Vec<long> >::AllocateTo(long) [274]
                0.00    0.00       1/2401        NTL::Vec<NTL::zz_pX>::AllocateTo(long) [208]
-----------------------------------------------
                0.00    0.00     100/6200        RLWE(DoubleCRT&, DoubleCRT&, DoubleCRT const&, long, NTL::ZZ*) [90]
                0.00    0.00     400/6200        FHESecKey::Decrypt(NTL::ZZX&, Ctxt const&, NTL::ZZX&) const [78]
                0.00    0.00    1000/6200        FHEPubKey::Encrypt(Ctxt&, NTL::ZZX const&, long, bool) const [57]
                0.00    0.00    1700/6200        Ctxt::tensorProduct(Ctxt const&, Ctxt const&) [66]
                0.00    0.00    3000/6200        RLWE1(DoubleCRT&, DoubleCRT const&, DoubleCRT const&, long) [25]
[31]     2.0    0.01    0.00    6200         DoubleCRT::do_mul(DoubleCRT const&, bool) [31]
                0.00    0.00   42400/267400      std::__detail::_Map_base<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](long const&) [33]
                0.00    0.00    6200/18800       DoubleCRT::DoubleCRT(FHEcontext const&, IndexSet const&) [100]
                0.00    0.00   42400/360800      void std::vector<Cmodulus, std::allocator<Cmodulus> >::emplace_back<Cmodulus>(Cmodulus&&) [161]
                0.00    0.00   42400/270400      IndexSet::contains(long) const [163]
                0.00    0.00   21200/362400      IndexSet::next(long) const [160]
                0.00    0.00   12400/250400      GetTimerClock() [164]
                0.00    0.00    9300/31500       IndexSet::contains(IndexSet const&) const [169]
                0.00    0.00    6200/17300       operator<=(IndexSet const&, IndexSet const&) [176]
                0.00    0.00    6200/72400       DoubleCRTHelper::~DoubleCRTHelper() [165]
                0.00    0.00    3100/14200       operator>=(IndexSet const&, IndexSet const&) [177]
                0.00    0.00       1/27          registerTimer(FHEtimer*) [333]
-----------------------------------------------
                                                 <spontaneous>
[32]     1.7    0.01    0.00                 NTL::PlainDiv(NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pX const&) [32]
                0.00    0.00     300/578006      NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
                0.00    0.00    3000/475624      NTL::Vec<NTL::zz_p>::DoSetLength(long) [159]
-----------------------------------------------
                0.00    0.00    1300/267400      DoubleCRT::Exp(long) [122]
                0.00    0.00    2100/267400      DoubleCRT::toPoly(NTL::ZZX&, IndexSet const&, bool) const [30]
                0.00    0.00    3600/267400      DoubleCRT::addPrimesAndScale(IndexSet const&) [103]
                0.00    0.00    3700/267400      DoubleCRT::DoubleCRT(NTL::ZZX const&, FHEcontext const&, IndexSet const&) [60]
                0.00    0.00    4000/267400      DoubleCRT::operator=(DoubleCRT const&) [101]
                0.00    0.00    6800/267400      DoubleCRT::DoubleCRT(FHEcontext const&, IndexSet const&) [100]
                0.00    0.00    8700/267400      DoubleCRT::automorph(long) [96]
                0.00    0.00   15300/267400      DoubleCRT::randomize(NTL::ZZ const*) [67]
                0.00    0.00   24000/267400      DoubleCRT::FFT(NTL::ZZX const&, IndexSet const&) [19]
                0.00    0.00   31000/267400      DoubleCRT::DoubleCRT(FHEcontext const&) [84]
                0.00    0.00   35000/267400      DoubleCRT& DoubleCRT::Op<DoubleCRT::SubFun>(DoubleCRT const&, DoubleCRT::SubFun, bool) [82]
                0.00    0.00   41900/267400      DoubleCRT& DoubleCRT::Op<DoubleCRT::MulFun>(NTL::ZZ const&, DoubleCRT::MulFun) [81]
                0.00    0.00   42400/267400      DoubleCRT::do_mul(DoubleCRT const&, bool) [31]
                0.00    0.00   47600/267400      DoubleCRT& DoubleCRT::Op<DoubleCRT::AddFun>(DoubleCRT const&, DoubleCRT::AddFun, bool) [73]
[33]     1.7    0.00    0.01  267400         std::__detail::_Map_base<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](long const&) [33]
                0.01    0.00   23500/23500       std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<long const, NTL::Vec<long> >, false>*) [34]
                0.00    0.00  267400/307900      std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned long, bool) [162]
-----------------------------------------------
                0.01    0.00   23500/23500       std::__detail::_Map_base<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](long const&) [33]
[34]     1.7    0.01    0.00   23500         std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<long const, NTL::Vec<long> >, false>*) [34]
                0.00    0.00   10900/10900       std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&) [179]
-----------------------------------------------
                0.00    0.00     100/10800       EncryptedArrayDerived<PA_zz_p>::decode(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, NTL::ZZX const&) const [107]
                0.00    0.00     200/10800       EncryptedArrayDerived<PA_zz_p>::buildLinPolyCoeffs(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) const [63]
                0.00    0.00     300/10800       Ctxt::operator*=(Ctxt const&) [8]
                0.00    0.00     400/10800       Ctxt::addCtxt(Ctxt const&, bool) [85]
                0.00    0.00     600/10800       Ctxt::modDownToSet(IndexSet const&) [23]
                0.00    0.00    1500/10800       FHESecKey::GenKeySWmatrix(long, long, long, long, long) [5]
                0.00    0.00    1700/10800       PAlgebraModDerived<PA_zz_p>::CRT_reconstruct(NTL::zz_pX&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&) const [74]
                0.00    0.00    2900/10800       PAlgebraModDerived<PA_zz_p>::embedInSlots(NTL::zz_pX&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&, MappingData<PA_zz_p> const&) const [62]
                0.00    0.00    3100/10800       DoubleCRT::randomize(NTL::ZZ const*) [67]
[35]     1.7    0.01    0.00   10800         auto_timer::stop() [35]
                0.00    0.00   10800/250400      GetTimerClock() [164]
-----------------------------------------------
                0.00    0.00     100/400         EncryptedArrayBase::size() const [71]
                0.00    0.00     100/400         EncryptedArrayDerived<PA_zz_p>::buildLinPolyCoeffs(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) const [63]
                0.00    0.00     100/400         EncryptedArrayDerived<PA_zz_p>::initNormalBasisMatrix() const [70]
                0.00    0.00     100/400         buildUnpackSlotEncoding(std::vector<NTL::Vec<long>, std::allocator<NTL::Vec<long> > >&, EncryptedArray const&) [29]
[36]     1.7    0.01    0.00     400         EncryptedArrayDerived<PA_zz_p>::getPAlgebra() const [36]
-----------------------------------------------
                                                 <spontaneous>
[37]     1.7    0.01    0.00                 _ntl_gsmod(_ntl_gbigint_body*, long) [37]
-----------------------------------------------
                                                 <spontaneous>
[38]     1.7    0.01    0.00                 _ntl_gmul(_ntl_gbigint_body*, _ntl_gbigint_body*, _ntl_gbigint_body**) [38]
-----------------------------------------------
                                                 <spontaneous>
[39]     1.7    0.01    0.00                 cloned_ptr<IndexMapInit<NTL::Vec<long> >, deep_clone<IndexMapInit<NTL::Vec<long> > > >::~cloned_ptr() [39]
                0.00    0.00   37100/72400       DoubleCRTHelper::~DoubleCRTHelper() [165]
-----------------------------------------------
                                                 <spontaneous>
[40]     1.7    0.01    0.00                 void NTL::default_BlockConstructFromVec<long>(long*, long, long const*) [40]
-----------------------------------------------
                                                 <spontaneous>
[41]     1.7    0.01    0.00                 NTL::Vec<long>::AllocateTo(long) [41]
-----------------------------------------------
                                                 <spontaneous>
[42]     1.7    0.01    0.00                 NTL::conv(NTL::Vec<NTL::zz_p>&, NTL::Vec<NTL::ZZ> const&) [42]
                0.00    0.00    2101/475624      NTL::Vec<NTL::zz_p>::DoSetLength(long) [159]
-----------------------------------------------
                                                 <spontaneous>
[43]     1.7    0.01    0.00                 NTL::negate(NTL::zz_pX&, NTL::zz_pX const&) [43]
                0.00    0.00     400/475624      NTL::Vec<NTL::zz_p>::DoSetLength(long) [159]
-----------------------------------------------
                                                 <spontaneous>
[44]     1.7    0.01    0.00                 NTL::PowerMod(long, long, long) [44]
-----------------------------------------------
                                                 <spontaneous>
[45]     1.7    0.01    0.00                 NTL::new_fft_short(unsigned long*, long, long, long, NTL::new_mod_t const&) [45]
-----------------------------------------------
                                                 <spontaneous>
[46]     1.7    0.01    0.00                 NTL::sha256_transform(NTL::SHA256_CTX&, unsigned char*) [46]
-----------------------------------------------
                                                 <spontaneous>
[47]     1.7    0.01    0.00                 NTL::basic_inv(NTL::zz_p&, NTL::Mat<NTL::zz_p>&, NTL::Mat<NTL::zz_p> const&, bool) [47]
                0.00    0.00     100/200         void NTL::conv<NTL::Vec<long>, NTL::Vec<NTL::zz_p> >(NTL::Vec<NTL::Vec<long> >&, NTL::Vec<NTL::Vec<NTL::zz_p> > const&) [285]
                0.00    0.00     100/200         void NTL::conv<long, NTL::zz_p>(NTL::Mat<long>&, NTL::Mat<NTL::zz_p> const&) [286]
                0.00    0.00     100/38210       NTL::Vec<long>::DoSetLength(long) [167]
                0.00    0.00     100/9600        NTL::Mat<NTL::zz_p>::SetDims(long, long) [183]
                0.00    0.00     100/200         NTL::Vec<NTL::Vec<long> >::~Vec() [281]
-----------------------------------------------
                                                 <spontaneous>
[48]     1.7    0.01    0.00                 bool __gnu_cxx::operator!=<CtxtPart const*, std::vector<CtxtPart, std::allocator<CtxtPart> > >(__gnu_cxx::__normal_iterator<CtxtPart const*, std::vector<CtxtPart, std::allocator<CtxtPart> > > const&, __gnu_cxx::__normal_iterator<CtxtPart const*, std::vector<CtxtPart, std::allocator<CtxtPart> > > const&) [48]
-----------------------------------------------
                                                 <spontaneous>
[49]     1.7    0.01    0.00                 NTL::Vec<long>::length() const [49]
-----------------------------------------------
                                                 <spontaneous>
[50]     1.7    0.01    0.00                 std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_begin() const [50]
-----------------------------------------------
                                                 <spontaneous>
[51]     1.7    0.01    0.00                 std::_Bit_iterator std::__copy_move<false, false, std::random_access_iterator_tag>::__copy_m<std::_Bit_const_iterator, std::_Bit_iterator>(std::_Bit_const_iterator, std::_Bit_const_iterator, std::_Bit_iterator) [51]
-----------------------------------------------
                                                 <spontaneous>
[52]     1.7    0.01    0.00                 std::_Bit_const_iterator::operator++() [52]
-----------------------------------------------
                                                 <spontaneous>
[53]     1.7    0.01    0.00                 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::~_Alloc_hider() [53]
-----------------------------------------------
                                                 <spontaneous>
[54]     1.7    0.01    0.00                 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<long const, NTL::Vec<long> >, false> > >::_M_deallocate_node(std::__detail::_Hash_node<std::pair<long const, NTL::Vec<long> >, false>*) [54]
-----------------------------------------------
                0.00    0.01     500/500         EncryptedArray::encrypt(Ctxt&, FHEPubKey const&, std::vector<long, std::allocator<long> > const&) const [56]
[55]     1.7    0.00    0.01     500         EncryptedArrayDerived<PA_zz_p>::encrypt(Ctxt&, FHEPubKey const&, std::vector<long, std::allocator<long> > const&) const [55]
                0.00    0.01     500/500         FHEPubKey::Encrypt(Ctxt&, NTL::ZZX const&, long, bool) const [57]
                0.00    0.00     500/500         EncryptedArrayDerived<PA_zz_p>::encode(NTL::ZZX&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) const [83]
                0.00    0.00     500/500         void convert<NTL::zz_pX, long>(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, std::vector<long, std::allocator<long> > const&) [256]
                0.00    0.00     500/3900        std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >::~vector() [198]
-----------------------------------------------
                                                 <spontaneous>
[56]     1.7    0.00    0.01                 EncryptedArray::encrypt(Ctxt&, FHEPubKey const&, std::vector<long, std::allocator<long> > const&) const [56]
                0.00    0.01     500/500         EncryptedArrayDerived<PA_zz_p>::encrypt(Ctxt&, FHEPubKey const&, std::vector<long, std::allocator<long> > const&) const [55]
-----------------------------------------------
                0.00    0.01     500/500         EncryptedArrayDerived<PA_zz_p>::encrypt(Ctxt&, FHEPubKey const&, std::vector<long, std::allocator<long> > const&) const [55]
[57]     1.4    0.00    0.01     500         FHEPubKey::Encrypt(Ctxt&, NTL::ZZX const&, long, bool) const [57]
                0.00    0.00    1500/4700        DoubleCRT::operator=(NTL::ZZX const&) [27]
                0.00    0.00    1000/6200        DoubleCRT::do_mul(DoubleCRT const&, bool) [31]
                0.00    0.00     500/500         DoubleCRT& DoubleCRT::Op<DoubleCRT::AddFun>(NTL::ZZX const&, DoubleCRT::AddFun) [79]
                0.00    0.00    1000/6600        DoubleCRT& DoubleCRT::Op<DoubleCRT::AddFun>(DoubleCRT const&, DoubleCRT::AddFun, bool) [73]
                0.00    0.00    1000/9300        DoubleCRT& DoubleCRT::Op<DoubleCRT::MulFun>(NTL::ZZ const&, DoubleCRT::MulFun) [81]
                0.00    0.00    1000/18800       DoubleCRT::DoubleCRT(FHEcontext const&, IndexSet const&) [100]
                0.00    0.00    1000/250400      GetTimerClock() [164]
                0.00    0.00    1000/4100        sampleGaussian(NTL::ZZX&, long, double) [197]
                0.00    0.00     500/900         Ctxt::privateAssign(Ctxt const&) [239]
                0.00    0.00     500/500         sampleSmall(NTL::ZZX&, long) [252]
                0.00    0.00     500/6800        FHEcontext::productOfPrimes(NTL::ZZ&, IndexSet const&) const [188]
                0.00    0.00     500/600         MulMod(NTL::ZZX&, NTL::ZZX const&, long, long, bool) [247]
                0.00    0.00     500/72400       DoubleCRTHelper::~DoubleCRTHelper() [165]
                0.00    0.00       1/27          registerTimer(FHEtimer*) [333]
-----------------------------------------------
                0.00    0.01     100/100         addFrbMatrices(FHESecKey&, long) [59]
[58]     1.2    0.00    0.01     100         addSomeFrbMatrices(FHESecKey&, long, long) [58]
                0.00    0.01     100/300         add1Dmats4dim(FHESecKey&, long, long) [7]
-----------------------------------------------
                                                 <spontaneous>
[59]     1.2    0.00    0.01                 addFrbMatrices(FHESecKey&, long) [59]
                0.00    0.01     100/100         addSomeFrbMatrices(FHESecKey&, long, long) [58]
                0.00    0.00     100/200         FHEPubKey::setKeySwitchMap(long) [287]
-----------------------------------------------
                0.00    0.00     500/1900        DoubleCRT& DoubleCRT::Op<DoubleCRT::AddFun>(NTL::ZZX const&, DoubleCRT::AddFun) [79]
                0.00    0.00    1400/1900        DoubleCRT& DoubleCRT::Op<DoubleCRT::SubFun>(NTL::ZZX const&, DoubleCRT::SubFun) [61]
[60]     1.0    0.00    0.01    1900         DoubleCRT::DoubleCRT(NTL::ZZX const&, FHEcontext const&, IndexSet const&) [60]
                0.00    0.01    1900/6600        DoubleCRT::FFT(NTL::ZZX const&, IndexSet const&) [19]
                0.00    0.00    3700/267400      std::__detail::_Map_base<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](long const&) [33]
                0.00    0.00    3800/250400      GetTimerClock() [164]
                0.00    0.00    3700/362400      IndexSet::next(long) const [160]
                0.00    0.00    3700/270400      IndexSet::contains(long) const [163]
                0.00    0.00    3700/24500       IndexSet::insert(long) [174]
                0.00    0.00    3700/25900       NTL::Vec<long>::FixLength(long) [171]
                0.00    0.00       1/27          registerTimer(FHEtimer*) [333]
-----------------------------------------------
                0.00    0.00    1400/1400        DoubleCRT::scaleDownToSet(IndexSet const&, long) [26]
[61]     0.8    0.00    0.00    1400         DoubleCRT& DoubleCRT::Op<DoubleCRT::SubFun>(NTL::ZZX const&, DoubleCRT::SubFun) [61]
                0.00    0.00    1400/1900        DoubleCRT::DoubleCRT(NTL::ZZX const&, FHEcontext const&, IndexSet const&) [60]
                0.00    0.00    1400/4500        DoubleCRT& DoubleCRT::Op<DoubleCRT::SubFun>(DoubleCRT const&, DoubleCRT::SubFun, bool) [82]
                0.00    0.00    1400/72400       DoubleCRTHelper::~DoubleCRTHelper() [165]
-----------------------------------------------
                0.00    0.00     500/1700        EncryptedArrayDerived<PA_zz_p>::encode(NTL::ZZX&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) const [83]
                0.00    0.00    1200/1700        EncryptedArrayDerived<PA_zz_p>::encode(NTL::Vec<long>&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) const [68]
[62]     0.8    0.00    0.00    1700         PAlgebraModDerived<PA_zz_p>::embedInSlots(NTL::zz_pX&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&, MappingData<PA_zz_p> const&) const [62]
                0.00    0.00    2900/10800       auto_timer::stop() [35]
                0.00    0.00    1700/1700        PAlgebraModDerived<PA_zz_p>::CRT_reconstruct(NTL::zz_pX&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&) const [74]
                0.00    0.00    2900/250400      GetTimerClock() [164]
                0.00    0.00    2400/28600       NTL::Vec<NTL::zz_p>::~Vec() [170]
                0.00    0.00    1800/475624      NTL::Vec<NTL::zz_p>::DoSetLength(long) [159]
                0.00    0.00    1700/3900        std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >::~vector() [198]
                0.00    0.00       2/27          registerTimer(FHEtimer*) [333]
-----------------------------------------------
                0.00    0.00     100/100         buildUnpackSlotEncoding(std::vector<NTL::Vec<long>, std::allocator<NTL::Vec<long> > >&, EncryptedArray const&) [29]
[63]     0.7    0.00    0.00     100         EncryptedArrayDerived<PA_zz_p>::buildLinPolyCoeffs(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) const [63]
                0.00    0.00     100/400         EncryptedArrayDerived<PA_zz_p>::getPAlgebra() const [36]
                0.00    0.00     100/100         NTL::Mat<NTL::zz_pE>* NTL::MakeRaw<NTL::Mat<NTL::zz_pE>, NTL::Mat<NTL::zz_pE>&>(NTL::Mat<NTL::zz_pE>&) [89]
                0.00    0.00     100/100         buildLinPolyMatrix(NTL::Mat<NTL::zz_pE>&, long) [95]
                0.00    0.00     200/10800       auto_timer::stop() [35]
                0.00    0.00    1200/578006      NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
                0.00    0.00     200/250400      GetTimerClock() [164]
                0.00    0.00     200/600         NTL::Vec<NTL::zz_pE>::~Vec() [248]
                0.00    0.00     200/300         NTL::Vec<NTL::Vec<NTL::zz_pE> >::~Vec() [267]
                0.00    0.00     100/4600        NTL::Vec<NTL::zz_pE>::AllocateTo(long) [194]
                0.00    0.00     100/3000        NTL::Vec<NTL::Vec<NTL::zz_p> >::Init(long) [204]
                0.00    0.00     100/200         std::unique_lock<std::mutex>::lock() [294]
                0.00    0.00     100/100         ppInvert(NTL::Mat<NTL::zz_pE>&, NTL::Mat<NTL::zz_pE> const&, long, long) [304]
                0.00    0.00     100/100         std::unique_lock<std::mutex>::unlock() [324]
                0.00    0.00     100/2300        std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >::_M_default_append(unsigned long) [214]
                0.00    0.00       2/27          registerTimer(FHEtimer*) [333]
-----------------------------------------------
                                                 <spontaneous>
[64]     0.7    0.00    0.00                 FHESecKey::GenSecKey(long, long, long) [64]
                0.00    0.00     100/100         FHESecKey::ImportSecKey(DoubleCRT const&, long, long, long) [65]
                0.00    0.00     100/3100        DoubleCRT::DoubleCRT(FHEcontext const&) [84]
-----------------------------------------------
                0.00    0.00     100/100         FHESecKey::GenSecKey(long, long, long) [64]
[65]     0.6    0.00    0.00     100         FHESecKey::ImportSecKey(DoubleCRT const&, long, long, long) [65]
                0.00    0.00     200/1500        FHESecKey::GenKeySWmatrix(long, long, long, long, long) [5]
                0.00    0.00     100/100         RLWE(DoubleCRT&, DoubleCRT&, DoubleCRT const&, long, NTL::ZZ*) [90]
                0.00    0.00     100/18800       DoubleCRT::DoubleCRT(FHEcontext const&, IndexSet const&) [100]
                0.00    0.00     100/100         std::vector<CtxtPart, std::allocator<CtxtPart> >::_M_fill_assign(unsigned long, CtxtPart const&) [325]
                0.00    0.00     100/1600        void std::vector<long, std::allocator<long> >::_M_emplace_back_aux<long const&>(long const&) [218]
                0.00    0.00     100/100         void std::vector<DoubleCRT, std::allocator<DoubleCRT> >::_M_emplace_back_aux<DoubleCRT const&>(DoubleCRT const&) [327]
                0.00    0.00     100/200         PAlgebraModDerived<PA_zz_p>::getPPowR() const [291]
-----------------------------------------------
                0.00    0.00     300/300         Ctxt::operator*=(Ctxt const&) [8]
[66]     0.6    0.00    0.00     300         Ctxt::tensorProduct(Ctxt const&, Ctxt const&) [66]
                0.00    0.00    1700/6200        DoubleCRT::do_mul(DoubleCRT const&, bool) [31]
                0.00    0.00     600/6600        DoubleCRT& DoubleCRT::Op<DoubleCRT::AddFun>(DoubleCRT const&, DoubleCRT::AddFun, bool) [73]
                0.00    0.00    1700/1700        DoubleCRT::operator=(DoubleCRT const&) [101]
                0.00    0.00     700/9300        DoubleCRT& DoubleCRT::Op<DoubleCRT::MulFun>(NTL::ZZ const&, DoubleCRT::MulFun) [81]
                0.00    0.00     300/18800       DoubleCRT::DoubleCRT(FHEcontext const&, IndexSet const&) [100]
                0.00    0.00    1000/1000        void std::vector<CtxtPart, std::allocator<CtxtPart> >::_M_emplace_back_aux<CtxtPart>(CtxtPart&&) [238]
                0.00    0.00     700/72400       DoubleCRTHelper::~DoubleCRTHelper() [165]
                0.00    0.00     300/300         IndexSet::emptySet() [270]
                0.00    0.00     300/6800        FHEcontext::productOfPrimes(NTL::ZZ&, IndexSet const&) const [188]
-----------------------------------------------
                0.00    0.00     100/3100        RLWE(DoubleCRT&, DoubleCRT&, DoubleCRT const&, long, NTL::ZZ*) [90]
                0.00    0.00    3000/3100        FHESecKey::GenKeySWmatrix(long, long, long, long, long) [5]
[67]     0.6    0.00    0.00    3100         DoubleCRT::randomize(NTL::ZZ const*) [67]
                0.00    0.00    3100/10800       auto_timer::stop() [35]
                0.00    0.00   15300/267400      std::__detail::_Map_base<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](long const&) [33]
                0.00    0.00   33700/250400      GetTimerClock() [164]
                0.00    0.00   15300/360800      void std::vector<Cmodulus, std::allocator<Cmodulus> >::emplace_back<Cmodulus>(Cmodulus&&) [161]
                0.00    0.00   15300/270400      IndexSet::contains(long) const [163]
                0.00    0.00   15300/362400      IndexSet::next(long) const [160]
                0.00    0.00    3100/3100        NTL::Vec<unsigned char>::~Vec() [201]
                0.00    0.00       2/27          registerTimer(FHEtimer*) [333]
-----------------------------------------------
                0.00    0.00    1200/1200        buildUnpackSlotEncoding(std::vector<NTL::Vec<long>, std::allocator<NTL::Vec<long> > >&, EncryptedArray const&) [29]
[68]     0.6    0.00    0.00    1200         EncryptedArrayDerived<PA_zz_p>::encode(NTL::Vec<long>&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) const [68]
                0.00    0.00    1200/1700        PAlgebraModDerived<PA_zz_p>::embedInSlots(NTL::zz_pX&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&, MappingData<PA_zz_p> const&) const [62]
                0.00    0.00    1200/28600       NTL::Vec<NTL::zz_p>::~Vec() [170]
                0.00    0.00    1200/1200        convert(NTL::Vec<long>&, NTL::zz_pX const&) [228]
-----------------------------------------------
                                                 <spontaneous>
[69]     0.5    0.00    0.00                 NTL::rem21(NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pXModulus const&) [69]
                0.00    0.00   85247/578006      NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
-----------------------------------------------
                0.00    0.00     100/100         buildUnpackSlotEncoding(std::vector<NTL::Vec<long>, std::allocator<NTL::Vec<long> > >&, EncryptedArray const&) [29]
[70]     0.5    0.00    0.00     100         EncryptedArrayDerived<PA_zz_p>::initNormalBasisMatrix() const [70]
                0.00    0.00     100/400         EncryptedArrayDerived<PA_zz_p>::getPAlgebra() const [36]
                0.00    0.00     200/200         NTL::Mat<NTL::zz_p>::Mat(NTL::Mat<NTL::zz_p> const&) [105]
                0.00    0.00    1300/578006      NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
                0.00    0.00    1200/10400       NTL::Vec<NTL::ZZ>::DoSetLength(long) [181]
                0.00    0.00     600/28600       NTL::Vec<NTL::zz_p>::~Vec() [170]
                0.00    0.00     300/500         NTL::Vec<NTL::Vec<NTL::zz_p> >::~Vec() [258]
                0.00    0.00     100/200         std::unique_lock<std::mutex>::lock() [294]
                0.00    0.00     100/9600        NTL::Mat<NTL::zz_p>::SetDims(long, long) [183]
                0.00    0.00     100/100         NTL::Mat<NTL::ZZ>::SetDims(long, long) [309]
                0.00    0.00     100/100         void NTL::conv<NTL::Vec<NTL::zz_p>, NTL::Vec<NTL::ZZ> >(NTL::Vec<NTL::Vec<NTL::zz_p> >&, NTL::Vec<NTL::Vec<NTL::ZZ> > const&) [314]
                0.00    0.00     100/100         void NTL::conv<NTL::zz_p, NTL::ZZ>(NTL::Mat<NTL::zz_p>&, NTL::Mat<NTL::ZZ> const&) [315]
                0.00    0.00     100/100         ppInvert(NTL::Mat<NTL::zz_p>&, NTL::Mat<NTL::zz_p> const&, long, long) [303]
-----------------------------------------------
                                                 <spontaneous>
[71]     0.4    0.00    0.00                 EncryptedArrayBase::size() const [71]
                0.00    0.00     100/400         EncryptedArrayDerived<PA_zz_p>::getPAlgebra() const [36]
-----------------------------------------------
                                                 <spontaneous>
[72]     0.4    0.00    0.00                 NTL::IterHalfGCD(NTL::zz_pXMatrix&, NTL::zz_pX&, NTL::zz_pX&, long) [72]
                0.00    0.00   72400/578006      NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
                0.00    0.00   18100/25586       NTL::Vec<NTL::Vec<NTL::zz_p> >::swap(NTL::Vec<NTL::Vec<NTL::zz_p> >&) [172]
-----------------------------------------------
                0.00    0.00     500/6600        DoubleCRT& DoubleCRT::Op<DoubleCRT::AddFun>(NTL::ZZX const&, DoubleCRT::AddFun) [79]
                0.00    0.00     500/6600        FHESecKey::Decrypt(NTL::ZZX&, Ctxt const&, NTL::ZZX&) const [78]
                0.00    0.00     600/6600        Ctxt::tensorProduct(Ctxt const&, Ctxt const&) [66]
                0.00    0.00    1000/6600        FHEPubKey::Encrypt(Ctxt&, NTL::ZZX const&, long, bool) const [57]
                0.00    0.00    1000/6600        Ctxt::addCtxt(Ctxt const&, bool) [85]
                0.00    0.00    3000/6600        FHESecKey::GenKeySWmatrix(long, long, long, long, long) [5]
[73]     0.3    0.00    0.00    6600         DoubleCRT& DoubleCRT::Op<DoubleCRT::AddFun>(DoubleCRT const&, DoubleCRT::AddFun, bool) [73]
                0.00    0.00   47600/267400      std::__detail::_Map_base<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](long const&) [33]
                0.00    0.00    6600/18800       DoubleCRT::DoubleCRT(FHEcontext const&, IndexSet const&) [100]
                0.00    0.00   47600/360800      void std::vector<Cmodulus, std::allocator<Cmodulus> >::emplace_back<Cmodulus>(Cmodulus&&) [161]
                0.00    0.00   47600/270400      IndexSet::contains(long) const [163]
                0.00    0.00   23800/362400      IndexSet::next(long) const [160]
                0.00    0.00   13200/31500       IndexSet::contains(IndexSet const&) const [169]
                0.00    0.00    6600/17300       operator<=(IndexSet const&, IndexSet const&) [176]
                0.00    0.00    6600/72400       DoubleCRTHelper::~DoubleCRTHelper() [165]
                0.00    0.00    6600/14200       operator>=(IndexSet const&, IndexSet const&) [177]
-----------------------------------------------
                0.00    0.00    1700/1700        PAlgebraModDerived<PA_zz_p>::embedInSlots(NTL::zz_pX&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&, MappingData<PA_zz_p> const&) const [62]
[74]     0.3    0.00    0.00    1700         PAlgebraModDerived<PA_zz_p>::CRT_reconstruct(NTL::zz_pX&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&) const [74]
                0.00    0.00    1700/10800       auto_timer::stop() [35]
                0.00    0.00    1200/1200        PAlgebraModDerived<PA_zz_p>::evalTree(NTL::zz_pX&, std::shared_ptr<TNode<NTL::zz_pX> >, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&, long, long) const [98]
                0.00    0.00    3400/28600       NTL::Vec<NTL::zz_p>::~Vec() [170]
                0.00    0.00    1700/250400      GetTimerClock() [164]
                0.00    0.00    1700/475624      NTL::Vec<NTL::zz_p>::DoSetLength(long) [159]
                0.00    0.00    1200/2300        std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >::_M_default_append(unsigned long) [214]
                0.00    0.00    1200/1500        std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >::resize(unsigned long) [223]
                0.00    0.00    1200/10300       std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() <cycle 1> [180]
                0.00    0.00    1200/3900        std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >::~vector() [198]
                0.00    0.00       1/27          registerTimer(FHEtimer*) [333]
-----------------------------------------------
                0.00    0.00     100/100         EncryptedArray::decrypt(Ctxt const&, FHESecKey const&, std::vector<long, std::allocator<long> >&) const [76]
[75]     0.3    0.00    0.00     100         EncryptedArrayDerived<PA_zz_p>::decrypt(Ctxt const&, FHESecKey const&, std::vector<long, std::allocator<long> >&) const [75]
                0.00    0.00     100/100         FHESecKey::Decrypt(NTL::ZZX&, Ctxt const&) const [77]
                0.00    0.00     100/100         EncryptedArrayDerived<PA_zz_p>::decode(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, NTL::ZZX const&) const [107]
                0.00    0.00     100/100         void convert<long, NTL::zz_pX>(std::vector<long, std::allocator<long> >&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) [301]
                0.00    0.00     100/3900        std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >::~vector() [198]
-----------------------------------------------
                                                 <spontaneous>
[76]     0.3    0.00    0.00                 EncryptedArray::decrypt(Ctxt const&, FHESecKey const&, std::vector<long, std::allocator<long> >&) const [76]
                0.00    0.00     100/100         EncryptedArrayDerived<PA_zz_p>::decrypt(Ctxt const&, FHESecKey const&, std::vector<long, std::allocator<long> >&) const [75]
-----------------------------------------------
                0.00    0.00     100/100         EncryptedArrayDerived<PA_zz_p>::decrypt(Ctxt const&, FHESecKey const&, std::vector<long, std::allocator<long> >&) const [75]
[77]     0.3    0.00    0.00     100         FHESecKey::Decrypt(NTL::ZZX&, Ctxt const&) const [77]
                0.00    0.00     100/100         FHESecKey::Decrypt(NTL::ZZX&, Ctxt const&, NTL::ZZX&) const [78]
-----------------------------------------------
                0.00    0.00     100/100         FHESecKey::Decrypt(NTL::ZZX&, Ctxt const&) const [77]
[78]     0.3    0.00    0.00     100         FHESecKey::Decrypt(NTL::ZZX&, Ctxt const&, NTL::ZZX&) const [78]
                0.00    0.00     100/1500        DoubleCRT::toPoly(NTL::ZZX&, IndexSet const&, bool) const [30]
                0.00    0.00     400/6200        DoubleCRT::do_mul(DoubleCRT const&, bool) [31]
                0.00    0.00     500/6600        DoubleCRT& DoubleCRT::Op<DoubleCRT::AddFun>(DoubleCRT const&, DoubleCRT::AddFun, bool) [73]
                0.00    0.00     300/500         DoubleCRT::Exp(long) [122]
                0.00    0.00     100/18800       DoubleCRT::DoubleCRT(FHEcontext const&, IndexSet const&) [100]
                0.00    0.00    1600/362400      IndexSet::next(long) const [160]
                0.00    0.00    1600/1600        DoubleCRT& DoubleCRT::Op<DoubleCRT::MulFun>(NTL::ZZX const&, DoubleCRT::MulFun) [217]
                0.00    0.00     500/72400       DoubleCRTHelper::~DoubleCRTHelper() [165]
                0.00    0.00     400/5100        operator/(IndexSet const&, IndexSet const&) [193]
                0.00    0.00     400/7500        IndexSet::remove(IndexSet const&) [187]
                0.00    0.00     200/250400      GetTimerClock() [164]
                0.00    0.00     100/100         RecryptData::operator==(RecryptData const&) const [318]
                0.00    0.00     100/100         FHEcontext::operator==(FHEcontext const&) const [317]
                0.00    0.00     100/100         DoubleCRT::toPoly(NTL::ZZX&, bool) const [322]
                0.00    0.00     100/1700        NTL::Vec<NTL::ZZ>::operator=(NTL::Vec<NTL::ZZ> const&) [216]
                0.00    0.00     100/6800        FHEcontext::productOfPrimes(NTL::ZZ&, IndexSet const&) const [188]
                0.00    0.00     100/600         MulMod(NTL::ZZX&, NTL::ZZX const&, long, long, bool) [247]
                0.00    0.00     100/100         PolyRed(NTL::ZZX&, NTL::ZZX const&, long, bool) [300]
                0.00    0.00       1/27          registerTimer(FHEtimer*) [333]
-----------------------------------------------
                0.00    0.00     500/500         FHEPubKey::Encrypt(Ctxt&, NTL::ZZX const&, long, bool) const [57]
[79]     0.3    0.00    0.00     500         DoubleCRT& DoubleCRT::Op<DoubleCRT::AddFun>(NTL::ZZX const&, DoubleCRT::AddFun) [79]
                0.00    0.00     500/1900        DoubleCRT::DoubleCRT(NTL::ZZX const&, FHEcontext const&, IndexSet const&) [60]
                0.00    0.00     500/6600        DoubleCRT& DoubleCRT::Op<DoubleCRT::AddFun>(DoubleCRT const&, DoubleCRT::AddFun, bool) [73]
                0.00    0.00     500/72400       DoubleCRTHelper::~DoubleCRTHelper() [165]
-----------------------------------------------
                0.00    0.00    2100/2100        DoubleCRT::toPoly(NTL::ZZX&, IndexSet const&, bool) const [30]
[80]     0.3    0.00    0.00    2100         Cmodulus::iFFT(NTL::zz_pX&, NTL::Vec<long> const&) const [80]
                0.00    0.00    2100/26100       BluesteinFFT(NTL::zz_pX&, long, NTL::zz_p const&, NTL::zz_pX const&, NTL::Vec<unsigned long> const&, NTL::fftRep const&) [11]
                0.00    0.00    8400/250400      GetTimerClock() [164]
                0.00    0.00    2100/2100        rem(NTL::zz_pX&, NTL::zz_pX const&, zz_pXModulus1 const&) [215]
                0.00    0.00       2/27          registerTimer(FHEtimer*) [333]
                0.00    0.00       1/475624      NTL::Vec<NTL::zz_p>::DoSetLength(long) [159]
-----------------------------------------------
                0.00    0.00     100/9300        RLWE(DoubleCRT&, DoubleCRT&, DoubleCRT const&, long, NTL::ZZ*) [90]
                0.00    0.00     700/9300        Ctxt::tensorProduct(Ctxt const&, Ctxt const&) [66]
                0.00    0.00    1000/9300        FHEPubKey::Encrypt(Ctxt&, NTL::ZZX const&, long, bool) const [57]
                0.00    0.00    3000/9300        RLWE1(DoubleCRT&, DoubleCRT const&, DoubleCRT const&, long) [25]
                0.00    0.00    4500/9300        FHESecKey::GenKeySWmatrix(long, long, long, long, long) [5]
[81]     0.3    0.00    0.00    9300         DoubleCRT& DoubleCRT::Op<DoubleCRT::MulFun>(NTL::ZZ const&, DoubleCRT::MulFun) [81]
                0.00    0.00   41900/267400      std::__detail::_Map_base<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](long const&) [33]
                0.00    0.00   41900/360800      void std::vector<Cmodulus, std::allocator<Cmodulus> >::emplace_back<Cmodulus>(Cmodulus&&) [161]
                0.00    0.00   41900/270400      IndexSet::contains(long) const [163]
                0.00    0.00   41900/362400      IndexSet::next(long) const [160]
-----------------------------------------------
                0.00    0.00     100/4500        RLWE(DoubleCRT&, DoubleCRT&, DoubleCRT const&, long, NTL::ZZ*) [90]
                0.00    0.00    1400/4500        DoubleCRT& DoubleCRT::Op<DoubleCRT::SubFun>(NTL::ZZX const&, DoubleCRT::SubFun) [61]
                0.00    0.00    3000/4500        RLWE1(DoubleCRT&, DoubleCRT const&, DoubleCRT const&, long) [25]
[82]     0.2    0.00    0.00    4500         DoubleCRT& DoubleCRT::Op<DoubleCRT::SubFun>(DoubleCRT const&, DoubleCRT::SubFun, bool) [82]
                0.00    0.00   35000/267400      std::__detail::_Map_base<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](long const&) [33]
                0.00    0.00    4500/18800       DoubleCRT::DoubleCRT(FHEcontext const&, IndexSet const&) [100]
                0.00    0.00   35000/360800      void std::vector<Cmodulus, std::allocator<Cmodulus> >::emplace_back<Cmodulus>(Cmodulus&&) [161]
                0.00    0.00   35000/270400      IndexSet::contains(long) const [163]
                0.00    0.00   17500/362400      IndexSet::next(long) const [160]
                0.00    0.00    9000/31500       IndexSet::contains(IndexSet const&) const [169]
                0.00    0.00    4500/17300       operator<=(IndexSet const&, IndexSet const&) [176]
                0.00    0.00    4500/72400       DoubleCRTHelper::~DoubleCRTHelper() [165]
                0.00    0.00    4500/14200       operator>=(IndexSet const&, IndexSet const&) [177]
-----------------------------------------------
                0.00    0.00     500/500         EncryptedArrayDerived<PA_zz_p>::encrypt(Ctxt&, FHEPubKey const&, std::vector<long, std::allocator<long> > const&) const [55]
[83]     0.2    0.00    0.00     500         EncryptedArrayDerived<PA_zz_p>::encode(NTL::ZZX&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) const [83]
                0.00    0.00     500/1700        PAlgebraModDerived<PA_zz_p>::embedInSlots(NTL::zz_pX&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&, MappingData<PA_zz_p> const&) const [62]
                0.00    0.00     500/1700        NTL::Vec<NTL::ZZ>::operator=(NTL::Vec<NTL::ZZ> const&) [216]
                0.00    0.00     500/28600       NTL::Vec<NTL::zz_p>::~Vec() [170]
-----------------------------------------------
                0.00    0.00     100/3100        FHESecKey::GenSecKey(long, long, long) [64]
                0.00    0.00    3000/3100        FHESecKey::GenKeySWmatrix(long, long, long, long, long) [5]
[84]     0.2    0.00    0.00    3100         DoubleCRT::DoubleCRT(FHEcontext const&) [84]
                0.00    0.00   31000/267400      std::__detail::_Map_base<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](long const&) [33]
                0.00    0.00   31000/362400      IndexSet::next(long) const [160]
                0.00    0.00   31000/270400      IndexSet::contains(long) const [163]
                0.00    0.00   15500/24500       IndexSet::insert(long) [174]
                0.00    0.00   15500/25900       NTL::Vec<long>::FixLength(long) [171]
                0.00    0.00   15500/360800      void std::vector<Cmodulus, std::allocator<Cmodulus> >::emplace_back<Cmodulus>(Cmodulus&&) [161]
                0.00    0.00    3100/3700        IndexSet::intervalConstructor(long, long) [199]
-----------------------------------------------
                0.00    0.00     400/400         Ctxt::operator+=(Ctxt const&) [86]
[85]     0.1    0.00    0.00     400         Ctxt::addCtxt(Ctxt const&, bool) [85]
                0.00    0.00     400/10800       auto_timer::stop() [35]
                0.00    0.00    1000/6600        DoubleCRT& DoubleCRT::Op<DoubleCRT::AddFun>(DoubleCRT const&, DoubleCRT::AddFun, bool) [73]
                0.00    0.00     300/300         Ctxt::modUpToSet(IndexSet const&) [104]
                0.00    0.00     800/5100        operator/(IndexSet const&, IndexSet const&) [193]
                0.00    0.00     400/250400      GetTimerClock() [164]
                0.00    0.00     400/1400        Ctxt::Ctxt(FHEPubKey const&, long) [226]
                0.00    0.00     100/900         Ctxt::privateAssign(Ctxt const&) [239]
                0.00    0.00       1/27          registerTimer(FHEtimer*) [333]
-----------------------------------------------
                                                 <spontaneous>
[86]     0.1    0.00    0.00                 Ctxt::operator+=(Ctxt const&) [86]
                0.00    0.00     400/400         Ctxt::addCtxt(Ctxt const&, bool) [85]
-----------------------------------------------
                0.00    0.00    1200/1200        NTL::Mat<NTL::zz_pE>::Mat(NTL::Mat<NTL::zz_pE> const&) [88]
[87]     0.1    0.00    0.00    1200         NTL::Vec<NTL::zz_pE>::Init(long, NTL::zz_pE const*) [87]
                0.00    0.00   14400/418113      NTL::Vec<NTL::zz_p>::Init(long, NTL::zz_p const*) [10]
                0.00    0.00   14400/1083230     NTL::Vec<NTL::zz_p>::AllocateTo(long) [158]
-----------------------------------------------
                0.00    0.00     100/100         NTL::Mat<NTL::zz_pE>* NTL::MakeRaw<NTL::Mat<NTL::zz_pE>, NTL::Mat<NTL::zz_pE>&>(NTL::Mat<NTL::zz_pE>&) [89]
[88]     0.1    0.00    0.00     100         NTL::Mat<NTL::zz_pE>::Mat(NTL::Mat<NTL::zz_pE> const&) [88]
                0.00    0.00    1200/1200        NTL::Vec<NTL::zz_pE>::Init(long, NTL::zz_pE const*) [87]
                0.00    0.00    1200/4600        NTL::Vec<NTL::zz_pE>::AllocateTo(long) [194]
                0.00    0.00     100/300         NTL::Vec<NTL::Vec<NTL::zz_pE> >::AllocateTo(long) [266]
-----------------------------------------------
                0.00    0.00     100/100         EncryptedArrayDerived<PA_zz_p>::buildLinPolyCoeffs(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) const [63]
[89]     0.1    0.00    0.00     100         NTL::Mat<NTL::zz_pE>* NTL::MakeRaw<NTL::Mat<NTL::zz_pE>, NTL::Mat<NTL::zz_pE>&>(NTL::Mat<NTL::zz_pE>&) [89]
                0.00    0.00     100/100         NTL::Mat<NTL::zz_pE>::Mat(NTL::Mat<NTL::zz_pE> const&) [88]
-----------------------------------------------
                0.00    0.00     100/100         FHESecKey::ImportSecKey(DoubleCRT const&, long, long, long) [65]
[90]     0.1    0.00    0.00     100         RLWE(DoubleCRT&, DoubleCRT&, DoubleCRT const&, long, NTL::ZZ*) [90]
                0.00    0.00     100/4700        DoubleCRT::operator=(NTL::ZZX const&) [27]
                0.00    0.00     100/6200        DoubleCRT::do_mul(DoubleCRT const&, bool) [31]
                0.00    0.00     100/3100        DoubleCRT::randomize(NTL::ZZ const*) [67]
                0.00    0.00     100/4500        DoubleCRT& DoubleCRT::Op<DoubleCRT::SubFun>(DoubleCRT const&, DoubleCRT::SubFun, bool) [82]
                0.00    0.00     100/9300        DoubleCRT& DoubleCRT::Op<DoubleCRT::MulFun>(NTL::ZZ const&, DoubleCRT::MulFun) [81]
                0.00    0.00     100/4100        sampleGaussian(NTL::ZZX&, long, double) [197]
                0.00    0.00     100/72400       DoubleCRTHelper::~DoubleCRTHelper() [165]
-----------------------------------------------
                                                 <spontaneous>
[91]     0.1    0.00    0.00                 NTL::build(NTL::zz_pXMultiplier&, NTL::zz_pX const&, NTL::zz_pXModulus const&) [91]
                0.00    0.00   18600/578006      NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
-----------------------------------------------
                                                 <spontaneous>
[92]     0.1    0.00    0.00                 NTL::inv(NTL::zz_pE&, NTL::Mat<NTL::zz_pE>&, NTL::Mat<NTL::zz_pE> const&) [92]
                0.00    0.00   15600/578006      NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
                0.00    0.00    1200/1400        NTL::Vec<NTL::zz_pX>::DoSetLength(long) [225]
                0.00    0.00     100/38210       NTL::Vec<long>::DoSetLength(long) [167]
                0.00    0.00     100/200         NTL::Mat<NTL::zz_pE>::SetDims(long, long) [277]
-----------------------------------------------
                                                 <spontaneous>
[93]     0.1    0.00    0.00                 NTL::conv(NTL::zz_pX&, NTL::Vec<NTL::zz_p> const&) [93]
                0.00    0.00   14500/578006      NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
-----------------------------------------------
                                                 <spontaneous>
[94]     0.1    0.00    0.00                 NTL::PowerMod(NTL::zz_pX&, NTL::zz_pX const&, NTL::ZZ const&, NTL::zz_pXModulus const&) [94]
                0.00    0.00   13300/578006      NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
-----------------------------------------------
                0.00    0.00     100/100         EncryptedArrayDerived<PA_zz_p>::buildLinPolyCoeffs(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) const [63]
[95]     0.1    0.00    0.00     100         buildLinPolyMatrix(NTL::Mat<NTL::zz_pE>&, long) [95]
                0.00    0.00   13200/578006      NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
                0.00    0.00     100/200         NTL::Mat<NTL::zz_pE>::SetDims(long, long) [277]
-----------------------------------------------
                0.00    0.00    1300/2700        FHESecKey::GenKeySWmatrix(long, long, long, long, long) [5]
                0.00    0.00    1400/2700        DoubleCRT::scaleDownToSet(IndexSet const&, long) [26]
[96]     0.1    0.00    0.00    2700         DoubleCRT::automorph(long) [96]
                0.00    0.00    8700/267400      std::__detail::_Map_base<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](long const&) [33]
                0.00    0.00    8700/360800      void std::vector<Cmodulus, std::allocator<Cmodulus> >::emplace_back<Cmodulus>(Cmodulus&&) [161]
                0.00    0.00    8700/270400      IndexSet::contains(long) const [163]
                0.00    0.00    8700/362400      IndexSet::next(long) const [160]
-----------------------------------------------
                                                 <spontaneous>
[97]     0.1    0.00    0.00                 DoubleCRT::sampleHWt(long) [97]
                0.00    0.00     100/4700        DoubleCRT::operator=(NTL::ZZX const&) [27]
                0.00    0.00     100/100         sampleHWt(NTL::ZZX&, long, long) [305]
-----------------------------------------------
                                7200             PAlgebraModDerived<PA_zz_p>::evalTree(NTL::zz_pX&, std::shared_ptr<TNode<NTL::zz_pX> >, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&, long, long) const [98]
                0.00    0.00    1200/1200        PAlgebraModDerived<PA_zz_p>::CRT_reconstruct(NTL::zz_pX&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&) const [74]
[98]     0.0    0.00    0.00    1200+7200    PAlgebraModDerived<PA_zz_p>::evalTree(NTL::zz_pX&, std::shared_ptr<TNode<NTL::zz_pX> >, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&, long, long) const [98]
                0.00    0.00    8400/578006      NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
                0.00    0.00   14400/28600       NTL::Vec<NTL::zz_p>::~Vec() [170]
                0.00    0.00    7200/10300       std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() <cycle 1> [180]
                                7200             PAlgebraModDerived<PA_zz_p>::evalTree(NTL::zz_pX&, std::shared_ptr<TNode<NTL::zz_pX> >, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&, long, long) const [98]
-----------------------------------------------
                                                 <spontaneous>
[99]     0.0    0.00    0.00                 NTL::XGCD(NTL::zz_pX&, NTL::zz_pX&, NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pX const&) [99]
                0.00    0.00    8300/578006      NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
                0.00    0.00    1600/25586       NTL::Vec<NTL::Vec<NTL::zz_p> >::swap(NTL::Vec<NTL::Vec<NTL::zz_p> >&) [172]
-----------------------------------------------
                0.00    0.00     100/18800       FHESecKey::ImportSecKey(DoubleCRT const&, long, long, long) [65]
                0.00    0.00     100/18800       FHESecKey::Decrypt(NTL::ZZX&, Ctxt const&, NTL::ZZX&) const [78]
                0.00    0.00     300/18800       Ctxt::tensorProduct(Ctxt const&, Ctxt const&) [66]
                0.00    0.00    1000/18800       FHEPubKey::Encrypt(Ctxt&, NTL::ZZX const&, long, bool) const [57]
                0.00    0.00    4500/18800       DoubleCRT& DoubleCRT::Op<DoubleCRT::SubFun>(DoubleCRT const&, DoubleCRT::SubFun, bool) [82]
                0.00    0.00    6200/18800       DoubleCRT::do_mul(DoubleCRT const&, bool) [31]
                0.00    0.00    6600/18800       DoubleCRT& DoubleCRT::Op<DoubleCRT::AddFun>(DoubleCRT const&, DoubleCRT::AddFun, bool) [73]
[100]    0.0    0.00    0.00   18800         DoubleCRT::DoubleCRT(FHEcontext const&, IndexSet const&) [100]
                0.00    0.00    6800/267400      std::__detail::_Map_base<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](long const&) [33]
                0.00    0.00    6800/362400      IndexSet::next(long) const [160]
                0.00    0.00    6800/270400      IndexSet::contains(long) const [163]
                0.00    0.00    3400/24500       IndexSet::insert(long) [174]
                0.00    0.00    3400/25900       NTL::Vec<long>::FixLength(long) [171]
                0.00    0.00    3400/360800      void std::vector<Cmodulus, std::allocator<Cmodulus> >::emplace_back<Cmodulus>(Cmodulus&&) [161]
-----------------------------------------------
                0.00    0.00    1700/1700        Ctxt::tensorProduct(Ctxt const&, Ctxt const&) [66]
[101]    0.0    0.00    0.00    1700         DoubleCRT::operator=(DoubleCRT const&) [101]
                0.00    0.00    4000/267400      std::__detail::_Map_base<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](long const&) [33]
                0.00    0.00    4000/360800      void std::vector<Cmodulus, std::allocator<Cmodulus> >::emplace_back<Cmodulus>(Cmodulus&&) [161]
                0.00    0.00    4000/270400      IndexSet::contains(long) const [163]
                0.00    0.00    2000/362400      IndexSet::next(long) const [160]
                0.00    0.00    1700/4400        IndexSet::operator==(IndexSet const&) const [195]
                0.00    0.00     300/300         std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::operator=(std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&) [272]
                0.00    0.00     300/72400       DoubleCRTHelper::~DoubleCRTHelper() [165]
-----------------------------------------------
                                                 <spontaneous>
[102]    0.0    0.00    0.00                 NTL::BerlekampMassey(NTL::zz_pX&, NTL::Vec<NTL::zz_p> const&, long) [102]
                0.00    0.00    4300/578006      NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
                0.00    0.00     100/475624      NTL::Vec<NTL::zz_p>::DoSetLength(long) [159]
-----------------------------------------------
                0.00    0.00     900/900         Ctxt::modUpToSet(IndexSet const&) [104]
[103]    0.0    0.00    0.00     900         DoubleCRT::addPrimesAndScale(IndexSet const&) [103]
                0.00    0.00    3600/267400      std::__detail::_Map_base<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](long const&) [33]
                0.00    0.00    4500/362400      IndexSet::next(long) const [160]
                0.00    0.00    3600/270400      IndexSet::contains(long) const [163]
                0.00    0.00    2700/360800      void std::vector<Cmodulus, std::allocator<Cmodulus> >::emplace_back<Cmodulus>(Cmodulus&&) [161]
                0.00    0.00     900/5100        operator&(IndexSet const&, IndexSet const&) [192]
                0.00    0.00     900/24500       IndexSet::insert(long) [174]
                0.00    0.00     900/25900       NTL::Vec<long>::FixLength(long) [171]
-----------------------------------------------
                0.00    0.00     300/300         Ctxt::addCtxt(Ctxt const&, bool) [85]
[104]    0.0    0.00    0.00     300         Ctxt::modUpToSet(IndexSet const&) [104]
                0.00    0.00     900/900         DoubleCRT::addPrimesAndScale(IndexSet const&) [103]
                0.00    0.00     300/5100        operator/(IndexSet const&, IndexSet const&) [193]
                0.00    0.00     300/1500        Ctxt::verifyPrimeSet() const [221]
                0.00    0.00     300/400         IndexSet::insert(IndexSet const&) [260]
-----------------------------------------------
                0.00    0.00     200/200         EncryptedArrayDerived<PA_zz_p>::initNormalBasisMatrix() const [70]
[105]    0.0    0.00    0.00     200         NTL::Mat<NTL::zz_p>::Mat(NTL::Mat<NTL::zz_p> const&) [105]
                0.00    0.00     200/200         NTL::Vec<NTL::Vec<NTL::zz_p> >::Init(long, NTL::Vec<NTL::zz_p> const*) [106]
                0.00    0.00    2400/2400        NTL::Vec<NTL::zz_p>::FixAtCurrentLength() [209]
                0.00    0.00     200/9800        NTL::Vec<NTL::Vec<NTL::zz_p> >::AllocateTo(long) [182]
-----------------------------------------------
                0.00    0.00     200/200         NTL::Mat<NTL::zz_p>::Mat(NTL::Mat<NTL::zz_p> const&) [105]
[106]    0.0    0.00    0.00     200         NTL::Vec<NTL::Vec<NTL::zz_p> >::Init(long, NTL::Vec<NTL::zz_p> const*) [106]
                0.00    0.00    2400/418113      NTL::Vec<NTL::zz_p>::Init(long, NTL::zz_p const*) [10]
                0.00    0.00    2400/1083230     NTL::Vec<NTL::zz_p>::AllocateTo(long) [158]
-----------------------------------------------
                0.00    0.00     100/100         EncryptedArrayDerived<PA_zz_p>::decrypt(Ctxt const&, FHESecKey const&, std::vector<long, std::allocator<long> >&) const [75]
[107]    0.0    0.00    0.00     100         EncryptedArrayDerived<PA_zz_p>::decode(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, NTL::ZZX const&) const [107]
                0.00    0.00     100/10800       auto_timer::stop() [35]
                0.00    0.00     100/100         PAlgebraModDerived<PA_zz_p>::decodePlaintext(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, NTL::zz_pX const&, MappingData<PA_zz_p> const&) const [139]
                0.00    0.00     100/250400      GetTimerClock() [164]
                0.00    0.00     100/28600       NTL::Vec<NTL::zz_p>::~Vec() [170]
                0.00    0.00       1/27          registerTimer(FHEtimer*) [333]
-----------------------------------------------
                0.00    0.00     100/100         SHEEP::ContextHElib<bool, Ctxt>::configure() [4]
[108]    0.0    0.00    0.00     100         FHEcontext::FHEcontext(unsigned long, unsigned long, unsigned long, std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&) [108]
                0.00    0.00     100/100         buildPAlgebraMod(PAlgebra const&, long) [111]
                0.00    0.00     100/200         buildEncryptedArray(FHEcontext const&, NTL::ZZX const&, PAlgebraMod const&) [116]
                0.00    0.00     100/100         PAlgebra::PAlgebra(unsigned long, unsigned long, std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&) [316]
                0.00    0.00     100/100         PAlgebraModDerived<PA_zz_p>::getFactorsOverZZ() const [320]
-----------------------------------------------
                                                 <spontaneous>
[109]    0.0    0.00    0.00                 NTL::build(NTL::zz_pXModulus&, NTL::zz_pX const&) [109]
                0.00    0.00    2700/578006      NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
-----------------------------------------------
                                                 <spontaneous>
[110]    0.0    0.00    0.00                 NTL::CompMod(NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pXNewArgument const&, NTL::zz_pXModulus const&) [110]
                0.00    0.00    2400/578006      NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
                0.00    0.00    2400/9600        NTL::Mat<NTL::zz_p>::SetDims(long, long) [183]
-----------------------------------------------
                0.00    0.00     100/100         FHEcontext::FHEcontext(unsigned long, unsigned long, unsigned long, std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&) [108]
[111]    0.0    0.00    0.00     100         buildPAlgebraMod(PAlgebra const&, long) [111]
                0.00    0.00     100/100         PAlgebraModDerived<PA_zz_p>::PAlgebraModDerived(PAlgebra const&, long) [112]
-----------------------------------------------
                0.00    0.00     100/100         buildPAlgebraMod(PAlgebra const&, long) [111]
[112]    0.0    0.00    0.00     100         PAlgebraModDerived<PA_zz_p>::PAlgebraModDerived(PAlgebra const&, long) [112]
                0.00    0.00     100/100         PAlgebraModDerived<PA_zz_p>::genCrtTable() [123]
                0.00    0.00     100/100         NTL::Vec<NTL::zz_pX>::operator=(NTL::Vec<NTL::zz_pX> const&) [138]
                0.00    0.00     100/100         PAlgebraModDerived<PA_zz_p>::genMaskTable() [147]
                0.00    0.00     600/28600       NTL::Vec<NTL::zz_p>::~Vec() [170]
                0.00    0.00     300/300         bool poly_comp<NTL::zz_pX>(NTL::zz_pX const&, NTL::zz_pX const&) [265]
                0.00    0.00     100/800         std::vector<unsigned long, std::allocator<unsigned long> >::_M_default_append(unsigned long) [242]
                0.00    0.00     100/100         EDF(NTL::Vec<NTL::zz_pX>&, NTL::zz_pX const&, long) [299]
                0.00    0.00     100/25586       NTL::Vec<NTL::Vec<NTL::zz_p> >::swap(NTL::Vec<NTL::Vec<NTL::zz_p> >&) [172]
                0.00    0.00     100/300         NTL::Vec<NTL::zz_pX>::~Vec() [268]
                0.00    0.00     100/700         NTL::zz_pXModulus::~zz_pXModulus() [243]
                0.00    0.00     100/2401        NTL::Vec<NTL::zz_pX>::AllocateTo(long) [208]
                0.00    0.00     100/1500        NTL::Vec<NTL::zz_pX>::Init(long) [219]
                0.00    0.00     100/100         std::vector<NTL::ZZX, std::allocator<NTL::ZZX> >::_M_default_append(unsigned long) [329]
-----------------------------------------------
                                                 <spontaneous>
[113]    0.0    0.00    0.00                 NTL::PlainGCD(NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pX const&) [113]
                0.00    0.00    2172/578006      NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
-----------------------------------------------
                                                 <spontaneous>
[114]    0.0    0.00    0.00                 NTL::rem(NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pXModulus const&) [114]
                0.00    0.00    2100/578006      NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
-----------------------------------------------
                0.00    0.00       1/201         Cmodulus::FFT(NTL::Vec<long>&, NTL::ZZX const&) const [21]
                0.00    0.00     200/201         EncryptedArrayDerived<PA_zz_p>::EncryptedArrayDerived(FHEcontext const&, NTL::zz_pX const&, PAlgebraMod const&) [117]
[115]    0.0    0.00    0.00     201         PAlgebraModDerived<PA_zz_p>::mapToSlots(MappingData<PA_zz_p>&, NTL::zz_pX const&) const [115]
                0.00    0.00     400/400         NTL::Vec<NTL::zz_pE>::operator=(NTL::Vec<NTL::zz_pE> const&) [125]
                0.00    0.00     800/800         PAlgebraModDerived<PA_zz_p>::mapToFt(NTL::zz_pX&, NTL::zz_pX const&, unsigned long, NTL::zz_pX const*) const [135]
                0.00    0.00     200/578006      NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
                0.00    0.00    1600/28600       NTL::Vec<NTL::zz_p>::~Vec() [170]
                0.00    0.00     800/9600        NTL::Mat<NTL::zz_p>::SetDims(long, long) [183]
                0.00    0.00     400/600         NTL::Vec<NTL::zz_pE>::~Vec() [248]
                0.00    0.00     200/2300        std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >::_M_default_append(unsigned long) [214]
                0.00    0.00     200/1500        std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >::resize(unsigned long) [223]
                0.00    0.00     200/200         std::vector<NTL::Mat<NTL::zz_p>, std::allocator<NTL::Mat<NTL::zz_p> > >::_M_default_append(unsigned long) [295]
                0.00    0.00     100/300         long NTL::operator==<NTL::zz_p>(NTL::Vec<NTL::zz_p> const&, NTL::Vec<NTL::zz_p> const&) [269]
                0.00    0.00     100/100         std::vector<NTL::zz_pEX, std::allocator<NTL::zz_pEX> >::_M_default_append(unsigned long) [330]
-----------------------------------------------
                0.00    0.00     100/200         EncryptedArray::EncryptedArray(FHEcontext const&, NTL::ZZX const&) [130]
                0.00    0.00     100/200         FHEcontext::FHEcontext(unsigned long, unsigned long, unsigned long, std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&) [108]
[116]    0.0    0.00    0.00     200         buildEncryptedArray(FHEcontext const&, NTL::ZZX const&, PAlgebraMod const&) [116]
                0.00    0.00     200/200         EncryptedArrayDerived<PA_zz_p>::EncryptedArrayDerived(FHEcontext const&, NTL::zz_pX const&, PAlgebraMod const&) [117]
                0.00    0.00     200/200         PAlgebraModDerived<PA_zz_p>::getTag() const [290]
                0.00    0.00     200/200         PAlgebraModDerived<PA_zz_p>::restoreContext() const [288]
                0.00    0.00     200/28600       NTL::Vec<NTL::zz_p>::~Vec() [170]
-----------------------------------------------
                0.00    0.00     200/200         buildEncryptedArray(FHEcontext const&, NTL::ZZX const&, PAlgebraMod const&) [116]
[117]    0.0    0.00    0.00     200         EncryptedArrayDerived<PA_zz_p>::EncryptedArrayDerived(FHEcontext const&, NTL::zz_pX const&, PAlgebraMod const&) [117]
                0.00    0.00     200/201         PAlgebraModDerived<PA_zz_p>::mapToSlots(MappingData<PA_zz_p>&, NTL::zz_pX const&) const [115]
-----------------------------------------------
                                                 <spontaneous>
[118]    0.0    0.00    0.00                 NTL::PlainUpdateMap(NTL::Vec<NTL::zz_p>&, NTL::Vec<NTL::zz_p> const&, NTL::zz_pX const&, NTL::zz_pX const&) [118]
                0.00    0.00    1800/578006      NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
                0.00    0.00    1800/475624      NTL::Vec<NTL::zz_p>::DoSetLength(long) [159]
-----------------------------------------------
                                                 <spontaneous>
[119]    0.0    0.00    0.00                 NTL::UpdateMap(NTL::Vec<NTL::zz_p>&, NTL::Vec<NTL::zz_p> const&, NTL::zz_pXMultiplier const&, NTL::zz_pXModulus const&) [119]
                0.00    0.00    1800/578006      NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
-----------------------------------------------
                                                 <spontaneous>
[120]    0.0    0.00    0.00                 NTL::InvMod(NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pX const&) [120]
                0.00    0.00    1600/578006      NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
-----------------------------------------------
                                                 <spontaneous>
[121]    0.0    0.00    0.00                 NTL::GCD(NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pX const&) [121]
                0.00    0.00    1572/578006      NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
                0.00    0.00     786/25586       NTL::Vec<NTL::Vec<NTL::zz_p> >::swap(NTL::Vec<NTL::Vec<NTL::zz_p> >&) [172]
-----------------------------------------------
                0.00    0.00     200/500         FHESecKey::GenKeySWmatrix(long, long, long, long, long) [5]
                0.00    0.00     300/500         FHESecKey::Decrypt(NTL::ZZX&, Ctxt const&, NTL::ZZX&) const [78]
[122]    0.0    0.00    0.00     500         DoubleCRT::Exp(long) [122]
                0.00    0.00    1300/267400      std::__detail::_Map_base<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](long const&) [33]
                0.00    0.00    1300/360800      void std::vector<Cmodulus, std::allocator<Cmodulus> >::emplace_back<Cmodulus>(Cmodulus&&) [161]
                0.00    0.00    1300/270400      IndexSet::contains(long) const [163]
                0.00    0.00    1300/362400      IndexSet::next(long) const [160]
-----------------------------------------------
                0.00    0.00     100/100         PAlgebraModDerived<PA_zz_p>::PAlgebraModDerived(PAlgebra const&, long) [112]
[123]    0.0    0.00    0.00     100         PAlgebraModDerived<PA_zz_p>::genCrtTable() [123]
                0.00    0.00     100/100         PAlgebraModDerived<PA_zz_p>::buildTree(std::shared_ptr<TNode<NTL::zz_pX> >&, long, long) const [128]
                0.00    0.00     400/578006      NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
                0.00    0.00     100/2300        std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >::_M_default_append(unsigned long) [214]
-----------------------------------------------
                                                 <spontaneous>
[124]    0.0    0.00    0.00                 NTL::PowerXMod(NTL::zz_pX&, NTL::ZZ const&, NTL::zz_pXModulus const&) [124]
                0.00    0.00    1400/578006      NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
-----------------------------------------------
                0.00    0.00     400/400         PAlgebraModDerived<PA_zz_p>::mapToSlots(MappingData<PA_zz_p>&, NTL::zz_pX const&) const [115]
[125]    0.0    0.00    0.00     400         NTL::Vec<NTL::zz_pE>::operator=(NTL::Vec<NTL::zz_pE> const&) [125]
                0.00    0.00     800/418113      NTL::Vec<NTL::zz_p>::Init(long, NTL::zz_p const*) [10]
                0.00    0.00     800/1083230     NTL::Vec<NTL::zz_p>::AllocateTo(long) [158]
                0.00    0.00     400/4600        NTL::Vec<NTL::zz_pE>::AllocateTo(long) [194]
-----------------------------------------------
                0.00    0.00     700/700         PAlgebraModDerived<PA_zz_p>::buildTree(std::shared_ptr<TNode<NTL::zz_pX> >&, long, long) const [128]
[126]    0.0    0.00    0.00     700         std::shared_ptr<TNode<NTL::zz_pX> > buildTNode<NTL::zz_pX>(std::shared_ptr<TNode<NTL::zz_pX> >, std::shared_ptr<TNode<NTL::zz_pX> >, NTL::zz_pX const&) [126]
                0.00    0.00     700/700         NTL::Vec<NTL::zz_p>::Vec(NTL::Vec<NTL::zz_p> const&) [127]
                0.00    0.00     600/10300       std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() <cycle 1> [180]
-----------------------------------------------
                0.00    0.00     700/700         std::shared_ptr<TNode<NTL::zz_pX> > buildTNode<NTL::zz_pX>(std::shared_ptr<TNode<NTL::zz_pX> >, std::shared_ptr<TNode<NTL::zz_pX> >, NTL::zz_pX const&) [126]
[127]    0.0    0.00    0.00     700         NTL::Vec<NTL::zz_p>::Vec(NTL::Vec<NTL::zz_p> const&) [127]
                0.00    0.00     700/418113      NTL::Vec<NTL::zz_p>::Init(long, NTL::zz_p const*) [10]
                0.00    0.00     700/1083230     NTL::Vec<NTL::zz_p>::AllocateTo(long) [158]
-----------------------------------------------
                                 600             PAlgebraModDerived<PA_zz_p>::buildTree(std::shared_ptr<TNode<NTL::zz_pX> >&, long, long) const [128]
                0.00    0.00     100/100         PAlgebraModDerived<PA_zz_p>::genCrtTable() [123]
[128]    0.0    0.00    0.00     100+600     PAlgebraModDerived<PA_zz_p>::buildTree(std::shared_ptr<TNode<NTL::zz_pX> >&, long, long) const [128]
                0.00    0.00     700/700         std::shared_ptr<TNode<NTL::zz_pX> > buildTNode<NTL::zz_pX>(std::shared_ptr<TNode<NTL::zz_pX> >, std::shared_ptr<TNode<NTL::zz_pX> >, NTL::zz_pX const&) [126]
                0.00    0.00    1200/10300       std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() <cycle 1> [180]
                0.00    0.00     300/28600       NTL::Vec<NTL::zz_p>::~Vec() [170]
                                 600             PAlgebraModDerived<PA_zz_p>::buildTree(std::shared_ptr<TNode<NTL::zz_pX> >&, long, long) const [128]
-----------------------------------------------
                                                 <spontaneous>
[129]    0.0    0.00    0.00                 NTL::Vec<NTL::zz_pX>::append(NTL::zz_pX const&) [129]
                0.00    0.00     400/418113      NTL::Vec<NTL::zz_p>::Init(long, NTL::zz_p const*) [10]
                0.00    0.00     400/578006      NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
                0.00    0.00     800/2401        NTL::Vec<NTL::zz_pX>::AllocateTo(long) [208]
                0.00    0.00     400/1083230     NTL::Vec<NTL::zz_p>::AllocateTo(long) [158]
-----------------------------------------------
                                                 <spontaneous>
[130]    0.0    0.00    0.00                 EncryptedArray::EncryptedArray(FHEcontext const&, NTL::ZZX const&) [130]
                0.00    0.00     100/200         buildEncryptedArray(FHEcontext const&, NTL::ZZX const&, PAlgebraMod const&) [116]
-----------------------------------------------
                0.00    0.00     100/100         SHEEP::ContextHElib<bool, Ctxt>::configure() [4]
[131]    0.0    0.00    0.00     100         buildModChain(FHEcontext&, long, long, long) [131]
                0.00    0.00     200/200         AddManyPrimes(FHEcontext&, double, bool, bool) [137]
                0.00    0.00     100/500         FHEcontext::AddPrime(long, long, bool) [132]
                0.00    0.00     800/362400      IndexSet::next(long) const [160]
                0.00    0.00     200/24500       IndexSet::insert(long) [174]
                0.00    0.00     100/400         IndexSet::insert(IndexSet const&) [260]
                0.00    0.00     100/5100        operator/(IndexSet const&, IndexSet const&) [193]
                0.00    0.00     100/200         PAlgebraModDerived<PA_zz_p>::getPPowR() const [291]
                0.00    0.00     100/100         std::vector<IndexSet, std::allocator<IndexSet> >::_M_default_append(unsigned long) [326]
-----------------------------------------------
                0.00    0.00     100/500         buildModChain(FHEcontext&, long, long, long) [131]
                0.00    0.00     400/500         AddManyPrimes(FHEcontext&, double, bool, bool) [137]
[132]    0.0    0.00    0.00     500         FHEcontext::AddPrime(long, long, bool) [132]
                0.00    0.00     500/500         Cmodulus::Cmodulus(PAlgebra const&, long, long) [134]
                0.00    0.00     500/360800      void std::vector<Cmodulus, std::allocator<Cmodulus> >::emplace_back<Cmodulus>(Cmodulus&&) [161]
                0.00    0.00     500/24500       IndexSet::insert(long) [174]
                0.00    0.00     400/400         void std::vector<Cmodulus, std::allocator<Cmodulus> >::_M_emplace_back_aux<Cmodulus>(Cmodulus&&) [263]
-----------------------------------------------
                0.00    0.00     500/500         Cmodulus::Cmodulus(PAlgebra const&, long, long) [134]
[133]    0.0    0.00    0.00     500         zz_pXModulus1::zz_pXModulus1(long, NTL::zz_pX const&) [133]
                0.00    0.00     500/418113      NTL::Vec<NTL::zz_p>::Init(long, NTL::zz_p const*) [10]
                0.00    0.00     500/1083230     NTL::Vec<NTL::zz_p>::AllocateTo(long) [158]
-----------------------------------------------
                0.00    0.00     500/500         FHEcontext::AddPrime(long, long, bool) [132]
[134]    0.0    0.00    0.00     500         Cmodulus::Cmodulus(PAlgebra const&, long, long) [134]
                0.00    0.00     500/500         zz_pXModulus1::zz_pXModulus1(long, NTL::zz_pX const&) [133]
                0.00    0.00    1000/1000        BluesteinInit(long, NTL::zz_p const&, NTL::zz_pX&, NTL::Vec<unsigned long>&, NTL::fftRep&) [236]
                0.00    0.00     500/500         void FindPrimRootT<NTL::zz_p, long>(NTL::zz_p&, unsigned long) [254]
                0.00    0.00     500/500         FindPrimitiveRoot(NTL::zz_p&, unsigned long) [255]
                0.00    0.00     500/500         BuildContext(long, long) [253]
-----------------------------------------------
                0.00    0.00     800/800         PAlgebraModDerived<PA_zz_p>::mapToSlots(MappingData<PA_zz_p>&, NTL::zz_pX const&) const [115]
[135]    0.0    0.00    0.00     800         PAlgebraModDerived<PA_zz_p>::mapToFt(NTL::zz_pX&, NTL::zz_pX const&, unsigned long, NTL::zz_pX const*) const [135]
                0.00    0.00     600/578006      NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
                0.00    0.00    1800/28600       NTL::Vec<NTL::zz_p>::~Vec() [170]
                0.00    0.00     600/700         NTL::zz_pXModulus::~zz_pXModulus() [243]
                0.00    0.00     200/300         long NTL::operator==<NTL::zz_p>(NTL::Vec<NTL::zz_p> const&, NTL::Vec<NTL::zz_p> const&) [269]
                0.00    0.00     100/475624      NTL::Vec<NTL::zz_p>::DoSetLength(long) [159]
-----------------------------------------------
                                                 <spontaneous>
[136]    0.0    0.00    0.00                 NTL::Comp2Mod(NTL::zz_pX&, NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pX const&, NTL::zz_pX const&, NTL::zz_pXModulus const&) [136]
                0.00    0.00     600/578006      NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
-----------------------------------------------
                0.00    0.00     200/200         buildModChain(FHEcontext&, long, long, long) [131]
[137]    0.0    0.00    0.00     200         AddManyPrimes(FHEcontext&, double, bool, bool) [137]
                0.00    0.00     400/500         FHEcontext::AddPrime(long, long, bool) [132]
-----------------------------------------------
                0.00    0.00     100/100         PAlgebraModDerived<PA_zz_p>::PAlgebraModDerived(PAlgebra const&, long) [112]
[138]    0.0    0.00    0.00     100         NTL::Vec<NTL::zz_pX>::operator=(NTL::Vec<NTL::zz_pX> const&) [138]
                0.00    0.00     400/418113      NTL::Vec<NTL::zz_p>::Init(long, NTL::zz_p const*) [10]
                0.00    0.00     400/1083230     NTL::Vec<NTL::zz_p>::AllocateTo(long) [158]
                0.00    0.00     100/2401        NTL::Vec<NTL::zz_pX>::AllocateTo(long) [208]
-----------------------------------------------
                0.00    0.00     100/100         EncryptedArrayDerived<PA_zz_p>::decode(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, NTL::ZZX const&) const [107]
[139]    0.0    0.00    0.00     100         PAlgebraModDerived<PA_zz_p>::decodePlaintext(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, NTL::zz_pX const&, MappingData<PA_zz_p> const&) const [139]
                0.00    0.00     100/100         std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >::operator=(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) [140]
                0.00    0.00     100/100         PAlgebraModDerived<PA_zz_p>::CRT_decompose(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, NTL::zz_pX const&) const [319]
                0.00    0.00     100/3900        std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >::~vector() [198]
-----------------------------------------------
                0.00    0.00     100/100         PAlgebraModDerived<PA_zz_p>::decodePlaintext(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, NTL::zz_pX const&, MappingData<PA_zz_p> const&) const [139]
[140]    0.0    0.00    0.00     100         std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >::operator=(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) [140]
                0.00    0.00     400/418113      NTL::Vec<NTL::zz_p>::Init(long, NTL::zz_p const*) [10]
                0.00    0.00     400/1083230     NTL::Vec<NTL::zz_p>::AllocateTo(long) [158]
                0.00    0.00     100/2400        std::vector<CtxtPart, std::allocator<CtxtPart> >::_M_fill_insert(__gnu_cxx::__normal_iterator<CtxtPart*, std::vector<CtxtPart, std::allocator<CtxtPart> > >, unsigned long, CtxtPart const&) [212]
-----------------------------------------------
                                                 <spontaneous>
[141]    0.0    0.00    0.00                 NTL::PowerXPlusAMod(NTL::zz_pX&, NTL::zz_p, NTL::ZZ const&, NTL::zz_pXModulus const&) [141]
                0.00    0.00     486/578006      NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
-----------------------------------------------
                                                 <spontaneous>
[142]    0.0    0.00    0.00                 NTL::ProjectPowers(NTL::Vec<NTL::zz_p>&, NTL::Vec<NTL::zz_p> const&, long, NTL::zz_pXNewArgument const&, NTL::zz_pXModulus const&) [142]
                0.00    0.00     400/578006      NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
                0.00    0.00     800/475624      NTL::Vec<NTL::zz_p>::DoSetLength(long) [159]
                0.00    0.00     400/9600        NTL::Mat<NTL::zz_p>::SetDims(long, long) [183]
-----------------------------------------------
                                                 <spontaneous>
[143]    0.0    0.00    0.00                 NTL::SetCoeff(NTL::zz_pEX&, long, NTL::zz_pE const&) [143]
                0.00    0.00     400/578006      NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
-----------------------------------------------
                                                 <spontaneous>
[144]    0.0    0.00    0.00                 NTL::BuildFromRoots(NTL::zz_pX&, NTL::Vec<NTL::zz_p> const&) [144]
                0.00    0.00     300/578006      NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
                0.00    0.00     300/5100        NTL::Vec<NTL::zz_p>::SetLength(long) [190]
-----------------------------------------------
                                                 <spontaneous>
[145]    0.0    0.00    0.00                 NTL::TraceMap(NTL::zz_pX&, NTL::zz_pX const&, long, NTL::zz_pXModulus const&, NTL::zz_pX const&) [145]
                0.00    0.00     300/578006      NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
                0.00    0.00     100/475624      NTL::Vec<NTL::zz_p>::DoSetLength(long) [159]
-----------------------------------------------
                                                 <spontaneous>
[146]    0.0    0.00    0.00                 NTL::EDF(NTL::Vec<NTL::zz_pX>&, NTL::zz_pX const&, NTL::zz_pX const&, long, long) [146]
                0.00    0.00     200/418113      NTL::Vec<NTL::zz_p>::Init(long, NTL::zz_p const*) [10]
                0.00    0.00     200/1083230     NTL::Vec<NTL::zz_p>::AllocateTo(long) [158]
                0.00    0.00     100/1400        NTL::Vec<NTL::zz_pX>::DoSetLength(long) [225]
-----------------------------------------------
                0.00    0.00     100/100         PAlgebraModDerived<PA_zz_p>::PAlgebraModDerived(PAlgebra const&, long) [112]
[147]    0.0    0.00    0.00     100         PAlgebraModDerived<PA_zz_p>::genMaskTable() [147]
                0.00    0.00     200/578006      NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
                0.00    0.00     200/475624      NTL::Vec<NTL::zz_p>::DoSetLength(long) [159]
                0.00    0.00     200/2300        std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >::_M_default_append(unsigned long) [214]
                0.00    0.00     100/100         std::vector<std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >, std::allocator<std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > > >::_M_default_append(unsigned long) [331]
                0.00    0.00     100/28600       NTL::Vec<NTL::zz_p>::~Vec() [170]
-----------------------------------------------
                                                 <spontaneous>
[148]    0.0    0.00    0.00                 NTL::FindRoots(NTL::Vec<NTL::zz_p>&, NTL::zz_pX const&) [148]
                0.00    0.00     100/418113      NTL::Vec<NTL::zz_p>::Init(long, NTL::zz_p const*) [10]
                0.00    0.00     100/1083230     NTL::Vec<NTL::zz_p>::AllocateTo(long) [158]
-----------------------------------------------
                                                 <spontaneous>
[149]    0.0    0.00    0.00                 NTL::MinPolyMod(NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pXModulus const&, long) [149]
                0.00    0.00     100/578006      NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
-----------------------------------------------
[150]    0.0    0.00    0.00   10300+1200    <cycle 1 as a whole> [150]
                0.00    0.00   10800             std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() <cycle 1> [180]
                0.00    0.00     700             std::_Sp_counted_ptr<TNode<NTL::zz_pX>*, (__gnu_cxx::_Lock_policy)2>::_M_dispose() <cycle 1> [245]
-----------------------------------------------
                0.00    0.00     100/1083230     NTL::FindRoots(NTL::Vec<NTL::zz_p>&, NTL::zz_pX const&) [148]
                0.00    0.00     200/1083230     NTL::EDF(NTL::Vec<NTL::zz_pX>&, NTL::zz_pX const&, NTL::zz_pX const&, long, long) [146]
                0.00    0.00     400/1083230     std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >::operator=(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) [140]
                0.00    0.00     400/1083230     NTL::Vec<NTL::zz_pX>::operator=(NTL::Vec<NTL::zz_pX> const&) [138]
                0.00    0.00     400/1083230     NTL::Vec<NTL::zz_pX>::append(NTL::zz_pX const&) [129]
                0.00    0.00     500/1083230     zz_pXModulus1::zz_pXModulus1(long, NTL::zz_pX const&) [133]
                0.00    0.00     700/1083230     NTL::Vec<NTL::zz_p>::Vec(NTL::Vec<NTL::zz_p> const&) [127]
                0.00    0.00     800/1083230     NTL::Vec<NTL::zz_pE>::operator=(NTL::Vec<NTL::zz_pE> const&) [125]
                0.00    0.00    2400/1083230     NTL::Vec<NTL::Vec<NTL::zz_p> >::Init(long, NTL::Vec<NTL::zz_p> const*) [106]
                0.00    0.00    4800/1083230     buildUnpackSlotEncoding(std::vector<NTL::Vec<long>, std::allocator<NTL::Vec<long> > >&, EncryptedArray const&) [29]
                0.00    0.00    4800/1083230     Cmodulus::operator=(Cmodulus const&) [231]
                0.00    0.00   14400/1083230     NTL::Vec<NTL::zz_pE>::Init(long, NTL::zz_pE const*) [87]
                0.00    0.00  475624/1083230     NTL::Vec<NTL::zz_p>::DoSetLength(long) [159]
                0.00    0.00  577706/1083230     NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [20]
[158]    0.0    0.00    0.00 1083230         NTL::Vec<NTL::zz_p>::AllocateTo(long) [158]
-----------------------------------------------
                0.00    0.00       1/475624      DoubleCRT::toPoly(NTL::ZZX&, IndexSet const&, bool) const [30]
                0.00    0.00       1/475624      Cmodulus::iFFT(NTL::zz_pX&, NTL::Vec<long> const&) const [80]
                0.00    0.00       1/475624      NTL::FromfftRep(NTL::zz_pX&, NTL::fftRep&, long, long) [918]
                0.00    0.00     100/475624      PAlgebraModDerived<PA_zz_p>::mapToFt(NTL::zz_pX&, NTL::zz_pX const&, unsigned long, NTL::zz_pX const*) const [135]
                0.00    0.00     100/475624      NTL::SetX(NTL::zz_pX&) [2174]
                0.00    0.00     100/475624      NTL::BerlekampMassey(NTL::zz_pX&, NTL::Vec<NTL::zz_p> const&, long) [102]
                0.00    0.00     100/475624      NTL::ProbMinPolyMod(NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pXModulus const&, long) [1272]
                0.00    0.00     100/475624      NTL::TraceMap(NTL::zz_pX&, NTL::zz_pX const&, long, NTL::zz_pXModulus const&, NTL::zz_pX const&) [145]
                0.00    0.00     100/475624      NTL::mul_aux(NTL::Vec<NTL::zz_pE>&, NTL::Vec<NTL::zz_pE> const&, NTL::Mat<NTL::zz_pE> const&) [3143]
                0.00    0.00     200/475624      PAlgebraModDerived<PA_zz_p>::genMaskTable() [147]
                0.00    0.00     200/475624      NTL::random(NTL::zz_pX&, long) [2589]
                0.00    0.00     300/475624      NTL::CompMod(NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pX const&, NTL::zz_pXModulus const&) [2616]
                0.00    0.00     300/475624      NTL::IrredPolyMod(NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pXModulus const&, long) [1139]
                0.00    0.00     300/475624      NTL::RecFindFactors(NTL::Vec<NTL::zz_pX>&, NTL::zz_pX const&, NTL::zz_pX const&, NTL::Vec<NTL::zz_p> const&, long, long) [3064]
                0.00    0.00     400/475624      NTL::negate(NTL::zz_pX&, NTL::zz_pX const&) [43]
                0.00    0.00     500/475624      NTL::add(NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pX const&) [1953]
                0.00    0.00     800/475624      NTL::SetCoeff(NTL::zz_pEX&, long) [2800]
                0.00    0.00     800/475624      NTL::ProjectPowers(NTL::Vec<NTL::zz_p>&, NTL::Vec<NTL::zz_p> const&, long, NTL::zz_pXNewArgument const&, NTL::zz_pXModulus const&) [142]
                0.00    0.00    1200/475624      NTL::mul(NTL::Vec<NTL::zz_p>&, NTL::Vec<NTL::zz_p> const&, NTL::Mat<NTL::zz_p> const&) [2061]
                0.00    0.00    1300/475624      NTL::mul(NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_p) [2089]
                0.00    0.00    1400/475624      NTL::SetCoeff(NTL::zz_pX&, long) [2797]
                0.00    0.00    1600/475624      NTL::PlainDivRem(NTL::zz_pX&, NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pX const&) [1024]
                0.00    0.00    1700/475624      PAlgebraModDerived<PA_zz_p>::CRT_reconstruct(NTL::zz_pX&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&) const [74]
                0.00    0.00    1800/475624      void convert<NTL::zz_pX, long>(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, std::vector<long, std::allocator<long> > const&) [256]
                0.00    0.00    1800/475624      PAlgebraModDerived<PA_zz_p>::embedInSlots(NTL::zz_pX&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&, MappingData<PA_zz_p> const&) const [62]
                0.00    0.00    1800/475624      NTL::PlainUpdateMap(NTL::Vec<NTL::zz_p>&, NTL::Vec<NTL::zz_p> const&, NTL::zz_pX const&, NTL::zz_pX const&) [118]
                0.00    0.00    2000/475624      BluesteinInit(long, NTL::zz_p const&, NTL::zz_pX&, NTL::Vec<unsigned long>&, NTL::fftRep&) [236]
                0.00    0.00    2101/475624      NTL::conv(NTL::Vec<NTL::zz_p>&, NTL::Vec<NTL::ZZ> const&) [42]
                0.00    0.00    3000/475624      NTL::PlainDiv(NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pX const&) [32]
                0.00    0.00    5200/475624      NTL::conv(NTL::zz_pX&, NTL::zz_p) [2230]
                0.00    0.00   18300/475624      NTL::VectorCopy(NTL::Vec<NTL::zz_p>&, NTL::Vec<NTL::zz_p> const&, long) [958]
                0.00    0.00   20400/475624      NTL::PlainRem(NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pX const&) [2]
                0.00    0.00   48544/475624      NTL::Vec<NTL::zz_p>::SetMaxLength(long) [1829]
                0.00    0.00   49500/475624      NTL::Vec<NTL::zz_p>::FixLength(long) [166]
                0.00    0.00   65300/475624      NTL::PlainMul(NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pX const&) [6]
                0.00    0.00  244276/475624      NTL::PlainSqr(NTL::zz_pX&, NTL::zz_pX const&) [15]
[159]    0.0    0.00    0.00  475624         NTL::Vec<NTL::zz_p>::DoSetLength(long) [159]
                0.00    0.00  475624/1083230     NTL::Vec<NTL::zz_p>::AllocateTo(long) [158]
-----------------------------------------------
                0.00    0.00     600/362400      Ctxt::findBaseSet(IndexSet&) const [250]
                0.00    0.00     600/362400      Ctxt::findBaseLevel() const [251]
                0.00    0.00     600/362400      Ctxt::modDownToLevel(long) [24]
                0.00    0.00     800/362400      buildModChain(FHEcontext&, long, long, long) [131]
                0.00    0.00     800/362400      Ctxt::modDownToSet(IndexSet const&) [23]
                0.00    0.00    1300/362400      DoubleCRT::Exp(long) [122]
                0.00    0.00    1600/362400      FHESecKey::Decrypt(NTL::ZZX&, Ctxt const&, NTL::ZZX&) const [78]
                0.00    0.00    2000/362400      DoubleCRT::operator=(DoubleCRT const&) [101]
                0.00    0.00    2000/362400      DoubleCRT::scaleDownToSet(IndexSet const&, long) [26]
                0.00    0.00    3700/362400      DoubleCRT::DoubleCRT(NTL::ZZX const&, FHEcontext const&, IndexSet const&) [60]
                0.00    0.00    4500/362400      DoubleCRT::addPrimesAndScale(IndexSet const&) [103]
                0.00    0.00    6800/362400      DoubleCRT::DoubleCRT(FHEcontext const&, IndexSet const&) [100]
                0.00    0.00    6900/362400      IndexSet::remove(long) [175]
                0.00    0.00    8700/362400      DoubleCRT::automorph(long) [96]
                0.00    0.00   10900/362400      IndexSet::remove(IndexSet const&) [187]
                0.00    0.00   11600/362400      FHEcontext::productOfPrimes(NTL::ZZ&, IndexSet const&) const [188]
                0.00    0.00   12500/362400      IndexSet::retain(IndexSet const&) [191]
                0.00    0.00   15300/362400      DoubleCRT::randomize(NTL::ZZ const*) [67]
                0.00    0.00   17500/362400      DoubleCRT& DoubleCRT::Op<DoubleCRT::SubFun>(DoubleCRT const&, DoubleCRT::SubFun, bool) [82]
                0.00    0.00   21200/362400      DoubleCRT::do_mul(DoubleCRT const&, bool) [31]
                0.00    0.00   23800/362400      DoubleCRT& DoubleCRT::Op<DoubleCRT::AddFun>(DoubleCRT const&, DoubleCRT::AddFun, bool) [73]
                0.00    0.00   26100/362400      MakeIndexVector(IndexSet const&, NTL::Vec<long>&) [186]
                0.00    0.00   31000/362400      DoubleCRT::DoubleCRT(FHEcontext const&) [84]
                0.00    0.00   41900/362400      DoubleCRT& DoubleCRT::Op<DoubleCRT::MulFun>(NTL::ZZ const&, DoubleCRT::MulFun) [81]
                0.00    0.00  109700/362400      IndexSet::contains(IndexSet const&) const [169]
[160]    0.0    0.00    0.00  362400         IndexSet::next(long) const [160]
-----------------------------------------------
                0.00    0.00     500/360800      FHEcontext::AddPrime(long, long, bool) [132]
                0.00    0.00     600/360800      Ctxt::findBaseSet(IndexSet&) const [250]
                0.00    0.00     600/360800      Ctxt::modDownToLevel(long) [24]
                0.00    0.00    1300/360800      DoubleCRT::Exp(long) [122]
                0.00    0.00    2100/360800      DoubleCRT::toPoly(NTL::ZZX&, IndexSet const&, bool) const [30]
                0.00    0.00    2700/360800      DoubleCRT::addPrimesAndScale(IndexSet const&) [103]
                0.00    0.00    3400/360800      DoubleCRT::DoubleCRT(FHEcontext const&, IndexSet const&) [100]
                0.00    0.00    4000/360800      DoubleCRT::operator=(DoubleCRT const&) [101]
                0.00    0.00    5500/360800      IndexSet::retain(IndexSet const&) [191]
                0.00    0.00    8700/360800      DoubleCRT::automorph(long) [96]
                0.00    0.00   15300/360800      DoubleCRT::randomize(NTL::ZZ const*) [67]
                0.00    0.00   15500/360800      DoubleCRT::DoubleCRT(FHEcontext const&) [84]
                0.00    0.00   24000/360800      DoubleCRT::FFT(NTL::ZZX const&, IndexSet const&) [19]
                0.00    0.00   35000/360800      DoubleCRT& DoubleCRT::Op<DoubleCRT::SubFun>(DoubleCRT const&, DoubleCRT::SubFun, bool) [82]
                0.00    0.00   41900/360800      DoubleCRT& DoubleCRT::Op<DoubleCRT::MulFun>(NTL::ZZ const&, DoubleCRT::MulFun) [81]
                0.00    0.00   42400/360800      DoubleCRT::do_mul(DoubleCRT const&, bool) [31]
                0.00    0.00   47600/360800      DoubleCRT& DoubleCRT::Op<DoubleCRT::AddFun>(DoubleCRT const&, DoubleCRT::AddFun, bool) [73]
                0.00    0.00  109700/360800      IndexSet::contains(IndexSet const&) const [169]
[161]    0.0    0.00    0.00  360800         void std::vector<Cmodulus, std::allocator<Cmodulus> >::emplace_back<Cmodulus>(Cmodulus&&) [161]
                0.00    0.00     100/1200        Cmodulus::operator=(Cmodulus const&) [231]
-----------------------------------------------
                0.00    0.00     600/307900      std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::operator=(std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&) [272]
                0.00    0.00    2000/307900      DoubleCRT::scaleDownToSet(IndexSet const&, long) [26]
                0.00    0.00    3700/307900      IndexSet::intervalConstructor(long, long) [199]
                0.00    0.00   10900/307900      std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&) [179]
                0.00    0.00   23300/307900      IndexSet::insert(long) [174]
                0.00    0.00  267400/307900      std::__detail::_Map_base<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](long const&) [33]
[162]    0.0    0.00    0.00  307900         std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned long, bool) [162]
-----------------------------------------------
                0.00    0.00     600/270400      Ctxt::findBaseLevel() const [251]
                0.00    0.00    1200/270400      Ctxt::findBaseSet(IndexSet&) const [250]
                0.00    0.00    1200/270400      Ctxt::modDownToLevel(long) [24]
                0.00    0.00    1300/270400      DoubleCRT::Exp(long) [122]
                0.00    0.00    2100/270400      DoubleCRT::toPoly(NTL::ZZX&, IndexSet const&, bool) const [30]
                0.00    0.00    3600/270400      DoubleCRT::addPrimesAndScale(IndexSet const&) [103]
                0.00    0.00    3700/270400      DoubleCRT::DoubleCRT(NTL::ZZX const&, FHEcontext const&, IndexSet const&) [60]
                0.00    0.00    4000/270400      DoubleCRT::operator=(DoubleCRT const&) [101]
                0.00    0.00    6800/270400      DoubleCRT::DoubleCRT(FHEcontext const&, IndexSet const&) [100]
                0.00    0.00    8700/270400      DoubleCRT::automorph(long) [96]
                0.00    0.00   15300/270400      DoubleCRT::randomize(NTL::ZZ const*) [67]
                0.00    0.00   24000/270400      DoubleCRT::FFT(NTL::ZZX const&, IndexSet const&) [19]
                0.00    0.00   31000/270400      DoubleCRT::DoubleCRT(FHEcontext const&) [84]
                0.00    0.00   35000/270400      DoubleCRT& DoubleCRT::Op<DoubleCRT::SubFun>(DoubleCRT const&, DoubleCRT::SubFun, bool) [82]
                0.00    0.00   41900/270400      DoubleCRT& DoubleCRT::Op<DoubleCRT::MulFun>(NTL::ZZ const&, DoubleCRT::MulFun) [81]
                0.00    0.00   42400/270400      DoubleCRT::do_mul(DoubleCRT const&, bool) [31]
                0.00    0.00   47600/270400      DoubleCRT& DoubleCRT::Op<DoubleCRT::AddFun>(DoubleCRT const&, DoubleCRT::AddFun, bool) [73]
[163]    0.0    0.00    0.00  270400         IndexSet::contains(long) const [163]
-----------------------------------------------
                0.00    0.00     100/250400      EncryptedArrayDerived<PA_zz_p>::decode(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, NTL::ZZX const&) const [107]
                0.00    0.00     200/250400      FHESecKey::Decrypt(NTL::ZZX&, Ctxt const&, NTL::ZZX&) const [78]
                0.00    0.00     200/250400      EncryptedArrayDerived<PA_zz_p>::buildLinPolyCoeffs(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) const [63]
                0.00    0.00     200/250400      buildUnpackSlotEncoding(std::vector<NTL::Vec<long>, std::allocator<NTL::Vec<long> > >&, EncryptedArray const&) [29]
                0.00    0.00     300/250400      Ctxt::operator*=(Ctxt const&) [8]
                0.00    0.00     400/250400      Ctxt::addCtxt(Ctxt const&, bool) [85]
                0.00    0.00     600/250400      Ctxt::modDownToSet(IndexSet const&) [23]
                0.00    0.00    1000/250400      FHEPubKey::Encrypt(Ctxt&, NTL::ZZX const&, long, bool) const [57]
                0.00    0.00    1500/250400      FHESecKey::GenKeySWmatrix(long, long, long, long, long) [5]
                0.00    0.00    1700/250400      PAlgebraModDerived<PA_zz_p>::CRT_reconstruct(NTL::zz_pX&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&) const [74]
                0.00    0.00    1800/250400      Ctxt::privateAssign(Ctxt const&) [239]
                0.00    0.00    2900/250400      PAlgebraModDerived<PA_zz_p>::embedInSlots(NTL::zz_pX&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&, MappingData<PA_zz_p> const&) const [62]
                0.00    0.00    3800/250400      DoubleCRT::DoubleCRT(NTL::ZZX const&, FHEcontext const&, IndexSet const&) [60]
                0.00    0.00    8400/250400      Cmodulus::iFFT(NTL::zz_pX&, NTL::Vec<long> const&) const [80]
                0.00    0.00    9000/250400      DoubleCRT::toPoly(NTL::ZZX&, IndexSet const&, bool) const [30]
                0.00    0.00   10800/250400      auto_timer::stop() [35]
                0.00    0.00   12400/250400      DoubleCRT::do_mul(DoubleCRT const&, bool) [31]
                0.00    0.00   13200/250400      DoubleCRT::FFT(NTL::ZZX const&, IndexSet const&) [19]
                0.00    0.00   33700/250400      DoubleCRT::randomize(NTL::ZZ const*) [67]
                0.00    0.00   52200/250400      BluesteinFFT(NTL::zz_pX&, long, NTL::zz_p const&, NTL::zz_pX const&, NTL::Vec<unsigned long> const&, NTL::fftRep const&) [11]
                0.00    0.00   96000/250400      Cmodulus::FFT(NTL::Vec<long>&, NTL::ZZX const&) const [21]
[164]    0.0    0.00    0.00  250400         GetTimerClock() [164]
-----------------------------------------------
                0.00    0.00     100/72400       RLWE(DoubleCRT&, DoubleCRT&, DoubleCRT const&, long, NTL::ZZ*) [90]
                0.00    0.00     300/72400       DoubleCRT::operator=(DoubleCRT const&) [101]
                0.00    0.00     500/72400       DoubleCRT& DoubleCRT::Op<DoubleCRT::AddFun>(NTL::ZZX const&, DoubleCRT::AddFun) [79]
                0.00    0.00     500/72400       FHEPubKey::Encrypt(Ctxt&, NTL::ZZX const&, long, bool) const [57]
                0.00    0.00     500/72400       FHESecKey::Decrypt(NTL::ZZX&, Ctxt const&, NTL::ZZX&) const [78]
                0.00    0.00     700/72400       Ctxt::tensorProduct(Ctxt const&, Ctxt const&) [66]
                0.00    0.00     700/72400       std::vector<CtxtPart, std::allocator<CtxtPart> >::operator=(std::vector<CtxtPart, std::allocator<CtxtPart> > const&) [240]
                0.00    0.00    1300/72400       void std::vector<CtxtPart, std::allocator<CtxtPart> >::_M_emplace_back_aux<CtxtPart>(CtxtPart&&) [238]
                0.00    0.00    1400/72400       DoubleCRT& DoubleCRT::Op<DoubleCRT::SubFun>(NTL::ZZX const&, DoubleCRT::SubFun) [61]
                0.00    0.00    3000/72400       RLWE1(DoubleCRT&, DoubleCRT const&, DoubleCRT const&, long) [25]
                0.00    0.00    3000/72400       void std::vector<KeySwitch, std::allocator<KeySwitch> >::_M_emplace_back_aux<KeySwitch const&>(KeySwitch const&) [259]
                0.00    0.00    4500/72400       DoubleCRT& DoubleCRT::Op<DoubleCRT::SubFun>(DoubleCRT const&, DoubleCRT::SubFun, bool) [82]
                0.00    0.00    6000/72400       FHESecKey::GenKeySWmatrix(long, long, long, long, long) [5]
                0.00    0.00    6200/72400       DoubleCRT::do_mul(DoubleCRT const&, bool) [31]
                0.00    0.00    6600/72400       DoubleCRT& DoubleCRT::Op<DoubleCRT::AddFun>(DoubleCRT const&, DoubleCRT::AddFun, bool) [73]
                0.00    0.00   37100/72400       cloned_ptr<IndexMapInit<NTL::Vec<long> >, deep_clone<IndexMapInit<NTL::Vec<long> > > >::~cloned_ptr() [39]
[165]    0.0    0.00    0.00   72400         DoubleCRTHelper::~DoubleCRTHelper() [165]
-----------------------------------------------
                0.00    0.00   49500/49500       void NTL::Vec<NTL::Vec<NTL::zz_p> >::DoSetLengthAndApply<NTL::Mat<NTL::zz_p>::Fixer>(long, NTL::Mat<NTL::zz_p>::Fixer&) [184]
[166]    0.0    0.00    0.00   49500         NTL::Vec<NTL::zz_p>::FixLength(long) [166]
                0.00    0.00   49500/475624      NTL::Vec<NTL::zz_p>::DoSetLength(long) [159]
-----------------------------------------------
                0.00    0.00       1/38210       NTL::mul(NTL::Vec<NTL::zz_p>&, NTL::Vec<NTL::zz_p> const&, NTL::Mat<NTL::zz_p> const&) [2061]
                0.00    0.00       3/38210       MakeIndexVector(IndexSet const&, NTL::Vec<long>&) [186]
                0.00    0.00     100/38210       DoubleCRT::toPoly(NTL::ZZX&, IndexSet const&, bool) const [30]
                0.00    0.00     100/38210       NTL::basic_inv(NTL::zz_p&, NTL::Mat<NTL::zz_p>&, NTL::Mat<NTL::zz_p> const&, bool) [47]
                0.00    0.00     100/38210       NTL::basic_tri(NTL::zz_p&, NTL::Mat<NTL::zz_p> const&, NTL::Vec<NTL::zz_p> const*, NTL::Vec<NTL::zz_p>*, bool, bool) [3160]
                0.00    0.00     100/38210       NTL::inv(NTL::zz_pE&, NTL::Mat<NTL::zz_pE>&, NTL::Mat<NTL::zz_pE> const&) [92]
                0.00    0.00    1200/38210       convert(NTL::Vec<long>&, NTL::zz_pX const&) [228]
                0.00    0.00    1506/38210       NTL::InitFFTPrimeInfo(NTL::FFTPrimeInfo&, long, long, long) [1468]
                0.00    0.00    2400/38210       void NTL::conv<NTL::Vec<long>, NTL::Vec<NTL::zz_p> >(NTL::Vec<NTL::Vec<long> >&, NTL::Vec<NTL::Vec<NTL::zz_p> > const&) [285]
                0.00    0.00    2800/38210       NTL::mul_strassen(NTL::mat_window_zz_p const&, NTL::const_mat_window_zz_p const&, NTL::const_mat_window_zz_p const&) [1173]
                0.00    0.00    4000/38210       NTL::LazyPrecompFFTMultipliers(long, long, NTL::sp_inverse, long const*, NTL::LazyTable<NTL::FFTVectorPair, 26l> const&) [3088]
                0.00    0.00   25900/38210       NTL::Vec<long>::FixLength(long) [171]
[167]    0.0    0.00    0.00   38210         NTL::Vec<long>::DoSetLength(long) [167]
-----------------------------------------------
                0.00    0.00   33600/33600       deep_clone<IndexMapInit<NTL::Vec<long> > >::apply(IndexMapInit<NTL::Vec<long> > const*) [695]
[168]    0.0    0.00    0.00   33600         DoubleCRTHelper::clone() const [168]
-----------------------------------------------
                0.00    0.00    9000/31500       DoubleCRT& DoubleCRT::Op<DoubleCRT::SubFun>(DoubleCRT const&, DoubleCRT::SubFun, bool) [82]
                0.00    0.00    9300/31500       DoubleCRT::do_mul(DoubleCRT const&, bool) [31]
                0.00    0.00   13200/31500       DoubleCRT& DoubleCRT::Op<DoubleCRT::AddFun>(DoubleCRT const&, DoubleCRT::AddFun, bool) [73]
[169]    0.0    0.00    0.00   31500         IndexSet::contains(IndexSet const&) const [169]
                0.00    0.00  109700/360800      void std::vector<Cmodulus, std::allocator<Cmodulus> >::emplace_back<Cmodulus>(Cmodulus&&) [161]
                0.00    0.00  109700/362400      IndexSet::next(long) const [160]
-----------------------------------------------
                0.00    0.00     100/28600       EncryptedArrayDerived<PA_zz_p>::decode(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, NTL::ZZX const&) const [107]
                0.00    0.00     100/28600       PAlgebraModDerived<PA_zz_p>::~PAlgebraModDerived() [308]
                0.00    0.00     100/28600       PAlgebraModDerived<PA_zz_p>::genMaskTable() [147]
                0.00    0.00     200/28600       NTL::MakeSmartAux<NTL::zz_pEInfoT>::~MakeSmartAux() [276]
                0.00    0.00     200/28600       buildEncryptedArray(FHEcontext const&, NTL::ZZX const&, PAlgebraMod const&) [116]
                0.00    0.00     200/28600       EncryptedArrayDerived<PA_zz_p>::~EncryptedArrayDerived() [275]
                0.00    0.00     200/28600       EDF(NTL::Vec<NTL::zz_pX>&, NTL::zz_pX const&, long) [299]
                0.00    0.00     300/28600       PAlgebraModDerived<PA_zz_p>::buildTree(std::shared_ptr<TNode<NTL::zz_pX> >&, long, long) const [128]
                0.00    0.00     500/28600       EncryptedArrayDerived<PA_zz_p>::encode(NTL::ZZX&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) const [83]
                0.00    0.00     600/28600       EncryptedArrayDerived<PA_zz_p>::initNormalBasisMatrix() const [70]
                0.00    0.00     600/28600       PAlgebraModDerived<PA_zz_p>::PAlgebraModDerived(PAlgebra const&, long) [112]
                0.00    0.00     700/28600       std::_Sp_counted_ptr<TNode<NTL::zz_pX>*, (__gnu_cxx::_Lock_policy)2>::_M_dispose() <cycle 1> [245]
                0.00    0.00    1200/28600       EncryptedArrayDerived<PA_zz_p>::encode(NTL::Vec<long>&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) const [68]
                0.00    0.00    1600/28600       PAlgebraModDerived<PA_zz_p>::mapToSlots(MappingData<PA_zz_p>&, NTL::zz_pX const&) const [115]
                0.00    0.00    1800/28600       PAlgebraModDerived<PA_zz_p>::mapToFt(NTL::zz_pX&, NTL::zz_pX const&, unsigned long, NTL::zz_pX const*) const [135]
                0.00    0.00    2400/28600       PAlgebraModDerived<PA_zz_p>::embedInSlots(NTL::zz_pX&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&, MappingData<PA_zz_p> const&) const [62]
                0.00    0.00    3400/28600       PAlgebraModDerived<PA_zz_p>::CRT_reconstruct(NTL::zz_pX&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&) const [74]
                0.00    0.00   14400/28600       PAlgebraModDerived<PA_zz_p>::evalTree(NTL::zz_pX&, std::shared_ptr<TNode<NTL::zz_pX> >, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&, long, long) const [98]
[170]    0.0    0.00    0.00   28600         NTL::Vec<NTL::zz_p>::~Vec() [170]
-----------------------------------------------
                0.00    0.00     900/25900       DoubleCRT::addPrimesAndScale(IndexSet const&) [103]
                0.00    0.00    2400/25900       void NTL::Vec<NTL::Vec<long> >::DoSetLengthAndApply<NTL::Mat<long>::Fixer>(long, NTL::Mat<long>::Fixer&) [280]
                0.00    0.00    3400/25900       DoubleCRT::DoubleCRT(FHEcontext const&, IndexSet const&) [100]
                0.00    0.00    3700/25900       DoubleCRT::DoubleCRT(NTL::ZZX const&, FHEcontext const&, IndexSet const&) [60]
                0.00    0.00   15500/25900       DoubleCRT::DoubleCRT(FHEcontext const&) [84]
[171]    0.0    0.00    0.00   25900         NTL::Vec<long>::FixLength(long) [171]
                0.00    0.00   25900/38210       NTL::Vec<long>::DoSetLength(long) [167]
-----------------------------------------------
                0.00    0.00     100/25586       PAlgebraModDerived<PA_zz_p>::PAlgebraModDerived(PAlgebra const&, long) [112]
                0.00    0.00     786/25586       NTL::GCD(NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pX const&) [121]
                0.00    0.00    1600/25586       NTL::XGCD(NTL::zz_pX&, NTL::zz_pX&, NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pX const&) [99]
                0.00    0.00    5000/25586       NTL::build(NTL::zz_pXNewArgument&, NTL::zz_pX const&, NTL::zz_pXModulus const&, long) [2325]
                0.00    0.00   18100/25586       NTL::IterHalfGCD(NTL::zz_pXMatrix&, NTL::zz_pX&, NTL::zz_pX&, long) [72]
[172]    0.0    0.00    0.00   25586         NTL::Vec<NTL::Vec<NTL::zz_p> >::swap(NTL::Vec<NTL::Vec<NTL::zz_p> >&) [172]
-----------------------------------------------
                0.00    0.00   25200/25200       BluesteinFFT(NTL::zz_pX&, long, NTL::zz_p const&, NTL::zz_pX const&, NTL::Vec<unsigned long> const&, NTL::fftRep const&) [11]
[173]    0.0    0.00    0.00   25200         Cmodulus::getScratch_fftRep(long) [173]
-----------------------------------------------
                0.00    0.00     200/24500       buildModChain(FHEcontext&, long, long, long) [131]
                0.00    0.00     300/24500       IndexSet::insert(IndexSet const&) [260]
                0.00    0.00     500/24500       FHEcontext::AddPrime(long, long, bool) [132]
                0.00    0.00     900/24500       DoubleCRT::addPrimesAndScale(IndexSet const&) [103]
                0.00    0.00    3400/24500       DoubleCRT::DoubleCRT(FHEcontext const&, IndexSet const&) [100]
                0.00    0.00    3700/24500       DoubleCRT::DoubleCRT(NTL::ZZX const&, FHEcontext const&, IndexSet const&) [60]
                0.00    0.00   15500/24500       DoubleCRT::DoubleCRT(FHEcontext const&) [84]
[174]    0.0    0.00    0.00   24500         IndexSet::insert(long) [174]
                0.00    0.00   23300/307900      std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned long, bool) [162]
-----------------------------------------------
                0.00    0.00     800/19300       Ctxt::findBaseSet(IndexSet&) const [250]
                0.00    0.00    7600/19300       IndexSet::retain(IndexSet const&) [191]
                0.00    0.00   10900/19300       IndexSet::remove(IndexSet const&) [187]
[175]    0.0    0.00    0.00   19300         IndexSet::remove(long) [175]
                0.00    0.00    6900/362400      IndexSet::next(long) const [160]
                0.00    0.00    3900/4200        IndexSet::prev(long) const [196]
-----------------------------------------------
                0.00    0.00    4500/17300       DoubleCRT& DoubleCRT::Op<DoubleCRT::SubFun>(DoubleCRT const&, DoubleCRT::SubFun, bool) [82]
                0.00    0.00    6200/17300       DoubleCRT::do_mul(DoubleCRT const&, bool) [31]
                0.00    0.00    6600/17300       DoubleCRT& DoubleCRT::Op<DoubleCRT::AddFun>(DoubleCRT const&, DoubleCRT::AddFun, bool) [73]
[176]    0.0    0.00    0.00   17300         operator<=(IndexSet const&, IndexSet const&) [176]
-----------------------------------------------
                0.00    0.00    3100/14200       DoubleCRT::do_mul(DoubleCRT const&, bool) [31]
                0.00    0.00    4500/14200       DoubleCRT& DoubleCRT::Op<DoubleCRT::SubFun>(DoubleCRT const&, DoubleCRT::SubFun, bool) [82]
                0.00    0.00    6600/14200       DoubleCRT& DoubleCRT::Op<DoubleCRT::AddFun>(DoubleCRT const&, DoubleCRT::AddFun, bool) [73]
[177]    0.0    0.00    0.00   14200         operator>=(IndexSet const&, IndexSet const&) [177]
-----------------------------------------------
                0.00    0.00    1500/13600       DoubleCRT::toPoly(NTL::ZZX&, IndexSet const&, bool) const [30]
                0.00    0.00    1700/13600       NTL::Vec<NTL::ZZ>::operator=(NTL::Vec<NTL::ZZ> const&) [216]
                0.00    0.00   10400/13600       NTL::Vec<NTL::ZZ>::DoSetLength(long) [181]
[178]    0.0    0.00    0.00   13600         NTL::Vec<NTL::ZZ>::AllocateTo(long) [178]
-----------------------------------------------
                0.00    0.00   10900/10900       std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<long const, NTL::Vec<long> >, false>*) [34]
[179]    0.0    0.00    0.00   10900         std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&) [179]
                0.00    0.00   10900/307900      std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned long, bool) [162]
-----------------------------------------------
                                 600             std::_Sp_counted_ptr<TNode<NTL::zz_pX>*, (__gnu_cxx::_Lock_policy)2>::_M_dispose() <cycle 1> [245]
                0.00    0.00     600/10300       std::shared_ptr<TNode<NTL::zz_pX> > buildTNode<NTL::zz_pX>(std::shared_ptr<TNode<NTL::zz_pX> >, std::shared_ptr<TNode<NTL::zz_pX> >, NTL::zz_pX const&) [126]
                0.00    0.00    1200/10300       PAlgebraModDerived<PA_zz_p>::buildTree(std::shared_ptr<TNode<NTL::zz_pX> >&, long, long) const [128]
                0.00    0.00    1200/10300       PAlgebraModDerived<PA_zz_p>::CRT_reconstruct(NTL::zz_pX&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&) const [74]
                0.00    0.00    7200/10300       PAlgebraModDerived<PA_zz_p>::evalTree(NTL::zz_pX&, std::shared_ptr<TNode<NTL::zz_pX> >, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&, long, long) const [98]
[180]    0.0    0.00    0.00   10800         std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() <cycle 1> [180]
                                 600             std::_Sp_counted_ptr<TNode<NTL::zz_pX>*, (__gnu_cxx::_Lock_policy)2>::_M_dispose() <cycle 1> [245]
-----------------------------------------------
                0.00    0.00     100/10400       sampleHWt(NTL::ZZX&, long, long) [305]
                0.00    0.00     200/10400       NTL::SetCoeff(NTL::ZZX&, long) [2784]
                0.00    0.00     200/10400       NTL::PlainPseudoDivRem(NTL::ZZX&, NTL::ZZX&, NTL::ZZX const&, NTL::ZZX const&) [1508]
                0.00    0.00     300/10400       MulMod(NTL::ZZX&, NTL::ZZX const&, long, long, bool) [247]
                0.00    0.00     300/10400       Cyclotomic(long) [298]
                0.00    0.00     800/10400       NTL::PlainMul(NTL::ZZX&, NTL::ZZX const&, NTL::ZZX const&) [2758]
                0.00    0.00     900/10400       NTL::conv(NTL::ZZX&, NTL::zz_pX const&) [2211]
                0.00    0.00    1200/10400       NTL::Vec<NTL::ZZ>::FixLength(long) [229]
                0.00    0.00    1200/10400       EncryptedArrayDerived<PA_zz_p>::initNormalBasisMatrix() const [70]
                0.00    0.00    5200/10400       NTL::Vec<NTL::ZZ>::SetMaxLength(long) [189]
[181]    0.0    0.00    0.00   10400         NTL::Vec<NTL::ZZ>::DoSetLength(long) [181]
                0.00    0.00   10400/13600       NTL::Vec<NTL::ZZ>::AllocateTo(long) [178]
-----------------------------------------------
                0.00    0.00     200/9800        NTL::Mat<NTL::zz_p>::Mat(NTL::Mat<NTL::zz_p> const&) [105]
                0.00    0.00    9600/9800        void NTL::Vec<NTL::Vec<NTL::zz_p> >::DoSetLengthAndApply<NTL::Mat<NTL::zz_p>::Fixer>(long, NTL::Mat<NTL::zz_p>::Fixer&) [184]
[182]    0.0    0.00    0.00    9800         NTL::Vec<NTL::Vec<NTL::zz_p> >::AllocateTo(long) [182]
-----------------------------------------------
                0.00    0.00     100/9600        void NTL::conv<NTL::zz_p, NTL::ZZ>(NTL::Mat<NTL::zz_p>&, NTL::Mat<NTL::ZZ> const&) [315]
                0.00    0.00     100/9600        EncryptedArrayDerived<PA_zz_p>::initNormalBasisMatrix() const [70]
                0.00    0.00     100/9600        NTL::basic_inv(NTL::zz_p&, NTL::Mat<NTL::zz_p>&, NTL::Mat<NTL::zz_p> const&, bool) [47]
                0.00    0.00     400/9600        NTL::ProjectPowers(NTL::Vec<NTL::zz_p>&, NTL::Vec<NTL::zz_p> const&, long, NTL::zz_pXNewArgument const&, NTL::zz_pXModulus const&) [142]
                0.00    0.00     400/9600        NTL::transpose(NTL::Mat<NTL::zz_p>&, NTL::Mat<NTL::zz_p> const&) [2971]
                0.00    0.00     800/9600        PAlgebraModDerived<PA_zz_p>::mapToSlots(MappingData<PA_zz_p>&, NTL::zz_pX const&) const [115]
                0.00    0.00    2400/9600        NTL::CompMod(NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pXNewArgument const&, NTL::zz_pXModulus const&) [110]
                0.00    0.00    2500/9600        NTL::build(NTL::zz_pXNewArgument&, NTL::zz_pX const&, NTL::zz_pXModulus const&, long) [2325]
                0.00    0.00    2800/9600        NTL::mul_aux(NTL::Mat<NTL::zz_p>&, NTL::Mat<NTL::zz_p> const&, NTL::Mat<NTL::zz_p> const&) [3132]
[183]    0.0    0.00    0.00    9600         NTL::Mat<NTL::zz_p>::SetDims(long, long) [183]
                0.00    0.00    9600/9600        void NTL::Vec<NTL::Vec<NTL::zz_p> >::DoSetLengthAndApply<NTL::Mat<NTL::zz_p>::Fixer>(long, NTL::Mat<NTL::zz_p>::Fixer&) [184]
-----------------------------------------------
                0.00    0.00    9600/9600        NTL::Mat<NTL::zz_p>::SetDims(long, long) [183]
[184]    0.0    0.00    0.00    9600         void NTL::Vec<NTL::Vec<NTL::zz_p> >::DoSetLengthAndApply<NTL::Mat<NTL::zz_p>::Fixer>(long, NTL::Mat<NTL::zz_p>::Fixer&) [184]
                0.00    0.00   49500/49500       NTL::Vec<NTL::zz_p>::FixLength(long) [166]
                0.00    0.00    9600/9800        NTL::Vec<NTL::Vec<NTL::zz_p> >::AllocateTo(long) [182]
-----------------------------------------------
                0.00    0.00       2/8304        DoubleCRT::toPoly(NTL::ZZX&, IndexSet const&, bool) const [30]
                0.00    0.00     400/8304        NTL::zz_pInfoT::zz_pInfoT(long, long) [2975]
                0.00    0.00    1000/8304        BluesteinInit(long, NTL::zz_p const&, NTL::zz_pX&, NTL::Vec<unsigned long>&, NTL::fftRep&) [236]
                0.00    0.00    2400/8304        NTL::Vec<unsigned long>::operator=(NTL::Vec<unsigned long> const&) [211]
                0.00    0.00    4502/8304        NTL::Vec<unsigned long>::DoSetLength(long) [1914]
[185]    0.0    0.00    0.00    8304         NTL::Vec<unsigned long>::AllocateTo(long) [185]
-----------------------------------------------
                0.00    0.00    1500/8100        DoubleCRT::toPoly(NTL::ZZX&, IndexSet const&, bool) const [30]
                0.00    0.00    6600/8100        DoubleCRT::FFT(NTL::ZZX const&, IndexSet const&) [19]
[186]    0.0    0.00    0.00    8100         MakeIndexVector(IndexSet const&, NTL::Vec<long>&) [186]
                0.00    0.00   26100/362400      IndexSet::next(long) const [160]
                0.00    0.00       3/38210       NTL::Vec<long>::DoSetLength(long) [167]
-----------------------------------------------
                0.00    0.00     400/7500        FHESecKey::Decrypt(NTL::ZZX&, Ctxt const&, NTL::ZZX&) const [78]
                0.00    0.00     600/7500        Ctxt::modDownToSet(IndexSet const&) [23]
                0.00    0.00    1400/7500        DoubleCRT::scaleDownToSet(IndexSet const&, long) [26]
                0.00    0.00    5100/7500        operator/(IndexSet const&, IndexSet const&) [193]
[187]    0.0    0.00    0.00    7500         IndexSet::remove(IndexSet const&) [187]
                0.00    0.00   10900/362400      IndexSet::next(long) const [160]
                0.00    0.00   10900/19300       IndexSet::remove(long) [175]
-----------------------------------------------
                0.00    0.00     100/6800        FHESecKey::Decrypt(NTL::ZZX&, Ctxt const&, NTL::ZZX&) const [78]
                0.00    0.00     300/6800        Ctxt::tensorProduct(Ctxt const&, Ctxt const&) [66]
                0.00    0.00     500/6800        FHEPubKey::Encrypt(Ctxt&, NTL::ZZX const&, long, bool) const [57]
                0.00    0.00    1400/6800        DoubleCRT::scaleDownToSet(IndexSet const&, long) [26]
                0.00    0.00    4500/6800        FHESecKey::GenKeySWmatrix(long, long, long, long, long) [5]
[188]    0.0    0.00    0.00    6800         FHEcontext::productOfPrimes(NTL::ZZ&, IndexSet const&) const [188]
                0.00    0.00   11600/362400      IndexSet::next(long) const [160]
-----------------------------------------------
                0.00    0.00     100/5400        PolyRed(NTL::ZZX&, NTL::ZZX const&, long, bool) [300]
                0.00    0.00     100/5400        sampleHWt(NTL::ZZX&, long, long) [305]
                0.00    0.00     500/5400        sampleSmall(NTL::ZZX&, long) [252]
                0.00    0.00     600/5400        MulMod(NTL::ZZX&, NTL::ZZX const&, long, long, bool) [247]
                0.00    0.00    4100/5400        sampleGaussian(NTL::ZZX&, long, double) [197]
[189]    0.0    0.00    0.00    5400         NTL::Vec<NTL::ZZ>::SetMaxLength(long) [189]
                0.00    0.00    5200/10400       NTL::Vec<NTL::ZZ>::DoSetLength(long) [181]
-----------------------------------------------
                0.00    0.00     300/5100        NTL::BuildFromRoots(NTL::zz_pX&, NTL::Vec<NTL::zz_p> const&) [144]
                0.00    0.00    4800/5100        NTL::mul(NTL::Vec<NTL::zz_p>&, NTL::Vec<NTL::zz_p> const&, NTL::Mat<NTL::zz_p> const&) [2061]
[190]    0.0    0.00    0.00    5100         NTL::Vec<NTL::zz_p>::SetLength(long) [190]
-----------------------------------------------
                0.00    0.00    5100/5100        operator&(IndexSet const&, IndexSet const&) [192]
[191]    0.0    0.00    0.00    5100         IndexSet::retain(IndexSet const&) [191]
                0.00    0.00   12500/362400      IndexSet::next(long) const [160]
                0.00    0.00    7600/19300       IndexSet::remove(long) [175]
                0.00    0.00    5500/360800      void std::vector<Cmodulus, std::allocator<Cmodulus> >::emplace_back<Cmodulus>(Cmodulus&&) [161]
-----------------------------------------------
                0.00    0.00     600/5100        Ctxt::modDownToSet(IndexSet const&) [23]
                0.00    0.00     600/5100        Ctxt::modDownToLevel(long) [24]
                0.00    0.00     900/5100        DoubleCRT::addPrimesAndScale(IndexSet const&) [103]
                0.00    0.00    1500/5100        DoubleCRT::toPoly(NTL::ZZX&, IndexSet const&, bool) const [30]
                0.00    0.00    1500/5100        Ctxt::verifyPrimeSet() const [221]
[192]    0.0    0.00    0.00    5100         operator&(IndexSet const&, IndexSet const&) [192]
                0.00    0.00    5100/5100        IndexSet::retain(IndexSet const&) [191]
-----------------------------------------------
                0.00    0.00     100/5100        buildModChain(FHEcontext&, long, long, long) [131]
                0.00    0.00     300/5100        Ctxt::modUpToSet(IndexSet const&) [104]
                0.00    0.00     400/5100        FHESecKey::Decrypt(NTL::ZZX&, Ctxt const&, NTL::ZZX&) const [78]
                0.00    0.00     600/5100        Ctxt::modDownToSet(IndexSet const&) [23]
                0.00    0.00     800/5100        Ctxt::addCtxt(Ctxt const&, bool) [85]
                0.00    0.00    1400/5100        DoubleCRT::scaleDownToSet(IndexSet const&, long) [26]
                0.00    0.00    1500/5100        Ctxt::verifyPrimeSet() const [221]
[193]    0.0    0.00    0.00    5100         operator/(IndexSet const&, IndexSet const&) [193]
                0.00    0.00    5100/7500        IndexSet::remove(IndexSet const&) [187]
-----------------------------------------------
                0.00    0.00     100/4600        EncryptedArrayDerived<PA_zz_p>::buildLinPolyCoeffs(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) const [63]
                0.00    0.00     400/4600        NTL::Vec<NTL::zz_pE>::operator=(NTL::Vec<NTL::zz_pE> const&) [125]
                0.00    0.00    1200/4600        NTL::Mat<NTL::zz_pE>::Mat(NTL::Mat<NTL::zz_pE> const&) [88]
                0.00    0.00    2900/4600        NTL::Vec<NTL::zz_pE>::DoSetLength(long) [207]
[194]    0.0    0.00    0.00    4600         NTL::Vec<NTL::zz_pE>::AllocateTo(long) [194]
-----------------------------------------------
                0.00    0.00     300/4400        Ctxt::operator*=(Ctxt const&) [8]
                0.00    0.00     400/4400        FHEcontext::operator==(FHEcontext const&) const [317]
                0.00    0.00     600/4400        Ctxt::modDownToSet(IndexSet const&) [23]
                0.00    0.00    1400/4400        DoubleCRT::scaleDownToSet(IndexSet const&, long) [26]
                0.00    0.00    1700/4400        DoubleCRT::operator=(DoubleCRT const&) [101]
[195]    0.0    0.00    0.00    4400         IndexSet::operator==(IndexSet const&) const [195]
-----------------------------------------------
                0.00    0.00     300/4200        IndexSet::insert(IndexSet const&) [260]
                0.00    0.00    3900/4200        IndexSet::remove(long) [175]
[196]    0.0    0.00    0.00    4200         IndexSet::prev(long) const [196]
-----------------------------------------------
                0.00    0.00     100/4100        RLWE(DoubleCRT&, DoubleCRT&, DoubleCRT const&, long, NTL::ZZ*) [90]
                0.00    0.00    1000/4100        FHEPubKey::Encrypt(Ctxt&, NTL::ZZX const&, long, bool) const [57]
                0.00    0.00    3000/4100        RLWE1(DoubleCRT&, DoubleCRT const&, DoubleCRT const&, long) [25]
[197]    0.0    0.00    0.00    4100         sampleGaussian(NTL::ZZX&, long, double) [197]
                0.00    0.00    4100/5400        NTL::Vec<NTL::ZZ>::SetMaxLength(long) [189]
-----------------------------------------------
                0.00    0.00     100/3900        EncryptedArrayDerived<PA_zz_p>::decrypt(Ctxt const&, FHESecKey const&, std::vector<long, std::allocator<long> >&) const [75]
                0.00    0.00     100/3900        PAlgebraModDerived<PA_zz_p>::~PAlgebraModDerived() [308]
                0.00    0.00     100/3900        PAlgebraModDerived<PA_zz_p>::decodePlaintext(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, NTL::zz_pX const&, MappingData<PA_zz_p> const&) const [139]
                0.00    0.00     200/3900        EncryptedArrayDerived<PA_zz_p>::~EncryptedArrayDerived() [275]
                0.00    0.00     500/3900        EncryptedArrayDerived<PA_zz_p>::encrypt(Ctxt&, FHEPubKey const&, std::vector<long, std::allocator<long> > const&) const [55]
                0.00    0.00    1200/3900        PAlgebraModDerived<PA_zz_p>::CRT_reconstruct(NTL::zz_pX&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&) const [74]
                0.00    0.00    1700/3900        PAlgebraModDerived<PA_zz_p>::embedInSlots(NTL::zz_pX&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&, MappingData<PA_zz_p> const&) const [62]
[198]    0.0    0.00    0.00    3900         std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >::~vector() [198]
-----------------------------------------------
                0.00    0.00     600/3700        Ctxt::modDownToLevel(long) [24]
                0.00    0.00    3100/3700        DoubleCRT::DoubleCRT(FHEcontext const&) [84]
[199]    0.0    0.00    0.00    3700         IndexSet::intervalConstructor(long, long) [199]
                0.00    0.00    3700/307900      std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned long, bool) [162]
-----------------------------------------------
                0.00    0.00     500/3300        void factorT<long>(std::vector<long, std::allocator<long> >&, long const&) [257]
                0.00    0.00     800/3300        mobius(long) [241]
                0.00    0.00    2000/3300        void FindPrimRootT<NTL::zz_p, long>(NTL::zz_p&, unsigned long) [254]
[200]    0.0    0.00    0.00    3300         NTL::Vec<char>::~Vec() [200]
-----------------------------------------------
                0.00    0.00    3100/3100        DoubleCRT::randomize(NTL::ZZ const*) [67]
[201]    0.0    0.00    0.00    3100         NTL::Vec<unsigned char>::~Vec() [201]
-----------------------------------------------
                0.00    0.00     600/3000        Ctxt::findBaseSet(IndexSet&) const [250]
                0.00    0.00    1200/3000        Ctxt::findBaseLevel() const [251]
                0.00    0.00    1200/3000        Ctxt::modDownToLevel(long) [24]
[202]    0.0    0.00    0.00    3000         card(IndexSet const&) [202]
-----------------------------------------------
                0.00    0.00    3000/3000        DoubleCRT::toPoly(NTL::ZZX&, IndexSet const&, bool) const [30]
[203]    0.0    0.00    0.00    3000         NTL::PartitionInfo::PartitionInfo(long, long) [203]
-----------------------------------------------
                0.00    0.00     100/3000        EncryptedArrayDerived<PA_zz_p>::buildLinPolyCoeffs(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) const [63]
                0.00    0.00    2900/3000        NTL::Vec<NTL::zz_pE>::DoSetLength(long) [207]
[204]    0.0    0.00    0.00    3000         NTL::Vec<NTL::Vec<NTL::zz_p> >::Init(long) [204]
-----------------------------------------------
                0.00    0.00    3000/3000        std::vector<DoubleCRT, std::allocator<DoubleCRT> >::resize(unsigned long, DoubleCRT const&) [206]
[205]    0.0    0.00    0.00    3000         std::vector<DoubleCRT, std::allocator<DoubleCRT> >::_M_fill_insert(__gnu_cxx::__normal_iterator<DoubleCRT*, std::vector<DoubleCRT, std::allocator<DoubleCRT> > >, unsigned long, DoubleCRT const&) [205]
-----------------------------------------------
                0.00    0.00    3000/3000        FHESecKey::GenKeySWmatrix(long, long, long, long, long) [5]
[206]    0.0    0.00    0.00    3000         std::vector<DoubleCRT, std::allocator<DoubleCRT> >::resize(unsigned long, DoubleCRT const&) [206]
                0.00    0.00    3000/3000        std::vector<DoubleCRT, std::allocator<DoubleCRT> >::_M_fill_insert(__gnu_cxx::__normal_iterator<DoubleCRT*, std::vector<DoubleCRT, std::allocator<DoubleCRT> > >, unsigned long, DoubleCRT const&) [205]
-----------------------------------------------
                0.00    0.00     100/2900        NTL::mul_aux(NTL::Vec<NTL::zz_pE>&, NTL::Vec<NTL::zz_pE> const&, NTL::Mat<NTL::zz_pE> const&) [3143]
                0.00    0.00     400/2900        NTL::SetCoeff(NTL::zz_pEX&, long) [2800]
                0.00    0.00    2400/2900        NTL::Vec<NTL::zz_pE>::FixLength(long) [210]
[207]    0.0    0.00    0.00    2900         NTL::Vec<NTL::zz_pE>::DoSetLength(long) [207]
                0.00    0.00    2900/4600        NTL::Vec<NTL::zz_pE>::AllocateTo(long) [194]
                0.00    0.00    2900/3000        NTL::Vec<NTL::Vec<NTL::zz_p> >::Init(long) [204]
-----------------------------------------------
                0.00    0.00       1/2401        DoubleCRT::toPoly(NTL::ZZX&, IndexSet const&, bool) const [30]
                0.00    0.00     100/2401        NTL::Vec<NTL::zz_pX>::operator=(NTL::Vec<NTL::zz_pX> const&) [138]
                0.00    0.00     100/2401        PAlgebraModDerived<PA_zz_p>::PAlgebraModDerived(PAlgebra const&, long) [112]
                0.00    0.00     800/2401        NTL::Vec<NTL::zz_pX>::append(NTL::zz_pX const&) [129]
                0.00    0.00    1400/2401        NTL::Vec<NTL::zz_pX>::DoSetLength(long) [225]
[208]    0.0    0.00    0.00    2401         NTL::Vec<NTL::zz_pX>::AllocateTo(long) [208]
-----------------------------------------------
                0.00    0.00    2400/2400        NTL::Mat<NTL::zz_p>::Mat(NTL::Mat<NTL::zz_p> const&) [105]
[209]    0.0    0.00    0.00    2400         NTL::Vec<NTL::zz_p>::FixAtCurrentLength() [209]
-----------------------------------------------
                0.00    0.00    2400/2400        void NTL::Vec<NTL::Vec<NTL::zz_pE> >::DoSetLengthAndApply<NTL::Mat<NTL::zz_pE>::Fixer>(long, NTL::Mat<NTL::zz_pE>::Fixer&) [279]
[210]    0.0    0.00    0.00    2400         NTL::Vec<NTL::zz_pE>::FixLength(long) [210]
                0.00    0.00    2400/2900        NTL::Vec<NTL::zz_pE>::DoSetLength(long) [207]
-----------------------------------------------
                0.00    0.00    2400/2400        Cmodulus::operator=(Cmodulus const&) [231]
[211]    0.0    0.00    0.00    2400         NTL::Vec<unsigned long>::operator=(NTL::Vec<unsigned long> const&) [211]
                0.00    0.00    2400/8304        NTL::Vec<unsigned long>::AllocateTo(long) [185]
-----------------------------------------------
                0.00    0.00     100/2400        std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >::operator=(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) [140]
                0.00    0.00    2300/2400        std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >::_M_default_append(unsigned long) [214]
[212]    0.0    0.00    0.00    2400         std::vector<CtxtPart, std::allocator<CtxtPart> >::_M_fill_insert(__gnu_cxx::__normal_iterator<CtxtPart*, std::vector<CtxtPart, std::allocator<CtxtPart> > >, unsigned long, CtxtPart const&) [212]
-----------------------------------------------
                0.00    0.00    2300/2300        std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >::_M_default_append(unsigned long) [214]
[213]    0.0    0.00    0.00    2300         NTL::zz_pX* std::__uninitialized_copy<false>::__uninit_copy<NTL::zz_pX*, NTL::zz_pX*>(NTL::zz_pX*, NTL::zz_pX*, NTL::zz_pX*) [213]
-----------------------------------------------
                0.00    0.00     100/2300        EncryptedArrayDerived<PA_zz_p>::buildLinPolyCoeffs(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) const [63]
                0.00    0.00     100/2300        PAlgebraModDerived<PA_zz_p>::genCrtTable() [123]
                0.00    0.00     200/2300        PAlgebraModDerived<PA_zz_p>::genMaskTable() [147]
                0.00    0.00     200/2300        PAlgebraModDerived<PA_zz_p>::mapToSlots(MappingData<PA_zz_p>&, NTL::zz_pX const&) const [115]
                0.00    0.00     500/2300        void convert<NTL::zz_pX, long>(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, std::vector<long, std::allocator<long> > const&) [256]
                0.00    0.00    1200/2300        PAlgebraModDerived<PA_zz_p>::CRT_reconstruct(NTL::zz_pX&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&) const [74]
[214]    0.0    0.00    0.00    2300         std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >::_M_default_append(unsigned long) [214]
                0.00    0.00    2300/2400        std::vector<CtxtPart, std::allocator<CtxtPart> >::_M_fill_insert(__gnu_cxx::__normal_iterator<CtxtPart*, std::vector<CtxtPart, std::allocator<CtxtPart> > >, unsigned long, CtxtPart const&) [212]
                0.00    0.00    2300/2300        NTL::zz_pX* std::__uninitialized_copy<false>::__uninit_copy<NTL::zz_pX*, NTL::zz_pX*>(NTL::zz_pX*, NTL::zz_pX*, NTL::zz_pX*) [213]
-----------------------------------------------
                0.00    0.00    2100/2100        Cmodulus::iFFT(NTL::zz_pX&, NTL::Vec<long> const&) const [80]
[215]    0.0    0.00    0.00    2100         rem(NTL::zz_pX&, NTL::zz_pX const&, zz_pXModulus1 const&) [215]
-----------------------------------------------
                0.00    0.00     100/1700        Cyclotomic(long) [298]
                0.00    0.00     100/1700        FHESecKey::Decrypt(NTL::ZZX&, Ctxt const&, NTL::ZZX&) const [78]
                0.00    0.00     100/1700        PAlgebra::PAlgebra(unsigned long, unsigned long, std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&) [316]
                0.00    0.00     100/1700        NTL::PlainPseudoDivRem(NTL::ZZX&, NTL::ZZX&, NTL::ZZX const&, NTL::ZZX const&) [1508]
                0.00    0.00     500/1700        EncryptedArrayDerived<PA_zz_p>::encode(NTL::ZZX&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) const [83]
                0.00    0.00     800/1700        NTL::PlainMul(NTL::ZZX&, NTL::ZZX const&, NTL::ZZX const&) [2758]
[216]    0.0    0.00    0.00    1700         NTL::Vec<NTL::ZZ>::operator=(NTL::Vec<NTL::ZZ> const&) [216]
                0.00    0.00    1700/13600       NTL::Vec<NTL::ZZ>::AllocateTo(long) [178]
                0.00    0.00    1400/1400        NTL::Vec<NTL::ZZ>::Init(long, NTL::ZZ const*) [224]
-----------------------------------------------
                0.00    0.00    1600/1600        FHESecKey::Decrypt(NTL::ZZX&, Ctxt const&, NTL::ZZX&) const [78]
[217]    0.0    0.00    0.00    1600         DoubleCRT& DoubleCRT::Op<DoubleCRT::MulFun>(NTL::ZZX const&, DoubleCRT::MulFun) [217]
-----------------------------------------------
                0.00    0.00     100/1600        FHESecKey::ImportSecKey(DoubleCRT const&, long, long, long) [65]
                0.00    0.00    1500/1600        void factorT<long>(std::vector<long, std::allocator<long> >&, long const&) [257]
[218]    0.0    0.00    0.00    1600         void std::vector<long, std::allocator<long> >::_M_emplace_back_aux<long const&>(long const&) [218]
-----------------------------------------------
                0.00    0.00     100/1500        PAlgebraModDerived<PA_zz_p>::PAlgebraModDerived(PAlgebra const&, long) [112]
                0.00    0.00    1400/1500        NTL::Vec<NTL::zz_pX>::DoSetLength(long) [225]
[219]    0.0    0.00    0.00    1500         NTL::Vec<NTL::zz_pX>::Init(long) [219]
-----------------------------------------------
                0.00    0.00    1500/1500        FHESecKey::GenKeySWmatrix(long, long, long, long, long) [5]
[220]    0.0    0.00    0.00    1500         KeySwitch::dummy() [220]
-----------------------------------------------
                0.00    0.00     300/1500        Ctxt::modUpToSet(IndexSet const&) [104]
                0.00    0.00     600/1500        Ctxt::findBaseSet(IndexSet&) const [250]
                0.00    0.00     600/1500        Ctxt::modDownToSet(IndexSet const&) [23]
[221]    0.0    0.00    0.00    1500         Ctxt::verifyPrimeSet() const [221]
                0.00    0.00    1500/5100        operator&(IndexSet const&, IndexSet const&) [192]
                0.00    0.00    1500/5100        operator/(IndexSet const&, IndexSet const&) [193]
-----------------------------------------------
                0.00    0.00    1500/1500        FHESecKey::GenKeySWmatrix(long, long, long, long, long) [5]
[222]    0.0    0.00    0.00    1500         FHEPubKey::getKeySWmatrix(SKHandle const&, long) const [222]
-----------------------------------------------
                0.00    0.00     100/1500        PAlgebraModDerived<PA_zz_p>::CRT_decompose(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, NTL::zz_pX const&) const [319]
                0.00    0.00     200/1500        PAlgebraModDerived<PA_zz_p>::mapToSlots(MappingData<PA_zz_p>&, NTL::zz_pX const&) const [115]
                0.00    0.00    1200/1500        PAlgebraModDerived<PA_zz_p>::CRT_reconstruct(NTL::zz_pX&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&) const [74]
[223]    0.0    0.00    0.00    1500         std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >::resize(unsigned long) [223]
-----------------------------------------------
                0.00    0.00    1400/1400        NTL::Vec<NTL::ZZ>::operator=(NTL::Vec<NTL::ZZ> const&) [216]
[224]    0.0    0.00    0.00    1400         NTL::Vec<NTL::ZZ>::Init(long, NTL::ZZ const*) [224]
-----------------------------------------------
                0.00    0.00     100/1400        NTL::FindFactors(NTL::Vec<NTL::zz_pX>&, NTL::zz_pX const&, NTL::zz_pX const&, NTL::Vec<NTL::zz_p> const&) [2997]
                0.00    0.00     100/1400        NTL::EDF(NTL::Vec<NTL::zz_pX>&, NTL::zz_pX const&, NTL::zz_pX const&, long, long) [146]
                0.00    0.00    1200/1400        NTL::inv(NTL::zz_pE&, NTL::Mat<NTL::zz_pE>&, NTL::Mat<NTL::zz_pE> const&) [92]
[225]    0.0    0.00    0.00    1400         NTL::Vec<NTL::zz_pX>::DoSetLength(long) [225]
                0.00    0.00    1400/2401        NTL::Vec<NTL::zz_pX>::AllocateTo(long) [208]
                0.00    0.00    1400/1500        NTL::Vec<NTL::zz_pX>::Init(long) [219]
-----------------------------------------------
                0.00    0.00     200/1400        FHEPubKey::FHEPubKey(FHEcontext const&) [3439]
                0.00    0.00     300/1400        Ctxt::operator*=(Ctxt const&) [8]
                0.00    0.00     400/1400        Ctxt::addCtxt(Ctxt const&, bool) [85]
                0.00    0.00     500/1400        SHEEP::ContextHElib_Fp<bool>::encrypt(std::vector<bool, std::allocator<bool> >) [3354]
[226]    0.0    0.00    0.00    1400         Ctxt::Ctxt(FHEPubKey const&, long) [226]
-----------------------------------------------
                0.00    0.00    1300/1300        add1Dmats4dim(FHESecKey&, long, long) [7]
[227]    0.0    0.00    0.00    1300         PAlgebra::genToPow(long, long) const [227]
-----------------------------------------------
                0.00    0.00    1200/1200        EncryptedArrayDerived<PA_zz_p>::encode(NTL::Vec<long>&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) const [68]
[228]    0.0    0.00    0.00    1200         convert(NTL::Vec<long>&, NTL::zz_pX const&) [228]
                0.00    0.00    1200/38210       NTL::Vec<long>::DoSetLength(long) [167]
-----------------------------------------------
                0.00    0.00    1200/1200        void NTL::Vec<NTL::Vec<NTL::ZZ> >::DoSetLengthAndApply<NTL::Mat<NTL::ZZ>::Fixer>(long, NTL::Mat<NTL::ZZ>::Fixer&) [311]
[229]    0.0    0.00    0.00    1200         NTL::Vec<NTL::ZZ>::FixLength(long) [229]
                0.00    0.00    1200/10400       NTL::Vec<NTL::ZZ>::DoSetLength(long) [181]
-----------------------------------------------
                0.00    0.00    1200/1200        Cmodulus::operator=(Cmodulus const&) [231]
[230]    0.0    0.00    0.00    1200         NTL::Lazy<NTL::Vec<NTL::zz_p>, NTL::DefaultDeleterPolicy>* NTL::MakeRaw<NTL::Lazy<NTL::Vec<NTL::zz_p>, NTL::DefaultDeleterPolicy>, NTL::Lazy<NTL::Vec<NTL::zz_p>, NTL::DefaultDeleterPolicy>&>(NTL::Lazy<NTL::Vec<NTL::zz_p>, NTL::DefaultDeleterPolicy>&) [230]
-----------------------------------------------
                0.00    0.00     100/1200        void std::vector<Cmodulus, std::allocator<Cmodulus> >::emplace_back<Cmodulus>(Cmodulus&&) [161]
                0.00    0.00    1100/1200        void std::vector<Cmodulus, std::allocator<Cmodulus> >::_M_emplace_back_aux<Cmodulus>(Cmodulus&&) [263]
[231]    0.0    0.00    0.00    1200         Cmodulus::operator=(Cmodulus const&) [231]
                0.00    0.00    4800/1083230     NTL::Vec<NTL::zz_p>::AllocateTo(long) [158]
                0.00    0.00    2400/2400        NTL::Vec<unsigned long>::operator=(NTL::Vec<unsigned long> const&) [211]
                0.00    0.00    1200/1200        NTL::Lazy<NTL::Vec<NTL::zz_p>, NTL::DefaultDeleterPolicy>* NTL::MakeRaw<NTL::Lazy<NTL::Vec<NTL::zz_p>, NTL::DefaultDeleterPolicy>, NTL::Lazy<NTL::Vec<NTL::zz_p>, NTL::DefaultDeleterPolicy>&>(NTL::Lazy<NTL::Vec<NTL::zz_p>, NTL::DefaultDeleterPolicy>&) [230]
-----------------------------------------------
                0.00    0.00     600/1200        Ctxt::findBaseSet(IndexSet&) const [250]
                0.00    0.00     600/1200        Ctxt::modDownToSet(IndexSet const&) [23]
[232]    0.0    0.00    0.00    1200         Ctxt::modSwitchAddedNoiseVar() const [232]
-----------------------------------------------
                0.00    0.00     600/1200        Ctxt::findBaseSet(IndexSet&) const [250]
                0.00    0.00     600/1200        Ctxt::modDownToLevel(long) [24]
[233]    0.0    0.00    0.00    1200         IndexSet::disjointFrom(IndexSet const&) const [233]
-----------------------------------------------
                0.00    0.00    1100/1100        PAlgebra::frobenuisPow(long) const [235]
[234]    0.0    0.00    0.00    1100         mcMod(long, long) [234]
-----------------------------------------------
                0.00    0.00    1100/1100        add1Dmats4dim(FHESecKey&, long, long) [7]
[235]    0.0    0.00    0.00    1100         PAlgebra::frobenuisPow(long) const [235]
                0.00    0.00    1100/1100        mcMod(long, long) [234]
-----------------------------------------------
                0.00    0.00    1000/1000        Cmodulus::Cmodulus(PAlgebra const&, long, long) [134]
[236]    0.0    0.00    0.00    1000         BluesteinInit(long, NTL::zz_p const&, NTL::zz_pX&, NTL::Vec<unsigned long>&, NTL::fftRep&) [236]
                0.00    0.00    2000/475624      NTL::Vec<NTL::zz_p>::DoSetLength(long) [159]
                0.00    0.00    1000/8304        NTL::Vec<unsigned long>::AllocateTo(long) [185]
-----------------------------------------------
                0.00    0.00    1000/1000        void std::vector<CtxtPart, std::allocator<CtxtPart> >::_M_emplace_back_aux<CtxtPart>(CtxtPart&&) [238]
[237]    0.0    0.00    0.00    1000         CtxtPart* std::__uninitialized_copy<false>::__uninit_copy<CtxtPart*, CtxtPart*>(CtxtPart*, CtxtPart*, CtxtPart*) [237]
-----------------------------------------------
                0.00    0.00    1000/1000        Ctxt::tensorProduct(Ctxt const&, Ctxt const&) [66]
[238]    0.0    0.00    0.00    1000         void std::vector<CtxtPart, std::allocator<CtxtPart> >::_M_emplace_back_aux<CtxtPart>(CtxtPart&&) [238]
                0.00    0.00    1300/72400       DoubleCRTHelper::~DoubleCRTHelper() [165]
                0.00    0.00    1000/1000        CtxtPart* std::__uninitialized_copy<false>::__uninit_copy<CtxtPart*, CtxtPart*>(CtxtPart*, CtxtPart*, CtxtPart*) [237]
-----------------------------------------------
                0.00    0.00     100/900         Ctxt::addCtxt(Ctxt const&, bool) [85]
                0.00    0.00     300/900         Ctxt::operator*=(Ctxt const&) [8]
                0.00    0.00     500/900         FHEPubKey::Encrypt(Ctxt&, NTL::ZZX const&, long, bool) const [57]
[239]    0.0    0.00    0.00     900         Ctxt::privateAssign(Ctxt const&) [239]
                0.00    0.00    1800/250400      GetTimerClock() [164]
                0.00    0.00     900/900         std::vector<CtxtPart, std::allocator<CtxtPart> >::operator=(std::vector<CtxtPart, std::allocator<CtxtPart> > const&) [240]
                0.00    0.00       1/27          registerTimer(FHEtimer*) [333]
-----------------------------------------------
                0.00    0.00     900/900         Ctxt::privateAssign(Ctxt const&) [239]
[240]    0.0    0.00    0.00     900         std::vector<CtxtPart, std::allocator<CtxtPart> >::operator=(std::vector<CtxtPart, std::allocator<CtxtPart> > const&) [240]
                0.00    0.00     700/72400       DoubleCRTHelper::~DoubleCRTHelper() [165]
-----------------------------------------------
                0.00    0.00     800/800         Cyclotomic(long) [298]
[241]    0.0    0.00    0.00     800         mobius(long) [241]
                0.00    0.00     800/3300        NTL::Vec<char>::~Vec() [200]
-----------------------------------------------
                0.00    0.00     100/800         std::vector<NTL::zz_pEX, std::allocator<NTL::zz_pEX> >::_M_default_append(unsigned long) [330]
                0.00    0.00     100/800         PAlgebraModDerived<PA_zz_p>::PAlgebraModDerived(PAlgebra const&, long) [112]
                0.00    0.00     600/800         PAlgebra::PAlgebra(unsigned long, unsigned long, std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&) [316]
[242]    0.0    0.00    0.00     800         std::vector<unsigned long, std::allocator<unsigned long> >::_M_default_append(unsigned long) [242]
-----------------------------------------------
                0.00    0.00     100/700         PAlgebraModDerived<PA_zz_p>::PAlgebraModDerived(PAlgebra const&, long) [112]
                0.00    0.00     600/700         PAlgebraModDerived<PA_zz_p>::mapToFt(NTL::zz_pX&, NTL::zz_pX const&, unsigned long, NTL::zz_pX const*) const [135]
[243]    0.0    0.00    0.00     700         NTL::zz_pXModulus::~zz_pXModulus() [243]
-----------------------------------------------
                0.00    0.00     100/700         PAlgebraModDerived<PA_zz_p>::~PAlgebraModDerived() [308]
                0.00    0.00     600/700         std::_Sp_counted_ptr<TNode<NTL::zz_pX>*, (__gnu_cxx::_Lock_policy)2>::_M_dispose() <cycle 1> [245]
[244]    0.0    0.00    0.00     700         std::_Sp_counted_ptr<TNode<NTL::zz_pX>*, (__gnu_cxx::_Lock_policy)2>::_M_destroy() [244]
-----------------------------------------------
                                 600             std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() <cycle 1> [180]
                0.00    0.00     100/10300       PAlgebraModDerived<PA_zz_p>::~PAlgebraModDerived() [308]
[245]    0.0    0.00    0.00     700         std::_Sp_counted_ptr<TNode<NTL::zz_pX>*, (__gnu_cxx::_Lock_policy)2>::_M_dispose() <cycle 1> [245]
                0.00    0.00     700/28600       NTL::Vec<NTL::zz_p>::~Vec() [170]
                0.00    0.00     600/700         std::_Sp_counted_ptr<TNode<NTL::zz_pX>*, (__gnu_cxx::_Lock_policy)2>::_M_destroy() [244]
                                 600             std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() <cycle 1> [180]
-----------------------------------------------
                0.00    0.00     700/700         FHEPubKey::setKeySwitchMap(long) [287]
[246]    0.0    0.00    0.00     700         void std::vector<std::pair<long, long>, std::allocator<std::pair<long, long> > >::_M_emplace_back_aux<std::pair<long, long> >(std::pair<long, long>&&) [246]
-----------------------------------------------
                0.00    0.00     100/600         FHESecKey::Decrypt(NTL::ZZX&, Ctxt const&, NTL::ZZX&) const [78]
                0.00    0.00     500/600         FHEPubKey::Encrypt(Ctxt&, NTL::ZZX const&, long, bool) const [57]
[247]    0.0    0.00    0.00     600         MulMod(NTL::ZZX&, NTL::ZZX const&, long, long, bool) [247]
                0.00    0.00     600/5400        NTL::Vec<NTL::ZZ>::SetMaxLength(long) [189]
                0.00    0.00     300/10400       NTL::Vec<NTL::ZZ>::DoSetLength(long) [181]
-----------------------------------------------
                0.00    0.00     200/600         EncryptedArrayDerived<PA_zz_p>::buildLinPolyCoeffs(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) const [63]
                0.00    0.00     400/600         PAlgebraModDerived<PA_zz_p>::mapToSlots(MappingData<PA_zz_p>&, NTL::zz_pX const&) const [115]
[248]    0.0    0.00    0.00     600         NTL::Vec<NTL::zz_pE>::~Vec() [248]
-----------------------------------------------
                0.00    0.00     100/600         ppInvert(NTL::Mat<NTL::zz_p>&, NTL::Mat<NTL::zz_p> const&, long, long) [303]
                0.00    0.00     500/600         void FindPrimRootT<NTL::zz_p, long>(NTL::zz_p&, unsigned long) [254]
[249]    0.0    0.00    0.00     600         NTL::to_zz_p(long) [249]
-----------------------------------------------
                0.00    0.00     600/600         Ctxt::findBaseLevel() const [251]
[250]    0.0    0.00    0.00     600         Ctxt::findBaseSet(IndexSet&) const [250]
                0.00    0.00    1200/270400      IndexSet::contains(long) const [163]
                0.00    0.00     800/19300       IndexSet::remove(long) [175]
                0.00    0.00     600/1500        Ctxt::verifyPrimeSet() const [221]
                0.00    0.00     600/3000        card(IndexSet const&) [202]
                0.00    0.00     600/362400      IndexSet::next(long) const [160]
                0.00    0.00     600/1200        Ctxt::modSwitchAddedNoiseVar() const [232]
                0.00    0.00     600/1200        IndexSet::disjointFrom(IndexSet const&) const [233]
                0.00    0.00     600/360800      void std::vector<Cmodulus, std::allocator<Cmodulus> >::emplace_back<Cmodulus>(Cmodulus&&) [161]
-----------------------------------------------
                0.00    0.00     600/600         Ctxt::operator*=(Ctxt const&) [8]
[251]    0.0    0.00    0.00     600         Ctxt::findBaseLevel() const [251]
                0.00    0.00    1200/3000        card(IndexSet const&) [202]
                0.00    0.00     600/600         Ctxt::findBaseSet(IndexSet&) const [250]
                0.00    0.00     600/362400      IndexSet::next(long) const [160]
                0.00    0.00     600/270400      IndexSet::contains(long) const [163]
-----------------------------------------------
                0.00    0.00     500/500         FHEPubKey::Encrypt(Ctxt&, NTL::ZZX const&, long, bool) const [57]
[252]    0.0    0.00    0.00     500         sampleSmall(NTL::ZZX&, long) [252]
                0.00    0.00     500/5400        NTL::Vec<NTL::ZZ>::SetMaxLength(long) [189]
-----------------------------------------------
                0.00    0.00     500/500         Cmodulus::Cmodulus(PAlgebra const&, long, long) [134]
[253]    0.0    0.00    0.00     500         BuildContext(long, long) [253]
-----------------------------------------------
                0.00    0.00     500/500         Cmodulus::Cmodulus(PAlgebra const&, long, long) [134]
[254]    0.0    0.00    0.00     500         void FindPrimRootT<NTL::zz_p, long>(NTL::zz_p&, unsigned long) [254]
                0.00    0.00    2000/3300        NTL::Vec<char>::~Vec() [200]
                0.00    0.00     500/500         void factorT<long>(std::vector<long, std::allocator<long> >&, long const&) [257]
                0.00    0.00     500/600         NTL::to_zz_p(long) [249]
-----------------------------------------------
                0.00    0.00     500/500         Cmodulus::Cmodulus(PAlgebra const&, long, long) [134]
[255]    0.0    0.00    0.00     500         FindPrimitiveRoot(NTL::zz_p&, unsigned long) [255]
-----------------------------------------------
                0.00    0.00     500/500         EncryptedArrayDerived<PA_zz_p>::encrypt(Ctxt&, FHEPubKey const&, std::vector<long, std::allocator<long> > const&) const [55]
[256]    0.0    0.00    0.00     500         void convert<NTL::zz_pX, long>(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, std::vector<long, std::allocator<long> > const&) [256]
                0.00    0.00    1800/475624      NTL::Vec<NTL::zz_p>::DoSetLength(long) [159]
                0.00    0.00     500/2300        std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >::_M_default_append(unsigned long) [214]
-----------------------------------------------
                0.00    0.00     500/500         void FindPrimRootT<NTL::zz_p, long>(NTL::zz_p&, unsigned long) [254]
[257]    0.0    0.00    0.00     500         void factorT<long>(std::vector<long, std::allocator<long> >&, long const&) [257]
                0.00    0.00    1500/1600        void std::vector<long, std::allocator<long> >::_M_emplace_back_aux<long const&>(long const&) [218]
                0.00    0.00     500/3300        NTL::Vec<char>::~Vec() [200]
-----------------------------------------------
                0.00    0.00     200/500         EncryptedArrayDerived<PA_zz_p>::~EncryptedArrayDerived() [275]
                0.00    0.00     300/500         EncryptedArrayDerived<PA_zz_p>::initNormalBasisMatrix() const [70]
[258]    0.0    0.00    0.00     500         NTL::Vec<NTL::Vec<NTL::zz_p> >::~Vec() [258]
-----------------------------------------------
                0.00    0.00     500/500         FHESecKey::GenKeySWmatrix(long, long, long, long, long) [5]
[259]    0.0    0.00    0.00     500         void std::vector<KeySwitch, std::allocator<KeySwitch> >::_M_emplace_back_aux<KeySwitch const&>(KeySwitch const&) [259]
                0.00    0.00    3000/72400       DoubleCRTHelper::~DoubleCRTHelper() [165]
-----------------------------------------------
                0.00    0.00     100/400         buildModChain(FHEcontext&, long, long, long) [131]
                0.00    0.00     300/400         Ctxt::modUpToSet(IndexSet const&) [104]
[260]    0.0    0.00    0.00     400         IndexSet::insert(IndexSet const&) [260]
                0.00    0.00     300/24500       IndexSet::insert(long) [174]
                0.00    0.00     300/4200        IndexSet::prev(long) const [196]
-----------------------------------------------
                0.00    0.00     400/400         FHEPubKey::setKeySwitchMap(long) [287]
[261]    0.0    0.00    0.00     400         std::_Deque_base<long, std::allocator<long> >::_M_initialize_map(unsigned long) [261]
-----------------------------------------------
                0.00    0.00     400/400         FHEPubKey::setKeySwitchMap(long) [287]
[262]    0.0    0.00    0.00     400         std::_Deque_base<long, std::allocator<long> >::~_Deque_base() [262]
-----------------------------------------------
                0.00    0.00     400/400         FHEcontext::AddPrime(long, long, bool) [132]
[263]    0.0    0.00    0.00     400         void std::vector<Cmodulus, std::allocator<Cmodulus> >::_M_emplace_back_aux<Cmodulus>(Cmodulus&&) [263]
                0.00    0.00    1100/1200        Cmodulus::operator=(Cmodulus const&) [231]
-----------------------------------------------
                0.00    0.00     200/400         FHEPubKey::setKeySwitchMap(long) [287]
                0.00    0.00     200/400         PAlgebra::PAlgebra(unsigned long, unsigned long, std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&) [316]
[264]    0.0    0.00    0.00     400         std::vector<long, std::allocator<long> >::_M_fill_assign(unsigned long, long const&) [264]
-----------------------------------------------
                0.00    0.00     300/300         PAlgebraModDerived<PA_zz_p>::PAlgebraModDerived(PAlgebra const&, long) [112]
[265]    0.0    0.00    0.00     300         bool poly_comp<NTL::zz_pX>(NTL::zz_pX const&, NTL::zz_pX const&) [265]
-----------------------------------------------
                0.00    0.00     100/300         NTL::Mat<NTL::zz_pE>::Mat(NTL::Mat<NTL::zz_pE> const&) [88]
                0.00    0.00     200/300         void NTL::Vec<NTL::Vec<NTL::zz_pE> >::DoSetLengthAndApply<NTL::Mat<NTL::zz_pE>::Fixer>(long, NTL::Mat<NTL::zz_pE>::Fixer&) [279]
[266]    0.0    0.00    0.00     300         NTL::Vec<NTL::Vec<NTL::zz_pE> >::AllocateTo(long) [266]
-----------------------------------------------
                0.00    0.00     100/300         EncryptedArrayDerived<PA_zz_p>::~EncryptedArrayDerived() [275]
                0.00    0.00     200/300         EncryptedArrayDerived<PA_zz_p>::buildLinPolyCoeffs(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) const [63]
[267]    0.0    0.00    0.00     300         NTL::Vec<NTL::Vec<NTL::zz_pE> >::~Vec() [267]
-----------------------------------------------
                0.00    0.00     100/300         PAlgebraModDerived<PA_zz_p>::PAlgebraModDerived(PAlgebra const&, long) [112]
                0.00    0.00     200/300         PAlgebraModDerived<PA_zz_p>::~PAlgebraModDerived() [308]
[268]    0.0    0.00    0.00     300         NTL::Vec<NTL::zz_pX>::~Vec() [268]
-----------------------------------------------
                0.00    0.00     100/300         PAlgebraModDerived<PA_zz_p>::mapToSlots(MappingData<PA_zz_p>&, NTL::zz_pX const&) const [115]
                0.00    0.00     200/300         PAlgebraModDerived<PA_zz_p>::mapToFt(NTL::zz_pX&, NTL::zz_pX const&, unsigned long, NTL::zz_pX const*) const [135]
[269]    0.0    0.00    0.00     300         long NTL::operator==<NTL::zz_p>(NTL::Vec<NTL::zz_p> const&, NTL::Vec<NTL::zz_p> const&) [269]
-----------------------------------------------
                0.00    0.00     300/300         Ctxt::tensorProduct(Ctxt const&, Ctxt const&) [66]
[270]    0.0    0.00    0.00     300         IndexSet::emptySet() [270]
-----------------------------------------------
                0.00    0.00     300/300         std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::operator=(std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&) [272]
[271]    0.0    0.00    0.00     300         void std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_assign<std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::operator=(std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&)::{lambda(std::__detail::_Hash_node<std::pair<long const, NTL::Vec<long> >, false> const*)#2}>(std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&, std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::operator=(std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&)::{lambda(std::__detail::_Hash_node<std::pair<long const, NTL::Vec<long> >, false> const*)#2} const&) [271]
-----------------------------------------------
                0.00    0.00     300/300         DoubleCRT::operator=(DoubleCRT const&) [101]
[272]    0.0    0.00    0.00     300         std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::operator=(std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&) [272]
                0.00    0.00     600/307900      std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned long, bool) [162]
                0.00    0.00     300/300         void std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_assign<std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::operator=(std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&)::{lambda(std::__detail::_Hash_node<std::pair<long const, NTL::Vec<long> >, false> const*)#2}>(std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&, std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::operator=(std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&)::{lambda(std::__detail::_Hash_node<std::pair<long const, NTL::Vec<long> >, false> const*)#2} const&) [271]
-----------------------------------------------
                0.00    0.00       2/202         DoubleCRT::toPoly(NTL::ZZX&, IndexSet const&, bool) const [30]
                0.00    0.00     200/202         NTL::zz_pInfoT::zz_pInfoT(long, long) [2975]
[273]    0.0    0.00    0.00     202         NTL::Vec<double>::AllocateTo(long) [273]
-----------------------------------------------
                0.00    0.00       1/201         DoubleCRT::toPoly(NTL::ZZX&, IndexSet const&, bool) const [30]
                0.00    0.00     200/201         void NTL::Vec<NTL::Vec<long> >::DoSetLengthAndApply<NTL::Mat<long>::Fixer>(long, NTL::Mat<long>::Fixer&) [280]
[274]    0.0    0.00    0.00     201         NTL::Vec<NTL::Vec<long> >::AllocateTo(long) [274]
-----------------------------------------------
                0.00    0.00     100/200         cloned_ptr<EncryptedArrayBase, deep_clone<EncryptedArrayBase> >::~cloned_ptr() [691]
                0.00    0.00     100/200         FHEcontext::~FHEcontext() [306]
[275]    0.0    0.00    0.00     200         EncryptedArrayDerived<PA_zz_p>::~EncryptedArrayDerived() [275]
                0.00    0.00     200/500         NTL::Vec<NTL::Vec<NTL::zz_p> >::~Vec() [258]
                0.00    0.00     200/3900        std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >::~vector() [198]
                0.00    0.00     200/28600       NTL::Vec<NTL::zz_p>::~Vec() [170]
                0.00    0.00     200/200         NTL::MakeSmartAux<NTL::zz_pEInfoT>::~MakeSmartAux() [276]
                0.00    0.00     100/300         NTL::Vec<NTL::Vec<NTL::zz_pE> >::~Vec() [267]
-----------------------------------------------
                0.00    0.00     200/200         EncryptedArrayDerived<PA_zz_p>::~EncryptedArrayDerived() [275]
[276]    0.0    0.00    0.00     200         NTL::MakeSmartAux<NTL::zz_pEInfoT>::~MakeSmartAux() [276]
                0.00    0.00     200/28600       NTL::Vec<NTL::zz_p>::~Vec() [170]
-----------------------------------------------
                0.00    0.00     100/200         buildLinPolyMatrix(NTL::Mat<NTL::zz_pE>&, long) [95]
                0.00    0.00     100/200         NTL::inv(NTL::zz_pE&, NTL::Mat<NTL::zz_pE>&, NTL::Mat<NTL::zz_pE> const&) [92]
[277]    0.0    0.00    0.00     200         NTL::Mat<NTL::zz_pE>::SetDims(long, long) [277]
                0.00    0.00     200/200         void NTL::Vec<NTL::Vec<NTL::zz_pE> >::DoSetLengthAndApply<NTL::Mat<NTL::zz_pE>::Fixer>(long, NTL::Mat<NTL::zz_pE>::Fixer&) [279]
-----------------------------------------------
                0.00    0.00     200/200         void NTL::conv<long, NTL::zz_p>(NTL::Mat<long>&, NTL::Mat<NTL::zz_p> const&) [286]
[278]    0.0    0.00    0.00     200         NTL::Mat<long>::SetDims(long, long) [278]
                0.00    0.00     200/200         void NTL::Vec<NTL::Vec<long> >::DoSetLengthAndApply<NTL::Mat<long>::Fixer>(long, NTL::Mat<long>::Fixer&) [280]
-----------------------------------------------
                0.00    0.00     200/200         NTL::Mat<NTL::zz_pE>::SetDims(long, long) [277]
[279]    0.0    0.00    0.00     200         void NTL::Vec<NTL::Vec<NTL::zz_pE> >::DoSetLengthAndApply<NTL::Mat<NTL::zz_pE>::Fixer>(long, NTL::Mat<NTL::zz_pE>::Fixer&) [279]
                0.00    0.00    2400/2400        NTL::Vec<NTL::zz_pE>::FixLength(long) [210]
                0.00    0.00     200/300         NTL::Vec<NTL::Vec<NTL::zz_pE> >::AllocateTo(long) [266]
-----------------------------------------------
                0.00    0.00     200/200         NTL::Mat<long>::SetDims(long, long) [278]
[280]    0.0    0.00    0.00     200         void NTL::Vec<NTL::Vec<long> >::DoSetLengthAndApply<NTL::Mat<long>::Fixer>(long, NTL::Mat<long>::Fixer&) [280]
                0.00    0.00    2400/25900       NTL::Vec<long>::FixLength(long) [171]
                0.00    0.00     200/201         NTL::Vec<NTL::Vec<long> >::AllocateTo(long) [274]
-----------------------------------------------
                0.00    0.00     100/200         NTL::basic_inv(NTL::zz_p&, NTL::Mat<NTL::zz_p>&, NTL::Mat<NTL::zz_p> const&, bool) [47]
                0.00    0.00     100/200         NTL::basic_tri(NTL::zz_p&, NTL::Mat<NTL::zz_p> const&, NTL::Vec<NTL::zz_p> const*, NTL::Vec<NTL::zz_p>*, bool, bool) [3160]
[281]    0.0    0.00    0.00     200         NTL::Vec<NTL::Vec<long> >::~Vec() [281]
-----------------------------------------------
                0.00    0.00     200/200         NTL::PlainPseudoDivRem(NTL::ZZX&, NTL::ZZX&, NTL::ZZX const&, NTL::ZZX const&) [1508]
[282]    0.0    0.00    0.00     200         NTL::Vec<NTL::ZZ>::SetLength(long) [282]
-----------------------------------------------
                0.00    0.00     200/200         NTL::Vec<int>::DoSetLength(long, int const&) [284]
[283]    0.0    0.00    0.00     200         NTL::Vec<int>::AllocateTo(long) [283]
-----------------------------------------------
                0.00    0.00     200/200         add1Dmats4dim(FHESecKey&, long, long) [7]
[284]    0.0    0.00    0.00     200         NTL::Vec<int>::DoSetLength(long, int const&) [284]
                0.00    0.00     200/200         NTL::Vec<int>::AllocateTo(long) [283]
-----------------------------------------------
                0.00    0.00     100/200         NTL::basic_inv(NTL::zz_p&, NTL::Mat<NTL::zz_p>&, NTL::Mat<NTL::zz_p> const&, bool) [47]
                0.00    0.00     100/200         NTL::basic_tri(NTL::zz_p&, NTL::Mat<NTL::zz_p> const&, NTL::Vec<NTL::zz_p> const*, NTL::Vec<NTL::zz_p>*, bool, bool) [3160]
[285]    0.0    0.00    0.00     200         void NTL::conv<NTL::Vec<long>, NTL::Vec<NTL::zz_p> >(NTL::Vec<NTL::Vec<long> >&, NTL::Vec<NTL::Vec<NTL::zz_p> > const&) [285]
                0.00    0.00    2400/38210       NTL::Vec<long>::DoSetLength(long) [167]
-----------------------------------------------
                0.00    0.00     100/200         NTL::basic_inv(NTL::zz_p&, NTL::Mat<NTL::zz_p>&, NTL::Mat<NTL::zz_p> const&, bool) [47]
                0.00    0.00     100/200         NTL::basic_tri(NTL::zz_p&, NTL::Mat<NTL::zz_p> const&, NTL::Vec<NTL::zz_p> const*, NTL::Vec<NTL::zz_p>*, bool, bool) [3160]
[286]    0.0    0.00    0.00     200         void NTL::conv<long, NTL::zz_p>(NTL::Mat<long>&, NTL::Mat<NTL::zz_p> const&) [286]
                0.00    0.00     200/200         NTL::Mat<long>::SetDims(long, long) [278]
-----------------------------------------------
                0.00    0.00     100/200         addFrbMatrices(FHESecKey&, long) [59]
                0.00    0.00     100/200         SHEEP::ContextHElib<bool, Ctxt>::configure() [4]
[287]    0.0    0.00    0.00     200         FHEPubKey::setKeySwitchMap(long) [287]
                0.00    0.00     700/700         void std::vector<std::pair<long, long>, std::allocator<std::pair<long, long> > >::_M_emplace_back_aux<std::pair<long, long> >(std::pair<long, long>&&) [246]
                0.00    0.00     400/400         std::_Deque_base<long, std::allocator<long> >::_M_initialize_map(unsigned long) [261]
                0.00    0.00     400/400         std::_Deque_base<long, std::allocator<long> >::~_Deque_base() [262]
                0.00    0.00     200/400         std::vector<long, std::allocator<long> >::_M_fill_assign(unsigned long, long const&) [264]
                0.00    0.00     100/100         std::vector<std::vector<long, std::allocator<long> >, std::allocator<std::vector<long, std::allocator<long> > > >::_M_default_append(unsigned long) [332]
-----------------------------------------------
                0.00    0.00     200/200         buildEncryptedArray(FHEcontext const&, NTL::ZZX const&, PAlgebraMod const&) [116]
[288]    0.0    0.00    0.00     200         PAlgebraModDerived<PA_zz_p>::restoreContext() const [288]
-----------------------------------------------
                0.00    0.00     200/200         FHEcontext::operator==(FHEcontext const&) const [317]
[289]    0.0    0.00    0.00     200         PAlgebraModDerived<PA_zz_p>::getR() const [289]
-----------------------------------------------
                0.00    0.00     200/200         buildEncryptedArray(FHEcontext const&, NTL::ZZX const&, PAlgebraMod const&) [116]
[290]    0.0    0.00    0.00     200         PAlgebraModDerived<PA_zz_p>::getTag() const [290]
-----------------------------------------------
                0.00    0.00     100/200         buildModChain(FHEcontext&, long, long, long) [131]
                0.00    0.00     100/200         FHESecKey::ImportSecKey(DoubleCRT const&, long, long, long) [65]
[291]    0.0    0.00    0.00     200         PAlgebraModDerived<PA_zz_p>::getPPowR() const [291]
-----------------------------------------------
                0.00    0.00     200/200         FHEcontext::operator==(FHEcontext const&) const [317]
[292]    0.0    0.00    0.00     200         PAlgebraModDerived<PA_zz_p>::getZMStar() const [292]
-----------------------------------------------
                0.00    0.00     200/200         FHEcontext::operator==(FHEcontext const&) const [317]
[293]    0.0    0.00    0.00     200         PAlgebra::operator==(PAlgebra const&) const [293]
-----------------------------------------------
                0.00    0.00     100/200         EncryptedArrayDerived<PA_zz_p>::buildLinPolyCoeffs(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) const [63]
                0.00    0.00     100/200         EncryptedArrayDerived<PA_zz_p>::initNormalBasisMatrix() const [70]
[294]    0.0    0.00    0.00     200         std::unique_lock<std::mutex>::lock() [294]
-----------------------------------------------
                0.00    0.00     200/200         PAlgebraModDerived<PA_zz_p>::mapToSlots(MappingData<PA_zz_p>&, NTL::zz_pX const&) const [115]
[295]    0.0    0.00    0.00     200         std::vector<NTL::Mat<NTL::zz_p>, std::allocator<NTL::Mat<NTL::zz_p> > >::_M_default_append(unsigned long) [295]
-----------------------------------------------
                0.00    0.00     100/200         void convert<long, NTL::zz_pX>(std::vector<long, std::allocator<long> >&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) [301]
                0.00    0.00     100/200         PAlgebra::PAlgebra(unsigned long, unsigned long, std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&) [316]
[296]    0.0    0.00    0.00     200         std::vector<long, std::allocator<long> >::_M_default_append(unsigned long) [296]
-----------------------------------------------
                0.00    0.00     200/200         PAlgebra::PAlgebra(unsigned long, unsigned long, std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&) [316]
[297]    0.0    0.00    0.00     200         std::vector<long, std::allocator<long> >::operator=(std::vector<long, std::allocator<long> > const&) [297]
-----------------------------------------------
                0.00    0.00     100/100         PAlgebra::PAlgebra(unsigned long, unsigned long, std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&) [316]
[298]    0.0    0.00    0.00     100         Cyclotomic(long) [298]
                0.00    0.00     800/800         mobius(long) [241]
                0.00    0.00     300/10400       NTL::Vec<NTL::ZZ>::DoSetLength(long) [181]
                0.00    0.00     100/1700        NTL::Vec<NTL::ZZ>::operator=(NTL::Vec<NTL::ZZ> const&) [216]
-----------------------------------------------
                0.00    0.00     100/100         PAlgebraModDerived<PA_zz_p>::PAlgebraModDerived(PAlgebra const&, long) [112]
[299]    0.0    0.00    0.00     100         EDF(NTL::Vec<NTL::zz_pX>&, NTL::zz_pX const&, long) [299]
                0.00    0.00     200/28600       NTL::Vec<NTL::zz_p>::~Vec() [170]
-----------------------------------------------
                0.00    0.00     100/100         FHESecKey::Decrypt(NTL::ZZX&, Ctxt const&, NTL::ZZX&) const [78]
[300]    0.0    0.00    0.00     100         PolyRed(NTL::ZZX&, NTL::ZZX const&, long, bool) [300]
                0.00    0.00     100/5400        NTL::Vec<NTL::ZZ>::SetMaxLength(long) [189]
-----------------------------------------------
                0.00    0.00     100/100         EncryptedArrayDerived<PA_zz_p>::decrypt(Ctxt const&, FHESecKey const&, std::vector<long, std::allocator<long> >&) const [75]
[301]    0.0    0.00    0.00     100         void convert<long, NTL::zz_pX>(std::vector<long, std::allocator<long> >&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) [301]
                0.00    0.00     100/200         std::vector<long, std::allocator<long> >::_M_default_append(unsigned long) [296]
-----------------------------------------------
                0.00    0.00     100/100         PAlgebra::PAlgebra(unsigned long, unsigned long, std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&) [316]
[302]    0.0    0.00    0.00     100         multOrd(long, long) [302]
-----------------------------------------------
                0.00    0.00     100/100         EncryptedArrayDerived<PA_zz_p>::initNormalBasisMatrix() const [70]
[303]    0.0    0.00    0.00     100         ppInvert(NTL::Mat<NTL::zz_p>&, NTL::Mat<NTL::zz_p> const&, long, long) [303]
                0.00    0.00     100/600         NTL::to_zz_p(long) [249]
-----------------------------------------------
                0.00    0.00     100/100         EncryptedArrayDerived<PA_zz_p>::buildLinPolyCoeffs(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) const [63]
[304]    0.0    0.00    0.00     100         ppInvert(NTL::Mat<NTL::zz_pE>&, NTL::Mat<NTL::zz_pE> const&, long, long) [304]
-----------------------------------------------
                0.00    0.00     100/100         DoubleCRT::sampleHWt(long) [97]
[305]    0.0    0.00    0.00     100         sampleHWt(NTL::ZZX&, long, long) [305]
                0.00    0.00     100/10400       NTL::Vec<NTL::ZZ>::DoSetLength(long) [181]
                0.00    0.00     100/5400        NTL::Vec<NTL::ZZ>::SetMaxLength(long) [189]
-----------------------------------------------
                0.00    0.00     100/100         SHEEP::ContextHElib<bool, Ctxt>::~ContextHElib() [3345]
[306]    0.0    0.00    0.00     100         FHEcontext::~FHEcontext() [306]
                0.00    0.00     100/200         EncryptedArrayDerived<PA_zz_p>::~EncryptedArrayDerived() [275]
                0.00    0.00     100/100         RecryptData::~RecryptData() [307]
                0.00    0.00     100/100         PAlgebraModDerived<PA_zz_p>::~PAlgebraModDerived() [308]
-----------------------------------------------
                0.00    0.00     100/100         FHEcontext::~FHEcontext() [306]
[307]    0.0    0.00    0.00     100         RecryptData::~RecryptData() [307]
-----------------------------------------------
                0.00    0.00     100/100         FHEcontext::~FHEcontext() [306]
[308]    0.0    0.00    0.00     100         PAlgebraModDerived<PA_zz_p>::~PAlgebraModDerived() [308]
                0.00    0.00     200/300         NTL::Vec<NTL::zz_pX>::~Vec() [268]
                0.00    0.00     100/3900        std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >::~vector() [198]
                0.00    0.00     100/28600       NTL::Vec<NTL::zz_p>::~Vec() [170]
                0.00    0.00     100/10300       std::_Sp_counted_ptr<TNode<NTL::zz_pX>*, (__gnu_cxx::_Lock_policy)2>::_M_dispose() <cycle 1> [245]
                0.00    0.00     100/700         std::_Sp_counted_ptr<TNode<NTL::zz_pX>*, (__gnu_cxx::_Lock_policy)2>::_M_destroy() [244]
-----------------------------------------------
                0.00    0.00     100/100         EncryptedArrayDerived<PA_zz_p>::initNormalBasisMatrix() const [70]
[309]    0.0    0.00    0.00     100         NTL::Mat<NTL::ZZ>::SetDims(long, long) [309]
                0.00    0.00     100/100         void NTL::Vec<NTL::Vec<NTL::ZZ> >::DoSetLengthAndApply<NTL::Mat<NTL::ZZ>::Fixer>(long, NTL::Mat<NTL::ZZ>::Fixer&) [311]
-----------------------------------------------
                0.00    0.00     100/100         void NTL::Vec<NTL::Vec<NTL::ZZ> >::DoSetLengthAndApply<NTL::Mat<NTL::ZZ>::Fixer>(long, NTL::Mat<NTL::ZZ>::Fixer&) [311]
[310]    0.0    0.00    0.00     100         NTL::Vec<NTL::Vec<NTL::ZZ> >::AllocateTo(long) [310]
-----------------------------------------------
                0.00    0.00     100/100         NTL::Mat<NTL::ZZ>::SetDims(long, long) [309]
[311]    0.0    0.00    0.00     100         void NTL::Vec<NTL::Vec<NTL::ZZ> >::DoSetLengthAndApply<NTL::Mat<NTL::ZZ>::Fixer>(long, NTL::Mat<NTL::ZZ>::Fixer&) [311]
                0.00    0.00    1200/1200        NTL::Vec<NTL::ZZ>::FixLength(long) [229]
                0.00    0.00     100/100         NTL::Vec<NTL::Vec<NTL::ZZ> >::AllocateTo(long) [310]
-----------------------------------------------
                0.00    0.00     100/100         NTL::Vec<NTL::Vec<NTL::zz_pX> >::DoSetLength(long) [1709]
[312]    0.0    0.00    0.00     100         NTL::Vec<NTL::Vec<NTL::zz_pX> >::AllocateTo(long) [312]
-----------------------------------------------
                0.00    0.00     100/100         PAlgebra::PAlgebra(unsigned long, unsigned long, std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&) [316]
[313]    0.0    0.00    0.00     100         NTL::Vec<bool>::AllocateTo(long) [313]
-----------------------------------------------
                0.00    0.00     100/100         EncryptedArrayDerived<PA_zz_p>::initNormalBasisMatrix() const [70]
[314]    0.0    0.00    0.00     100         void NTL::conv<NTL::Vec<NTL::zz_p>, NTL::Vec<NTL::ZZ> >(NTL::Vec<NTL::Vec<NTL::zz_p> >&, NTL::Vec<NTL::Vec<NTL::ZZ> > const&) [314]
-----------------------------------------------
                0.00    0.00     100/100         EncryptedArrayDerived<PA_zz_p>::initNormalBasisMatrix() const [70]
[315]    0.0    0.00    0.00     100         void NTL::conv<NTL::zz_p, NTL::ZZ>(NTL::Mat<NTL::zz_p>&, NTL::Mat<NTL::ZZ> const&) [315]
                0.00    0.00     100/9600        NTL::Mat<NTL::zz_p>::SetDims(long, long) [183]
-----------------------------------------------
                0.00    0.00     100/100         FHEcontext::FHEcontext(unsigned long, unsigned long, unsigned long, std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&) [108]
[316]    0.0    0.00    0.00     100         PAlgebra::PAlgebra(unsigned long, unsigned long, std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&) [316]
                0.00    0.00     600/800         std::vector<unsigned long, std::allocator<unsigned long> >::_M_default_append(unsigned long) [242]
                0.00    0.00     200/200         std::vector<long, std::allocator<long> >::operator=(std::vector<long, std::allocator<long> > const&) [297]
                0.00    0.00     200/400         std::vector<long, std::allocator<long> >::_M_fill_assign(unsigned long, long const&) [264]
                0.00    0.00     100/100         multOrd(long, long) [302]
                0.00    0.00     100/100         NTL::Vec<bool>::AllocateTo(long) [313]
                0.00    0.00     100/100         Cyclotomic(long) [298]
                0.00    0.00     100/1700        NTL::Vec<NTL::ZZ>::operator=(NTL::Vec<NTL::ZZ> const&) [216]
                0.00    0.00     100/200         std::vector<long, std::allocator<long> >::_M_default_append(unsigned long) [296]
-----------------------------------------------
                0.00    0.00     100/100         FHESecKey::Decrypt(NTL::ZZX&, Ctxt const&, NTL::ZZX&) const [78]
[317]    0.0    0.00    0.00     100         FHEcontext::operator==(FHEcontext const&) const [317]
                0.00    0.00     400/4400        IndexSet::operator==(IndexSet const&) const [195]
                0.00    0.00     200/200         PAlgebra::operator==(PAlgebra const&) const [293]
                0.00    0.00     200/200         PAlgebraModDerived<PA_zz_p>::getZMStar() const [292]
                0.00    0.00     200/200         PAlgebraModDerived<PA_zz_p>::getR() const [289]
-----------------------------------------------
                0.00    0.00     100/100         FHESecKey::Decrypt(NTL::ZZX&, Ctxt const&, NTL::ZZX&) const [78]
[318]    0.0    0.00    0.00     100         RecryptData::operator==(RecryptData const&) const [318]
-----------------------------------------------
                0.00    0.00     100/100         PAlgebraModDerived<PA_zz_p>::decodePlaintext(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, NTL::zz_pX const&, MappingData<PA_zz_p> const&) const [139]
[319]    0.0    0.00    0.00     100         PAlgebraModDerived<PA_zz_p>::CRT_decompose(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, NTL::zz_pX const&) const [319]
                0.00    0.00     100/1500        std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >::resize(unsigned long) [223]
-----------------------------------------------
                0.00    0.00     100/100         FHEcontext::FHEcontext(unsigned long, unsigned long, unsigned long, std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&) [108]
[320]    0.0    0.00    0.00     100         PAlgebraModDerived<PA_zz_p>::getFactorsOverZZ() const [320]
-----------------------------------------------
                0.00    0.00     100/100         buildUnpackSlotEncoding(std::vector<NTL::Vec<long>, std::allocator<NTL::Vec<long> > >&, EncryptedArray const&) [29]
[321]    0.0    0.00    0.00     100         EncryptedArrayDerived<PA_zz_p>::getTag() const [321]
-----------------------------------------------
                0.00    0.00     100/100         FHESecKey::Decrypt(NTL::ZZX&, Ctxt const&, NTL::ZZX&) const [78]
[322]    0.0    0.00    0.00     100         DoubleCRT::toPoly(NTL::ZZX&, bool) const [322]
-----------------------------------------------
                0.00    0.00     100/100         std::vector<NTL::zz_pEX, std::allocator<NTL::zz_pEX> >::_M_default_append(unsigned long) [330]
[323]    0.0    0.00    0.00     100         std::vector<NTL::zz_pEX, std::allocator<NTL::zz_pEX> >::_M_check_len(unsigned long, char const*) const [323]
-----------------------------------------------
                0.00    0.00     100/100         EncryptedArrayDerived<PA_zz_p>::buildLinPolyCoeffs(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) const [63]
[324]    0.0    0.00    0.00     100         std::unique_lock<std::mutex>::unlock() [324]
-----------------------------------------------
                0.00    0.00     100/100         FHESecKey::ImportSecKey(DoubleCRT const&, long, long, long) [65]
[325]    0.0    0.00    0.00     100         std::vector<CtxtPart, std::allocator<CtxtPart> >::_M_fill_assign(unsigned long, CtxtPart const&) [325]
-----------------------------------------------
                0.00    0.00     100/100         buildModChain(FHEcontext&, long, long, long) [131]
[326]    0.0    0.00    0.00     100         std::vector<IndexSet, std::allocator<IndexSet> >::_M_default_append(unsigned long) [326]
-----------------------------------------------
                0.00    0.00     100/100         FHESecKey::ImportSecKey(DoubleCRT const&, long, long, long) [65]
[327]    0.0    0.00    0.00     100         void std::vector<DoubleCRT, std::allocator<DoubleCRT> >::_M_emplace_back_aux<DoubleCRT const&>(DoubleCRT const&) [327]
-----------------------------------------------
                0.00    0.00     100/100         buildUnpackSlotEncoding(std::vector<NTL::Vec<long>, std::allocator<NTL::Vec<long> > >&, EncryptedArray const&) [29]
[328]    0.0    0.00    0.00     100         std::vector<NTL::Vec<long>, std::allocator<NTL::Vec<long> > >::_M_default_append(unsigned long) [328]
-----------------------------------------------
                0.00    0.00     100/100         PAlgebraModDerived<PA_zz_p>::PAlgebraModDerived(PAlgebra const&, long) [112]
[329]    0.0    0.00    0.00     100         std::vector<NTL::ZZX, std::allocator<NTL::ZZX> >::_M_default_append(unsigned long) [329]
-----------------------------------------------
                0.00    0.00     100/100         PAlgebraModDerived<PA_zz_p>::mapToSlots(MappingData<PA_zz_p>&, NTL::zz_pX const&) const [115]
[330]    0.0    0.00    0.00     100         std::vector<NTL::zz_pEX, std::allocator<NTL::zz_pEX> >::_M_default_append(unsigned long) [330]
                0.00    0.00     100/100         std::vector<NTL::zz_pEX, std::allocator<NTL::zz_pEX> >::_M_check_len(unsigned long, char const*) const [323]
                0.00    0.00     100/800         std::vector<unsigned long, std::allocator<unsigned long> >::_M_default_append(unsigned long) [242]
-----------------------------------------------
                0.00    0.00     100/100         PAlgebraModDerived<PA_zz_p>::genMaskTable() [147]
[331]    0.0    0.00    0.00     100         std::vector<std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >, std::allocator<std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > > >::_M_default_append(unsigned long) [331]
-----------------------------------------------
                0.00    0.00     100/100         FHEPubKey::setKeySwitchMap(long) [287]
[332]    0.0    0.00    0.00     100         std::vector<std::vector<long, std::allocator<long> >, std::allocator<std::vector<long, std::allocator<long> > > >::_M_default_append(unsigned long) [332]
-----------------------------------------------
                0.00    0.00       1/27          DoubleCRT::FFT(NTL::ZZX const&, IndexSet const&) [19]
                0.00    0.00       1/27          DoubleCRT::DoubleCRT(NTL::ZZX const&, FHEcontext const&, IndexSet const&) [60]
                0.00    0.00       1/27          DoubleCRT::do_mul(DoubleCRT const&, bool) [31]
                0.00    0.00       1/27          FHEPubKey::Encrypt(Ctxt&, NTL::ZZX const&, long, bool) const [57]
                0.00    0.00       1/27          FHESecKey::GenKeySWmatrix(long, long, long, long, long) [5]
                0.00    0.00       1/27          FHESecKey::Decrypt(NTL::ZZX&, Ctxt const&, NTL::ZZX&) const [78]
                0.00    0.00       1/27          Ctxt::modDownToSet(IndexSet const&) [23]
                0.00    0.00       1/27          Ctxt::privateAssign(Ctxt const&) [239]
                0.00    0.00       1/27          Ctxt::addCtxt(Ctxt const&, bool) [85]
                0.00    0.00       1/27          Ctxt::operator*=(Ctxt const&) [8]
                0.00    0.00       1/27          EncryptedArrayDerived<PA_zz_p>::decode(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, NTL::ZZX const&) const [107]
                0.00    0.00       1/27          buildUnpackSlotEncoding(std::vector<NTL::Vec<long>, std::allocator<NTL::Vec<long> > >&, EncryptedArray const&) [29]
                0.00    0.00       1/27          PAlgebraModDerived<PA_zz_p>::CRT_reconstruct(NTL::zz_pX&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&) const [74]
                0.00    0.00       1/27          BluesteinFFT(NTL::zz_pX&, long, NTL::zz_p const&, NTL::zz_pX const&, NTL::Vec<unsigned long> const&, NTL::fftRep const&) [11]
                0.00    0.00       2/27          DoubleCRT::randomize(NTL::ZZ const*) [67]
                0.00    0.00       2/27          EncryptedArrayDerived<PA_zz_p>::buildLinPolyCoeffs(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) const [63]
                0.00    0.00       2/27          PAlgebraModDerived<PA_zz_p>::embedInSlots(NTL::zz_pX&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&, MappingData<PA_zz_p> const&) const [62]
                0.00    0.00       2/27          Cmodulus::FFT(NTL::Vec<long>&, NTL::ZZX const&) const [21]
                0.00    0.00       2/27          Cmodulus::iFFT(NTL::zz_pX&, NTL::Vec<long> const&) const [80]
                0.00    0.00       3/27          DoubleCRT::toPoly(NTL::ZZX&, IndexSet const&, bool) const [30]
[333]    0.0    0.00    0.00      27         registerTimer(FHEtimer*) [333]
                0.00    0.00       6/6           void std::vector<FHEtimer*, std::allocator<FHEtimer*> >::_M_emplace_back_aux<FHEtimer* const&>(FHEtimer* const&) [334]
-----------------------------------------------
                0.00    0.00       6/6           registerTimer(FHEtimer*) [333]
[334]    0.0    0.00    0.00       6         void std::vector<FHEtimer*, std::allocator<FHEtimer*> >::_M_emplace_back_aux<FHEtimer* const&>(FHEtimer* const&) [334]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [5699]
[335]    0.0    0.00    0.00       1         _GLOBAL__sub_I__Z12BuildContextll [335]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [5699]
[336]    0.0    0.00    0.00       1         _GLOBAL__sub_I__Z13BluesteinInitlRKN3NTL4zz_pERNS_5zz_pXERNS_3VecImEERNS_6fftRepE [336]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [5699]
[337]    0.0    0.00    0.00       1         _GLOBAL__sub_I__Z13GetTimerClockv [337]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [5699]
[338]    0.0    0.00    0.00       1         _GLOBAL__sub_I__Z13extractDigitsRSt6vectorI4CtxtSaIS0_EERKS0_l [338]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [5699]
[339]    0.0    0.00    0.00       1         _GLOBAL__sub_I__Z15KSGiantStepSizel [339]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [5699]
[340]    0.0    0.00    0.00       1         _GLOBAL__sub_I__Z19buildEncryptedArrayRK10FHEcontextRKN3NTL3ZZXERK11PAlgebraMod [340]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [5699]
[341]    0.0    0.00    0.00       1         _GLOBAL__sub_I__Z23buildUnpackSlotEncodingRSt6vectorIN3NTL3VecIlEESaIS2_EERK14EncryptedArray [341]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [5699]
[342]    0.0    0.00    0.00       1         _GLOBAL__sub_I__Z4RLWER9DoubleCRTS0_RKS_lPN3NTL2ZZE [342]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [5699]
[343]    0.0    0.00    0.00       1         _GLOBAL__sub_I__Z5FindMlllllllb [343]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [5699]
[344]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN10FHEglobals13automorphValsE [344]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [5699]
[345]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN10FHEglobals6dryRunE [345]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [5699]
[346]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN11RecryptDataD2Ev [346]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [5699]
[347]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN17DynamicCtxtPowers8getPowerEl [347]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [5699]
[348]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN26PowerfulTranslationIndexesC2ERKN3NTL3VecIlEE [348]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [5699]
[349]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN3NTLltENS_3GF2ES0_ [349]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [5699]
[350]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN7EvalMapC2ERK14EncryptedArraybRKN3NTL3VecIlEEbbb [350]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [5699]
[351]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN8IndexSet8emptySetEv [351]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [5699]
[352]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN9DoubleCRT3FFTERKN3NTL3ZZXERK8IndexSet [352]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [5699]
[353]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZNK13CubeSignature15breakIndexByDimEll [353]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [5699]
[354]    0.0    0.00    0.00       1         _GLOBAL__sub_I_fhe_test_force_bsgs [354]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

 [335] _GLOBAL__sub_I__Z12BuildContextll (CModulus.cpp) [224] NTL::Vec<NTL::ZZ>::Init(long, NTL::ZZ const*) [168] DoubleCRTHelper::clone() const
 [336] _GLOBAL__sub_I__Z13BluesteinInitlRKN3NTL4zz_pERNS_5zz_pXERNS_3VecImEERNS_6fftRepE (bluestein.cpp) [229] NTL::Vec<NTL::ZZ>::FixLength(long) [115] PAlgebraModDerived<PA_zz_p>::mapToSlots(MappingData<PA_zz_p>&, NTL::zz_pX const&) const
 [337] _GLOBAL__sub_I__Z13GetTimerClockv (timing.cpp) [282] NTL::Vec<NTL::ZZ>::SetLength(long) [62] PAlgebraModDerived<PA_zz_p>::embedInSlots(NTL::zz_pX&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&, MappingData<PA_zz_p> const&) const
 [338] _GLOBAL__sub_I__Z13extractDigitsRSt6vectorI4CtxtSaIS0_EERKS0_l (extractDigits.cpp) [216] NTL::Vec<NTL::ZZ>::operator=(NTL::Vec<NTL::ZZ> const&) [319] PAlgebraModDerived<PA_zz_p>::CRT_decompose(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, NTL::zz_pX const&) const
 [339] _GLOBAL__sub_I__Z15KSGiantStepSizel (KeySwitching.cpp) [158] NTL::Vec<NTL::zz_p>::AllocateTo(long) [288] PAlgebraModDerived<PA_zz_p>::restoreContext() const
 [340] _GLOBAL__sub_I__Z19buildEncryptedArrayRK10FHEcontextRKN3NTL3ZZXERK11PAlgebraMod (EncryptedArray.cpp) [159] NTL::Vec<NTL::zz_p>::DoSetLength(long) [74] PAlgebraModDerived<PA_zz_p>::CRT_reconstruct(NTL::zz_pX&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&) const
 [341] _GLOBAL__sub_I__Z23buildUnpackSlotEncodingRSt6vectorIN3NTL3VecIlEESaIS2_EERK14EncryptedArray (intraSlot.cpp) [209] NTL::Vec<NTL::zz_p>::FixAtCurrentLength() [139] PAlgebraModDerived<PA_zz_p>::decodePlaintext(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, NTL::zz_pX const&, MappingData<PA_zz_p> const&) const
 [342] _GLOBAL__sub_I__Z4RLWER9DoubleCRTS0_RKS_lPN3NTL2ZZE (FHE.cpp) [10] NTL::Vec<NTL::zz_p>::Init(long, NTL::zz_p const*) [320] PAlgebraModDerived<PA_zz_p>::getFactorsOverZZ() const
 [343] _GLOBAL__sub_I__Z5FindMlllllllb (FHEContext.cpp) [166] NTL::Vec<NTL::zz_p>::FixLength(long) [289] PAlgebraModDerived<PA_zz_p>::getR() const
 [344] _GLOBAL__sub_I__ZN10FHEglobals13automorphValsE (Ctxt.cpp) [190] NTL::Vec<NTL::zz_p>::SetLength(long) [290] PAlgebraModDerived<PA_zz_p>::getTag() const
 [345] _GLOBAL__sub_I__ZN10FHEglobals6dryRunE (NumbTh.cpp) [127] NTL::Vec<NTL::zz_p>::Vec(NTL::Vec<NTL::zz_p> const&) [135] PAlgebraModDerived<PA_zz_p>::mapToFt(NTL::zz_pX&, NTL::zz_pX const&, unsigned long, NTL::zz_pX const*) const
 [346] _GLOBAL__sub_I__ZN11RecryptDataD2Ev (recryption.cpp) [170] NTL::Vec<NTL::zz_p>::~Vec() [98] PAlgebraModDerived<PA_zz_p>::evalTree(NTL::zz_pX&, std::shared_ptr<TNode<NTL::zz_pX> >, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&, long, long) const
 [347] _GLOBAL__sub_I__ZN17DynamicCtxtPowers8getPowerEl (polyEval.cpp) [20] NTL::Vec<NTL::zz_p>::operator=(NTL::Vec<NTL::zz_p> const&) [291] PAlgebraModDerived<PA_zz_p>::getPPowR() const
 [348] _GLOBAL__sub_I__ZN26PowerfulTranslationIndexesC2ERKN3NTL3VecIlEE (powerful.cpp) [194] NTL::Vec<NTL::zz_pE>::AllocateTo(long) [128] PAlgebraModDerived<PA_zz_p>::buildTree(std::shared_ptr<TNode<NTL::zz_pX> >&, long, long) const
 [349] _GLOBAL__sub_I__ZN3NTLltENS_3GF2ES0_ (PAlgebra.cpp) [207] NTL::Vec<NTL::zz_pE>::DoSetLength(long) [292] PAlgebraModDerived<PA_zz_p>::getZMStar() const
 [350] _GLOBAL__sub_I__ZN7EvalMapC2ERK14EncryptedArraybRKN3NTL3VecIlEEbbb (EvalMap.cpp) [87] NTL::Vec<NTL::zz_pE>::Init(long, NTL::zz_pE const*) [36] EncryptedArrayDerived<PA_zz_p>::getPAlgebra() const
 [351] _GLOBAL__sub_I__ZN8IndexSet8emptySetEv (IndexSet.cpp) [210] NTL::Vec<NTL::zz_pE>::FixLength(long) [63] EncryptedArrayDerived<PA_zz_p>::buildLinPolyCoeffs(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) const
 [352] _GLOBAL__sub_I__ZN9DoubleCRT3FFTERKN3NTL3ZZXERK8IndexSet (DoubleCRT.cpp) [248] NTL::Vec<NTL::zz_pE>::~Vec() [70] EncryptedArrayDerived<PA_zz_p>::initNormalBasisMatrix() const
 [353] _GLOBAL__sub_I__ZNK13CubeSignature15breakIndexByDimEll (hypercube.cpp) [125] NTL::Vec<NTL::zz_pE>::operator=(NTL::Vec<NTL::zz_pE> const&) [107] EncryptedArrayDerived<PA_zz_p>::decode(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, NTL::ZZX const&) const
 [354] _GLOBAL__sub_I_fhe_test_force_bsgs (matmul.cpp) [208] NTL::Vec<NTL::zz_pX>::AllocateTo(long) [68] EncryptedArrayDerived<PA_zz_p>::encode(NTL::Vec<long>&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) const
 [298] Cyclotomic(long)      [225] NTL::Vec<NTL::zz_pX>::DoSetLength(long) [83] EncryptedArrayDerived<PA_zz_p>::encode(NTL::ZZX&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) const
  [37] _ntl_gsmod(_ntl_gbigint_body*, long) [219] NTL::Vec<NTL::zz_pX>::Init(long) [321] EncryptedArrayDerived<PA_zz_p>::getTag() const
 [126] std::shared_ptr<TNode<NTL::zz_pX> > buildTNode<NTL::zz_pX>(std::shared_ptr<TNode<NTL::zz_pX> >, std::shared_ptr<TNode<NTL::zz_pX> >, NTL::zz_pX const&) [268] NTL::Vec<NTL::zz_pX>::~Vec() [75] EncryptedArrayDerived<PA_zz_p>::decrypt(Ctxt const&, FHESecKey const&, std::vector<long, std::allocator<long> >&) const
 [252] sampleSmall(NTL::ZZX&, long) [138] NTL::Vec<NTL::zz_pX>::operator=(NTL::Vec<NTL::zz_pX> const&) [55] EncryptedArrayDerived<PA_zz_p>::encrypt(Ctxt&, FHEPubKey const&, std::vector<long, std::allocator<long> > const&) const
  [11] BluesteinFFT(NTL::zz_pX&, long, NTL::zz_p const&, NTL::zz_pX const&, NTL::Vec<unsigned long> const&, NTL::fftRep const&) [313] NTL::Vec<bool>::AllocateTo(long) [49] NTL::Vec<long>::length() const
 [253] BuildContext(long, long) [200] NTL::Vec<char>::~Vec() [250] Ctxt::findBaseSet(IndexSet&) const
 [137] AddManyPrimes(FHEcontext&, double, bool, bool) [273] NTL::Vec<double>::AllocateTo(long) [251] Ctxt::findBaseLevel() const
 [236] BluesteinInit(long, NTL::zz_p const&, NTL::zz_pX&, NTL::Vec<unsigned long>&, NTL::fftRep&) [201] NTL::Vec<unsigned char>::~Vec() [221] Ctxt::verifyPrimeSet() const
 [254] void FindPrimRootT<NTL::zz_p, long>(NTL::zz_p&, unsigned long) [283] NTL::Vec<int>::AllocateTo(long) [232] Ctxt::modSwitchAddedNoiseVar() const
 [164] GetTimerClock()       [284] NTL::Vec<int>::DoSetLength(long, int const&) [21] Cmodulus::FFT(NTL::Vec<long>&, NTL::ZZX const&) const
 [131] buildModChain(FHEcontext&, long, long, long) [41] NTL::Vec<long>::AllocateTo(long) [80] Cmodulus::iFFT(NTL::zz_pX&, NTL::Vec<long> const&) const
 [333] registerTimer(FHEtimer*) [167] NTL::Vec<long>::DoSetLength(long) [22] Cmodulus::FFT_aux(NTL::Vec<long>&, NTL::zz_pX&) const
 [197] sampleGaussian(NTL::ZZX&, long, double) [171] NTL::Vec<long>::FixLength(long) [233] IndexSet::disjointFrom(IndexSet const&) const
 [111] buildPAlgebraMod(PAlgebra const&, long) [185] NTL::Vec<unsigned long>::AllocateTo(long) [160] IndexSet::next(long) const
 [255] FindPrimitiveRoot(NTL::zz_p&, unsigned long) [211] NTL::Vec<unsigned long>::operator=(NTL::Vec<unsigned long> const&) [196] IndexSet::prev(long) const
  [28] addSome1DMatrices(FHESecKey&, long, long) [13] NTL::XGCD(long&, long&, long&, long, long) [169] IndexSet::contains(IndexSet const&) const
  [58] addSomeFrbMatrices(FHESecKey&, long, long) [42] NTL::conv(NTL::Vec<NTL::zz_p>&, NTL::Vec<NTL::ZZ> const&) [163] IndexSet::contains(long) const
  [95] buildLinPolyMatrix(NTL::Mat<NTL::zz_pE>&, long) [314] void NTL::conv<NTL::Vec<NTL::zz_p>, NTL::Vec<NTL::ZZ> >(NTL::Vec<NTL::Vec<NTL::zz_p> >&, NTL::Vec<NTL::Vec<NTL::ZZ> > const&) [195] IndexSet::operator==(IndexSet const&) const
 [116] buildEncryptedArray(FHEcontext const&, NTL::ZZX const&, PAlgebraMod const&) [285] void NTL::conv<NTL::Vec<long>, NTL::Vec<NTL::zz_p> >(NTL::Vec<NTL::Vec<long> >&, NTL::Vec<NTL::Vec<NTL::zz_p> > const&) [235] PAlgebra::frobenuisPow(long) const
  [29] buildUnpackSlotEncoding(std::vector<NTL::Vec<long>, std::allocator<NTL::Vec<long> > >&, EncryptedArray const&) [315] void NTL::conv<NTL::zz_p, NTL::ZZ>(NTL::Mat<NTL::zz_p>&, NTL::Mat<NTL::ZZ> const&) [227] PAlgebra::genToPow(long, long) const
 [299] EDF(NTL::Vec<NTL::zz_pX>&, NTL::zz_pX const&, long) [286] void NTL::conv<long, NTL::zz_p>(NTL::Mat<long>&, NTL::Mat<NTL::zz_p> const&) [293] PAlgebra::operator==(PAlgebra const&) const
 [215] rem(NTL::zz_pX&, NTL::zz_pX const&, zz_pXModulus1 const&) [43] NTL::negate(NTL::zz_pX&, NTL::zz_pX const&) [30] DoubleCRT::toPoly(NTL::ZZX&, IndexSet const&, bool) const
  [90] RLWE(DoubleCRT&, DoubleCRT&, DoubleCRT const&, long, NTL::ZZ*) [89] NTL::Mat<NTL::zz_pE>* NTL::MakeRaw<NTL::Mat<NTL::zz_pE>, NTL::Mat<NTL::zz_pE>&>(NTL::Mat<NTL::zz_pE>&) [322] DoubleCRT::toPoly(NTL::ZZX&, bool) const
 [202] card(IndexSet const&) [230] NTL::Lazy<NTL::Vec<NTL::zz_p>, NTL::DefaultDeleterPolicy>* NTL::MakeRaw<NTL::Lazy<NTL::Vec<NTL::zz_p>, NTL::DefaultDeleterPolicy>, NTL::Lazy<NTL::Vec<NTL::zz_p>, NTL::DefaultDeleterPolicy>&>(NTL::Lazy<NTL::Vec<NTL::zz_p>, NTL::DefaultDeleterPolicy>&) [222] FHEPubKey::getKeySWmatrix(SKHandle const&, long) const
  [25] RLWE1(DoubleCRT&, DoubleCRT const&, DoubleCRT const&, long) [14] NTL::new_fft(long*, long const*, long, NTL::FFTPrimeInfo const&, long, long) [57] FHEPubKey::Encrypt(Ctxt&, NTL::ZZX const&, long, bool) const
 [234] mcMod(long, long)     [249] NTL::to_zz_p(long)     [77] FHESecKey::Decrypt(NTL::ZZX&, Ctxt const&) const
 [247] MulMod(NTL::ZZX&, NTL::ZZX const&, long, long, bool) [32] NTL::PlainDiv(NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pX const&) [78] FHESecKey::Decrypt(NTL::ZZX&, Ctxt const&, NTL::ZZX&) const
 [241] mobius(long)            [6] NTL::PlainMul(NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pX const&) [50] std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_begin() const
 [300] PolyRed(NTL::ZZX&, NTL::ZZX const&, long, bool) [2] NTL::PlainRem(NTL::zz_pX&, NTL::zz_pX const&, NTL::zz_pX const&) [323] std::vector<NTL::zz_pEX, std::allocator<NTL::zz_pEX> >::_M_check_len(unsigned long, char const*) const
 [256] void convert<NTL::zz_pX, long>(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >&, std::vector<long, std::allocator<long> > const&) [15] NTL::PlainSqr(NTL::zz_pX&, NTL::zz_pX const&) [34] std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<long const, NTL::Vec<long> >, false>*)
 [301] void convert<long, NTL::zz_pX>(std::vector<long, std::allocator<long> >&, std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&) [44] NTL::PowerMod(long, long, long) [271] void std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_assign<std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::operator=(std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&)::{lambda(std::__detail::_Hash_node<std::pair<long const, NTL::Vec<long> >, false> const*)#2}>(std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&, std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::operator=(std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&)::{lambda(std::__detail::_Hash_node<std::pair<long const, NTL::Vec<long> >, false> const*)#2} const&)
 [228] convert(NTL::Vec<long>&, NTL::zz_pX const&) [16] NTL::new_ifft(long*, long const*, long, NTL::FFTPrimeInfo const&, long) [179] std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&)
 [257] void factorT<long>(std::vector<long, std::allocator<long> >&, long const&) (NumbTh.cpp) [45] NTL::new_fft_short(unsigned long*, long, long, long, NTL::new_mod_t const&) (FFT.cpp) [272] std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::operator=(std::_Hashtable<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&)
 [302] multOrd(long, long)     [1] NTL::FromModularRep(NTL::zz_p*, NTL::fftRep const&, long, long, NTL::zz_pInfoT*) (lzz_pX.cpp) [261] std::_Deque_base<long, std::allocator<long> >::_M_initialize_map(unsigned long)
 [303] ppInvert(NTL::Mat<NTL::zz_p>&, NTL::Mat<NTL::zz_p> const&, long, long) [46] NTL::sha256_transform(NTL::SHA256_CTX&, unsigned char*) (ZZ.cpp) [262] std::_Deque_base<long, std::allocator<long> >::~_Deque_base()
 [304] ppInvert(NTL::Mat<NTL::zz_pE>&, NTL::Mat<NTL::zz_pE> const&, long, long) [17] NTL::new_ifft_short1_notab(unsigned long*, long, long, NTL::new_mod_t const&, long, unsigned long, long, unsigned long) (FFT.cpp) [51] std::_Bit_iterator std::__copy_move<false, false, std::random_access_iterator_tag>::__copy_m<std::_Bit_const_iterator, std::_Bit_iterator>(std::_Bit_const_iterator, std::_Bit_const_iterator, std::_Bit_iterator)
  [38] _ntl_gmul(_ntl_gbigint_body*, _ntl_gbigint_body*, _ntl_gbigint_body**) [3] NTL::new_ifft_short1_flipped(unsigned long*, long, NTL::new_mod_t const&) (FFT.cpp) [294] std::unique_lock<std::mutex>::lock()
 [265] bool poly_comp<NTL::zz_pX>(NTL::zz_pX const&, NTL::zz_pX const&) [47] NTL::basic_inv(NTL::zz_p&, NTL::Mat<NTL::zz_p>&, NTL::Mat<NTL::zz_p> const&, bool) (mat_lzz_p.cpp) [324] std::unique_lock<std::mutex>::unlock()
 [305] sampleHWt(NTL::ZZX&, long, long) [269] long NTL::operator==<NTL::zz_p>(NTL::Vec<NTL::zz_p> const&, NTL::Vec<NTL::zz_p> const&) [244] std::_Sp_counted_ptr<TNode<NTL::zz_pX>*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
   [7] add1Dmats4dim(FHESecKey&, long, long) (KeySwitching.cpp) [104] Ctxt::modUpToSet(IndexSet const&) [245] std::_Sp_counted_ptr<TNode<NTL::zz_pX>*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
 [186] MakeIndexVector(IndexSet const&, NTL::Vec<long>&) (DoubleCRT.cpp) [23] Ctxt::modDownToSet(IndexSet const&) [180] std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()
 [132] FHEcontext::AddPrime(long, long, bool) [239] Ctxt::privateAssign(Ctxt const&) [18] void std::allocator_traits<std::allocator<std::pair<long const, NTL::Vec<long> > > >::destroy<std::pair<long const, NTL::Vec<long> > >(std::allocator<std::pair<long const, NTL::Vec<long> > >&, std::pair<long const, NTL::Vec<long> >*)
 [108] FHEcontext::FHEcontext(unsigned long, unsigned long, unsigned long, std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&) [66] Ctxt::tensorProduct(Ctxt const&, Ctxt const&) [52] std::_Bit_const_iterator::operator++()
 [306] FHEcontext::~FHEcontext() [24] Ctxt::modDownToLevel(long) [237] CtxtPart* std::__uninitialized_copy<false>::__uninit_copy<CtxtPart*, CtxtPart*>(CtxtPart*, CtxtPart*, CtxtPart*)
  [35] auto_timer::stop()     [85] Ctxt::addCtxt(Ctxt const&, bool) [213] NTL::zz_pX* std::__uninitialized_copy<false>::__uninit_copy<NTL::zz_pX*, NTL::zz_pX*>(NTL::zz_pX*, NTL::zz_pX*, NTL::zz_pX*)
  [39] cloned_ptr<IndexMapInit<NTL::Vec<long> >, deep_clone<IndexMapInit<NTL::Vec<long> > > >::~cloned_ptr() [226] Ctxt::Ctxt(FHEPubKey const&, long) [161] void std::vector<Cmodulus, std::allocator<Cmodulus> >::emplace_back<Cmodulus>(Cmodulus&&)
 [307] RecryptData::~RecryptData() [8] Ctxt::operator*=(Ctxt const&) [263] void std::vector<Cmodulus, std::allocator<Cmodulus> >::_M_emplace_back_aux<Cmodulus>(Cmodulus&&)
 [133] zz_pXModulus1::zz_pXModulus1(long, NTL::zz_pX const&) [173] Cmodulus::getScratch_fftRep(long) [325] std::vector<CtxtPart, std::allocator<CtxtPart> >::_M_fill_assign(unsigned long, CtxtPart const&)
 [165] DoubleCRTHelper::~DoubleCRTHelper() [134] Cmodulus::Cmodulus(PAlgebra const&, long, long) [212] std::vector<CtxtPart, std::allocator<CtxtPart> >::_M_fill_insert(__gnu_cxx::__normal_iterator<CtxtPart*, std::vector<CtxtPart, std::allocator<CtxtPart> > >, unsigned long, CtxtPart const&)
 [123] PAlgebraModDerived<PA_zz_p>::genCrtTable() [231] Cmodulus::operator=(Cmodulus const&) [238] void std::vector<CtxtPart, std::allocator<CtxtPart> >::_M_emplace_back_aux<CtxtPart>(CtxtPart&&)
 [147] PAlgebraModDerived<PA_zz_p>::genMaskTable() [199] IndexSet::intervalConstructor(long, long) [240] std::vector<CtxtPart, std::allocator<CtxtPart> >::operator=(std::vector<CtxtPart, std::allocator<CtxtPart> > const&)
 [112] PAlgebraModDerived<PA_zz_p>::PAlgebraModDerived(PAlgebra const&, long) [260] IndexSet::insert(IndexSet const&) [326] std::vector<IndexSet, std::allocator<IndexSet> >::_M_default_append(unsigned long)
 [308] PAlgebraModDerived<PA_zz_p>::~PAlgebraModDerived() [174] IndexSet::insert(long) [205] std::vector<DoubleCRT, std::allocator<DoubleCRT> >::_M_fill_insert(__gnu_cxx::__normal_iterator<DoubleCRT*, std::vector<DoubleCRT, std::allocator<DoubleCRT> > >, unsigned long, DoubleCRT const&)
 [117] EncryptedArrayDerived<PA_zz_p>::EncryptedArrayDerived(FHEcontext const&, NTL::zz_pX const&, PAlgebraMod const&) [187] IndexSet::remove(IndexSet const&) [327] void std::vector<DoubleCRT, std::allocator<DoubleCRT> >::_M_emplace_back_aux<DoubleCRT const&>(DoubleCRT const&)
 [275] EncryptedArrayDerived<PA_zz_p>::~EncryptedArrayDerived() [175] IndexSet::remove(long) [206] std::vector<DoubleCRT, std::allocator<DoubleCRT> >::resize(unsigned long, DoubleCRT const&)
 [276] NTL::MakeSmartAux<NTL::zz_pEInfoT>::~MakeSmartAux() [191] IndexSet::retain(IndexSet const&) [259] void std::vector<KeySwitch, std::allocator<KeySwitch> >::_M_emplace_back_aux<KeySwitch const&>(KeySwitch const&)
 [243] NTL::zz_pXModulus::~zz_pXModulus() [270] IndexSet::emptySet() [295] std::vector<NTL::Mat<NTL::zz_p>, std::allocator<NTL::Mat<NTL::zz_p> > >::_M_default_append(unsigned long)
 [203] NTL::PartitionInfo::PartitionInfo(long, long) [316] PAlgebra::PAlgebra(unsigned long, unsigned long, std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&) [328] std::vector<NTL::Vec<long>, std::allocator<NTL::Vec<long> > >::_M_default_append(unsigned long)
  [12] NTL::RandomStream_impl::get_bytes(unsigned char*, long, long) [26] DoubleCRT::scaleDownToSet(IndexSet const&, long) [329] std::vector<NTL::ZZX, std::allocator<NTL::ZZX> >::_M_default_append(unsigned long)
  [40] void NTL::default_BlockConstructFromVec<long>(long*, long, long const*) [103] DoubleCRT::addPrimesAndScale(IndexSet const&) [214] std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >::_M_default_append(unsigned long)
 [309] NTL::Mat<NTL::ZZ>::SetDims(long, long) [79] DoubleCRT& DoubleCRT::Op<DoubleCRT::AddFun>(NTL::ZZX const&, DoubleCRT::AddFun) [223] std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >::resize(unsigned long)
 [183] NTL::Mat<NTL::zz_p>::SetDims(long, long) [73] DoubleCRT& DoubleCRT::Op<DoubleCRT::AddFun>(DoubleCRT const&, DoubleCRT::AddFun, bool) [198] std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >::~vector()
 [105] NTL::Mat<NTL::zz_p>::Mat(NTL::Mat<NTL::zz_p> const&) [81] DoubleCRT& DoubleCRT::Op<DoubleCRT::MulFun>(NTL::ZZ const&, DoubleCRT::MulFun) [140] std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >::operator=(std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > const&)
 [277] NTL::Mat<NTL::zz_pE>::SetDims(long, long) [217] DoubleCRT& DoubleCRT::Op<DoubleCRT::MulFun>(NTL::ZZX const&, DoubleCRT::MulFun) [330] std::vector<NTL::zz_pEX, std::allocator<NTL::zz_pEX> >::_M_default_append(unsigned long)
  [88] NTL::Mat<NTL::zz_pE>::Mat(NTL::Mat<NTL::zz_pE> const&) [61] DoubleCRT& DoubleCRT::Op<DoubleCRT::SubFun>(NTL::ZZX const&, DoubleCRT::SubFun) [334] void std::vector<FHEtimer*, std::allocator<FHEtimer*> >::_M_emplace_back_aux<FHEtimer* const&>(FHEtimer* const&)
 [278] NTL::Mat<long>::SetDims(long, long) [82] DoubleCRT& DoubleCRT::Op<DoubleCRT::SubFun>(DoubleCRT const&, DoubleCRT::SubFun, bool) [331] std::vector<std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> >, std::allocator<std::vector<NTL::zz_pX, std::allocator<NTL::zz_pX> > > >::_M_default_append(unsigned long)
 [310] NTL::Vec<NTL::Vec<NTL::ZZ> >::AllocateTo(long) [122] DoubleCRT::Exp(long) [332] std::vector<std::vector<long, std::allocator<long> >, std::allocator<std::vector<long, std::allocator<long> > > >::_M_default_append(unsigned long)
 [311] void NTL::Vec<NTL::Vec<NTL::ZZ> >::DoSetLengthAndApply<NTL::Mat<NTL::ZZ>::Fixer>(long, NTL::Mat<NTL::ZZ>::Fixer&) [19] DoubleCRT::FFT(NTL::ZZX const&, IndexSet const&) [246] void std::vector<std::pair<long, long>, std::allocator<std::pair<long, long> > >::_M_emplace_back_aux<std::pair<long, long> >(std::pair<long, long>&&)
 [182] NTL::Vec<NTL::Vec<NTL::zz_p> >::AllocateTo(long) [31] DoubleCRT::do_mul(DoubleCRT const&, bool) [162] std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned long, bool)
 [184] void NTL::Vec<NTL::Vec<NTL::zz_p> >::DoSetLengthAndApply<NTL::Mat<NTL::zz_p>::Fixer>(long, NTL::Mat<NTL::zz_p>::Fixer&) [96] DoubleCRT::automorph(long) [264] std::vector<long, std::allocator<long> >::_M_fill_assign(unsigned long, long const&)
 [204] NTL::Vec<NTL::Vec<NTL::zz_p> >::Init(long) [67] DoubleCRT::randomize(NTL::ZZ const*) [296] std::vector<long, std::allocator<long> >::_M_default_append(unsigned long)
 [106] NTL::Vec<NTL::Vec<NTL::zz_p> >::Init(long, NTL::Vec<NTL::zz_p> const*) [84] DoubleCRT::DoubleCRT(FHEcontext const&) [218] void std::vector<long, std::allocator<long> >::_M_emplace_back_aux<long const&>(long const&)
 [172] NTL::Vec<NTL::Vec<NTL::zz_p> >::swap(NTL::Vec<NTL::Vec<NTL::zz_p> >&) [100] DoubleCRT::DoubleCRT(FHEcontext const&, IndexSet const&) [297] std::vector<long, std::allocator<long> >::operator=(std::vector<long, std::allocator<long> > const&)
 [258] NTL::Vec<NTL::Vec<NTL::zz_p> >::~Vec() [60] DoubleCRT::DoubleCRT(NTL::ZZX const&, FHEcontext const&, IndexSet const&) [242] std::vector<unsigned long, std::allocator<unsigned long> >::_M_default_append(unsigned long)
 [266] NTL::Vec<NTL::Vec<NTL::zz_pE> >::AllocateTo(long) [27] DoubleCRT::operator=(NTL::ZZX const&) [53] std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::~_Alloc_hider()
 [279] void NTL::Vec<NTL::Vec<NTL::zz_pE> >::DoSetLengthAndApply<NTL::Mat<NTL::zz_pE>::Fixer>(long, NTL::Mat<NTL::zz_pE>::Fixer&) [101] DoubleCRT::operator=(DoubleCRT const&) [54] std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<long const, NTL::Vec<long> >, false> > >::_M_deallocate_node(std::__detail::_Hash_node<std::pair<long const, NTL::Vec<long> >, false>*)
 [267] NTL::Vec<NTL::Vec<NTL::zz_pE> >::~Vec() [287] FHEPubKey::setKeySwitchMap(long) [33] std::__detail::_Map_base<long, std::pair<long const, NTL::Vec<long> >, std::allocator<std::pair<long const, NTL::Vec<long> > >, std::__detail::_Select1st, std::equal_to<long>, std::hash<long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](long const&)
 [312] NTL::Vec<NTL::Vec<NTL::zz_pX> >::AllocateTo(long) [65] FHESecKey::ImportSecKey(DoubleCRT const&, long, long, long) [192] operator&(IndexSet const&, IndexSet const&)
 [274] NTL::Vec<NTL::Vec<long> >::AllocateTo(long) [5] FHESecKey::GenKeySWmatrix(long, long, long, long, long) [193] operator/(IndexSet const&, IndexSet const&)
 [280] void NTL::Vec<NTL::Vec<long> >::DoSetLengthAndApply<NTL::Mat<long>::Fixer>(long, NTL::Mat<long>::Fixer&) [220] KeySwitch::dummy() [177] operator>=(IndexSet const&, IndexSet const&)
 [281] NTL::Vec<NTL::Vec<long> >::~Vec() [48] bool __gnu_cxx::operator!=<CtxtPart const*, std::vector<CtxtPart, std::allocator<CtxtPart> > >(__gnu_cxx::__normal_iterator<CtxtPart const*, std::vector<CtxtPart, std::allocator<CtxtPart> > > const&, __gnu_cxx::__normal_iterator<CtxtPart const*, std::vector<CtxtPart, std::allocator<CtxtPart> > > const&) [176] operator<=(IndexSet const&, IndexSet const&)
 [178] NTL::Vec<NTL::ZZ>::AllocateTo(long) [188] FHEcontext::productOfPrimes(NTL::ZZ&, IndexSet const&) const [150] <cycle 1>
 [181] NTL::Vec<NTL::ZZ>::DoSetLength(long) [317] FHEcontext::operator==(FHEcontext const&) const
 [189] NTL::Vec<NTL::ZZ>::SetMaxLength(long) [318] RecryptData::operator==(RecryptData const&) const
